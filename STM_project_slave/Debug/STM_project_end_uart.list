
STM_project_end_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006468  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006608  08006608  00016608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b0  080068b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080068b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001e4  08006a9c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006a9c  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1d9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a8e  00000000  00000000  0002a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000920  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015fa8  00000000  00000000  0002cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a62  00000000  00000000  00042f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087868  00000000  00000000  0004a9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d225a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f50  00000000  00000000  000d22d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065f0 	.word	0x080065f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080065f0 	.word	0x080065f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <NRF24_init>:


////--------------------------------------------------
//
void NRF24_init()
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	CE_OFF;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <NRF24_init+0x84>)
 8000ec2:	f001 f9d3 	bl	800226c <HAL_GPIO_WritePin>
	delay_micro(10300);
 8000ec6:	f642 003c 	movw	r0, #10300	; 0x283c
 8000eca:	f000 f83d 	bl	8000f48 <delay_micro>

	NRF24_WriteReg(CONFIG, (uint8_t)0X0C); // mask, CRC, enable(off), TX
 8000ece:	210c      	movs	r1, #12
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f883 	bl	8000fdc <NRF24_WriteReg>
	NRF24_WriteReg(EN_AA, (uint8_t)0X01); // Enable auto acknowledgement data pipe 0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 f87f 	bl	8000fdc <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, (uint8_t)0X01); // Enable data pipe 0.
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f000 f87b 	bl	8000fdc <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, (uint8_t)0X01); // '01' - 3 bytes RX/TX Address field width
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f877 	bl	8000fdc <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, (uint8_t)0X0F); // ‘1111’ – Up to 15 Re-Transmit on fail of AA
 8000eee:	210f      	movs	r1, #15
 8000ef0:	2004      	movs	r0, #4
 8000ef2:	f000 f873 	bl	8000fdc <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, (uint8_t)0X64); // Sets the frequency channel nRF24L01 operates on 2500Mgc
 8000ef6:	2164      	movs	r1, #100	; 0x64
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f000 f86f 	bl	8000fdc <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, (uint8_t)0X26); // 2Mbps, 0dBm Setup, LNA gain; olde 0X0F
 8000efe:	2126      	movs	r1, #38	; 0x26
 8000f00:	2006      	movs	r0, #6
 8000f02:	f000 f86b 	bl	8000fdc <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, (uint8_t)0X70); // reset interupt
 8000f06:	2170      	movs	r1, #112	; 0x70
 8000f08:	2007      	movs	r0, #7
 8000f0a:	f000 f867 	bl	8000fdc <NRF24_WriteReg>

	NRF24_Write_Buf(RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // Receive address data pipe 0.
 8000f0e:	2203      	movs	r2, #3
 8000f10:	490b      	ldr	r1, [pc, #44]	; (8000f40 <NRF24_init+0x88>)
 8000f12:	200a      	movs	r0, #10
 8000f14:	f000 f8ba 	bl	800108c <NRF24_Write_Buf>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH); // Transmit address.
 8000f18:	2203      	movs	r2, #3
 8000f1a:	490a      	ldr	r1, [pc, #40]	; (8000f44 <NRF24_init+0x8c>)
 8000f1c:	2010      	movs	r0, #16
 8000f1e:	f000 f8b5 	bl	800108c <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, (uint8_t)RX_PLOAD_WIDTH); // number of data byte arived 6
 8000f22:	211b      	movs	r1, #27
 8000f24:	2011      	movs	r0, #17
 8000f26:	f000 f859 	bl	8000fdc <NRF24_WriteReg>


	NRF24_PWR_UP_ON();
 8000f2a:	f000 f965 	bl	80011f8 <NRF24_PWR_UP_ON>
	delay_micro(1500);
 8000f2e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f32:	f000 f809 	bl	8000f48 <delay_micro>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20000000 	.word	0x20000000

08000f48 <delay_micro>:


////--------------------------------------------------
//
void delay_micro(volatile uint32_t num)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	num *= SYSTEM_CLOCK / 1000000;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	22b4      	movs	r2, #180	; 0xb4
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	607b      	str	r3, [r7, #4]

	while (num--);
 8000f5a:	bf00      	nop
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	1e5a      	subs	r2, r3, #1
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1fa      	bne.n	8000f5c <delay_micro+0x14>
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <NRF24_ReadReg>:


////--------------------------------------------------
//
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd = 0XFF;
 8000f82:	23ff      	movs	r3, #255	; 0xff
 8000f84:	73bb      	strb	r3, [r7, #14]

  CS_ON;
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <NRF24_ReadReg+0x60>)
 8000f8c:	f001 f96e 	bl	800226c <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8000f90:	f107 020f 	add.w	r2, r7, #15
 8000f94:	1df9      	adds	r1, r7, #7
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <NRF24_ReadReg+0x64>)
 8000fa0:	f002 f87f 	bl	80030a2 <HAL_SPI_TransmitReceive>

  if (addr!=STATUS)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d00a      	beq.n	8000fc0 <NRF24_ReadReg+0x4c>
    HAL_SPI_TransmitReceive(&hspi1, &cmd, &dt, 1, 1000);
 8000faa:	f107 020f 	add.w	r2, r7, #15
 8000fae:	f107 010e 	add.w	r1, r7, #14
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <NRF24_ReadReg+0x64>)
 8000fbc:	f002 f871 	bl	80030a2 <HAL_SPI_TransmitReceive>

  CS_OFF;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <NRF24_ReadReg+0x60>)
 8000fc6:	f001 f951 	bl	800226c <HAL_GPIO_WritePin>

  return dt;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	200002d0 	.word	0x200002d0

08000fdc <NRF24_WriteReg>:


////------------------------------------------------
//
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <NRF24_WriteReg+0x54>)
 8000ffc:	f001 f936 	bl	800226c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001000:	1df9      	adds	r1, r7, #7
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	2201      	movs	r2, #1
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <NRF24_WriteReg+0x58>)
 800100a:	f001 fe0d 	bl	8002c28 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &dt, 1, 1000);
 800100e:	1db9      	adds	r1, r7, #6
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	2201      	movs	r2, #1
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <NRF24_WriteReg+0x58>)
 8001018:	f001 fe06 	bl	8002c28 <HAL_SPI_Transmit>

  CS_OFF;
 800101c:	2201      	movs	r2, #1
 800101e:	2120      	movs	r1, #32
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <NRF24_WriteReg+0x54>)
 8001022:	f001 f923 	bl	800226c <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020800 	.word	0x40020800
 8001034:	200002d0 	.word	0x200002d0

08001038 <NRF24_Read_Buf>:


////------------------------------------------------
//
void NRF24_Read_Buf(uint8_t addr, uint8_t *pBuf, uint8_t bytes)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <NRF24_Read_Buf+0x4c>)
 800104e:	f001 f90d 	bl	800226c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001052:	1df9      	adds	r1, r7, #7
 8001054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001058:	2201      	movs	r2, #1
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <NRF24_Read_Buf+0x50>)
 800105c:	f001 fde4 	bl	8002c28 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, pBuf, bytes, 1000);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	b29a      	uxth	r2, r3
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	6839      	ldr	r1, [r7, #0]
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <NRF24_Read_Buf+0x50>)
 800106c:	f001 ff10 	bl	8002e90 <HAL_SPI_Receive>

  CS_OFF;
 8001070:	2201      	movs	r2, #1
 8001072:	2120      	movs	r1, #32
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <NRF24_Read_Buf+0x4c>)
 8001076:	f001 f8f9 	bl	800226c <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020800 	.word	0x40020800
 8001088:	200002d0 	.word	0x200002d0

0800108c <NRF24_Write_Buf>:


////------------------------------------------------
//
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 80010a6:	2200      	movs	r2, #0
 80010a8:	2120      	movs	r1, #32
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <NRF24_Write_Buf+0x54>)
 80010ac:	f001 f8de 	bl	800226c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80010b0:	1df9      	adds	r1, r7, #7
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	2201      	movs	r2, #1
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <NRF24_Write_Buf+0x58>)
 80010ba:	f001 fdb5 	bl	8002c28 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, pBuf, bytes, 1000);
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <NRF24_Write_Buf+0x58>)
 80010ca:	f001 fdad 	bl	8002c28 <HAL_SPI_Transmit>

  CS_OFF;
 80010ce:	2201      	movs	r2, #1
 80010d0:	2120      	movs	r1, #32
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <NRF24_Write_Buf+0x54>)
 80010d4:	f001 f8ca 	bl	800226c <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020800 	.word	0x40020800
 80010e4:	200002d0 	.word	0x200002d0

080010e8 <NRF24_FlushRX>:


////------------------------------------------------
//
void NRF24_FlushRX(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint8_t dt = (uint8_t)FLUSH_RX;
 80010ee:	23e2      	movs	r3, #226	; 0xe2
 80010f0:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 80010f2:	2200      	movs	r2, #0
 80010f4:	2120      	movs	r1, #32
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <NRF24_FlushRX+0x34>)
 80010f8:	f001 f8b8 	bl	800226c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &dt, 1, 1000);
 80010fc:	1df9      	adds	r1, r7, #7
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	2201      	movs	r2, #1
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <NRF24_FlushRX+0x38>)
 8001106:	f001 fd8f 	bl	8002c28 <HAL_SPI_Transmit>

  CS_OFF;
 800110a:	2201      	movs	r2, #1
 800110c:	2120      	movs	r1, #32
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <NRF24_FlushRX+0x34>)
 8001110:	f001 f8ac 	bl	800226c <HAL_GPIO_WritePin>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020800 	.word	0x40020800
 8001120:	200002d0 	.word	0x200002d0

08001124 <NRF24_FlushTX>:


////------------------------------------------------
//
void NRF24_FlushTX(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  uint8_t dt = (uint8_t)FLUSH_TX;
 800112a:	23e1      	movs	r3, #225	; 0xe1
 800112c:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 800112e:	2200      	movs	r2, #0
 8001130:	2120      	movs	r1, #32
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <NRF24_FlushTX+0x34>)
 8001134:	f001 f89a 	bl	800226c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &dt, 1, 1000);
 8001138:	1df9      	adds	r1, r7, #7
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	2201      	movs	r2, #1
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <NRF24_FlushTX+0x38>)
 8001142:	f001 fd71 	bl	8002c28 <HAL_SPI_Transmit>

  CS_OFF;
 8001146:	2201      	movs	r2, #1
 8001148:	2120      	movs	r1, #32
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <NRF24_FlushTX+0x34>)
 800114c:	f001 f88e 	bl	800226c <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020800 	.word	0x40020800
 800115c:	200002d0 	.word	0x200002d0

08001160 <NRF24_RX_Mode>:


////------------------------------------------------
//
void NRF24_RX_Mode(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 800116a:	2200      	movs	r2, #0
 800116c:	2120      	movs	r1, #32
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <NRF24_RX_Mode+0x48>)
 8001170:	f001 f87c 	bl	800226c <HAL_GPIO_WritePin>

  regval = NRF24_ReadReg(CONFIG);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fefd 	bl	8000f74 <NRF24_ReadReg>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  regval |= (1UL<<PRIM_RX); // RX_mode
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4619      	mov	r1, r3
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff ff26 	bl	8000fdc <NRF24_WriteReg>

  CS_OFF;
 8001190:	2201      	movs	r2, #1
 8001192:	2120      	movs	r1, #32
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <NRF24_RX_Mode+0x48>)
 8001196:	f001 f869 	bl	800226c <HAL_GPIO_WritePin>

  NRF24_FlushRX();
 800119a:	f7ff ffa5 	bl	80010e8 <NRF24_FlushRX>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020800 	.word	0x40020800

080011ac <NRF24_TX_Mode>:


////------------------------------------------------
//
void NRF24_TX_Mode(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <NRF24_TX_Mode+0x48>)
 80011bc:	f001 f856 	bl	800226c <HAL_GPIO_WritePin>

  regval = NRF24_ReadReg(CONFIG);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fed7 	bl	8000f74 <NRF24_ReadReg>
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  regval &= ~(1UL<<PRIM_RX); // TX_mode
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4619      	mov	r1, r3
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff ff00 	bl	8000fdc <NRF24_WriteReg>

  CS_OFF;
 80011dc:	2201      	movs	r2, #1
 80011de:	2120      	movs	r1, #32
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <NRF24_TX_Mode+0x48>)
 80011e2:	f001 f843 	bl	800226c <HAL_GPIO_WritePin>

  NRF24_FlushTX();
 80011e6:	f7ff ff9d 	bl	8001124 <NRF24_FlushTX>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020800 	.word	0x40020800

080011f8 <NRF24_PWR_UP_ON>:


////------------------------------------------------
//
void NRF24_PWR_UP_ON(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 8001202:	2200      	movs	r2, #0
 8001204:	2120      	movs	r1, #32
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <NRF24_PWR_UP_ON+0x44>)
 8001208:	f001 f830 	bl	800226c <HAL_GPIO_WritePin>

  regval = NRF24_ReadReg(CONFIG);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff feb1 	bl	8000f74 <NRF24_ReadReg>
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  regval |= (1UL<<PWR_UP); // ON
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4619      	mov	r1, r3
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff feda 	bl	8000fdc <NRF24_WriteReg>

  CS_OFF;
 8001228:	2201      	movs	r2, #1
 800122a:	2120      	movs	r1, #32
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <NRF24_PWR_UP_ON+0x44>)
 800122e:	f001 f81d 	bl	800226c <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40020800 	.word	0x40020800

08001240 <NRF24_Transmit_base>:


////------------------------------------------------
//
void NRF24_Transmit_base(uint8_t *pBuf, uint8_t bytes)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	uint8_t w_tx_payload = (uint8_t)W_TX_PAYLOAD;
 800124c:	23a0      	movs	r3, #160	; 0xa0
 800124e:	73fb      	strb	r3, [r7, #15]

	CE_OFF;
 8001250:	2200      	movs	r2, #0
 8001252:	2110      	movs	r1, #16
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <NRF24_Transmit_base+0x44>)
 8001256:	f001 f809 	bl	800226c <HAL_GPIO_WritePin>
	delay_micro(300);
 800125a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800125e:	f7ff fe73 	bl	8000f48 <delay_micro>

	NRF24_TX_Mode();
 8001262:	f7ff ffa3 	bl	80011ac <NRF24_TX_Mode>

	NRF24_Write_Buf(w_tx_payload, pBuf, bytes);
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff0d 	bl	800108c <NRF24_Write_Buf>

	//NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt

	CE_ON;
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <NRF24_Transmit_base+0x44>)
 8001278:	f000 fff8 	bl	800226c <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020800 	.word	0x40020800

08001288 <NRF24_Receive_base>:


////------------------------------------------------
//
void NRF24_Receive_base()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	CE_OFF;
 800128c:	2200      	movs	r2, #0
 800128e:	2110      	movs	r1, #16
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <NRF24_Receive_base+0x28>)
 8001292:	f000 ffeb 	bl	800226c <HAL_GPIO_WritePin>
	delay_micro(300);
 8001296:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800129a:	f7ff fe55 	bl	8000f48 <delay_micro>

	NRF24_RX_Mode();
 800129e:	f7ff ff5f 	bl	8001160 <NRF24_RX_Mode>

	//NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt

	CE_ON;
 80012a2:	2201      	movs	r2, #1
 80012a4:	2110      	movs	r1, #16
 80012a6:	4802      	ldr	r0, [pc, #8]	; (80012b0 <NRF24_Receive_base+0x28>)
 80012a8:	f000 ffe0 	bl	800226c <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020800 	.word	0x40020800

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012f4:	b0ad      	sub	sp, #180	; 0xb4
 80012f6:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f8:	f000 fc90 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fc:	f000 f9a8 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001300:	f000 fa6e 	bl	80017e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001304:	f000 fa0c 	bl	8001720 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001308:	f000 fa40 	bl	800178c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 800130c:	4ba3      	ldr	r3, [pc, #652]	; (800159c <main+0x2ac>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4aa2      	ldr	r2, [pc, #648]	; (800159c <main+0x2ac>)
 8001312:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001316:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ (USART2_IRQn);
 8001318:	2026      	movs	r0, #38	; 0x26
 800131a:	f7ff ffcb 	bl	80012b4 <__NVIC_EnableIRQ>
  NRF24_init();
 800131e:	f7ff fdcb 	bl	8000eb8 <NRF24_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  NRF24_Receive_base();
 8001322:	f7ff ffb1 	bl	8001288 <NRF24_Receive_base>

  while (1)
  {
	  if (NRF24_IRQ)
 8001326:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <main+0x2b0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d050      	beq.n	80013d0 <main+0xe0>
	  {
		  uint8_t r_rx_payload = (uint8_t)R_RX_PAYLOAD;
 800132e:	2361      	movs	r3, #97	; 0x61
 8001330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  uint8_t temp_status = NRF24_ReadReg((uint8_t)STATUS);
 8001334:	2007      	movs	r0, #7
 8001336:	f7ff fe1d 	bl	8000f74 <NRF24_ReadReg>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

		  NRF24_IRQ = 0;
 8001340:	4b97      	ldr	r3, [pc, #604]	; (80015a0 <main+0x2b0>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

		  if (temp_status & (1UL << RX_DR))
 8001346:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800134a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d017      	beq.n	8001382 <main+0x92>
		  {
			  NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 8001352:	2007      	movs	r0, #7
 8001354:	f7ff fe0e 	bl	8000f74 <NRF24_ReadReg>
 8001358:	4603      	mov	r3, r0
 800135a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4619      	mov	r1, r3
 8001362:	2007      	movs	r0, #7
 8001364:	f7ff fe3a 	bl	8000fdc <NRF24_WriteReg>
			  NRF24_Read_Buf(r_rx_payload, buf_nrf_receive, 27);
 8001368:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136c:	221b      	movs	r2, #27
 800136e:	498d      	ldr	r1, [pc, #564]	; (80015a4 <main+0x2b4>)
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe61 	bl	8001038 <NRF24_Read_Buf>
			  NRF24_Receive_base();
 8001376:	f7ff ff87 	bl	8001288 <NRF24_Receive_base>

			  nrf_receive_flag = 1;
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <main+0x2b8>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e026      	b.n	80013d0 <main+0xe0>
		  }
		  else if (temp_status & (1UL << TX_DS))
 8001382:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00d      	beq.n	80013aa <main+0xba>
		  {
			  NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 800138e:	2007      	movs	r0, #7
 8001390:	f7ff fdf0 	bl	8000f74 <NRF24_ReadReg>
 8001394:	4603      	mov	r3, r0
 8001396:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4619      	mov	r1, r3
 800139e:	2007      	movs	r0, #7
 80013a0:	f7ff fe1c 	bl	8000fdc <NRF24_WriteReg>
			  NRF24_Receive_base();
 80013a4:	f7ff ff70 	bl	8001288 <NRF24_Receive_base>
 80013a8:	e012      	b.n	80013d0 <main+0xe0>
		  }

		  else if (temp_status & (1UL << MAX_RT))
 80013aa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <main+0xe0>
		  {
			  NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 80013b6:	2007      	movs	r0, #7
 80013b8:	f7ff fddc 	bl	8000f74 <NRF24_ReadReg>
 80013bc:	4603      	mov	r3, r0
 80013be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	2007      	movs	r0, #7
 80013c8:	f7ff fe08 	bl	8000fdc <NRF24_WriteReg>
			  NRF24_Receive_base();
 80013cc:	f7ff ff5c 	bl	8001288 <NRF24_Receive_base>
		  }
	  }

	  if (nrf_receive_flag)
 80013d0:	4b75      	ldr	r3, [pc, #468]	; (80015a8 <main+0x2b8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d051      	beq.n	800147c <main+0x18c>
	  {
		  nrf_receive_flag = 0;
 80013d8:	4b73      	ldr	r3, [pc, #460]	; (80015a8 <main+0x2b8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 80013de:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <main+0x2b4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	4680      	mov	r8, r0
 80013ea:	4689      	mov	r9, r1
 80013ec:	4b6f      	ldr	r3, [pc, #444]	; (80015ac <main+0x2bc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f8b1 	bl	8000558 <__aeabi_f2d>
 80013f6:	4604      	mov	r4, r0
 80013f8:	460d      	mov	r5, r1
				  *((float*)(buf_nrf_receive + 8)), buf_nrf_receive[12], buf_nrf_receive[13], buf_nrf_receive[14],
 80013fa:	4b6d      	ldr	r3, [pc, #436]	; (80015b0 <main+0x2c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8aa 	bl	8000558 <__aeabi_f2d>
				  *((float*)(buf_nrf_receive + 8)), buf_nrf_receive[12], buf_nrf_receive[13], buf_nrf_receive[14],
 8001404:	4b67      	ldr	r3, [pc, #412]	; (80015a4 <main+0x2b4>)
 8001406:	7b1b      	ldrb	r3, [r3, #12]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 8001408:	461e      	mov	r6, r3
				  *((float*)(buf_nrf_receive + 8)), buf_nrf_receive[12], buf_nrf_receive[13], buf_nrf_receive[14],
 800140a:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <main+0x2b4>)
 800140c:	7b5b      	ldrb	r3, [r3, #13]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 800140e:	617b      	str	r3, [r7, #20]
				  *((float*)(buf_nrf_receive + 8)), buf_nrf_receive[12], buf_nrf_receive[13], buf_nrf_receive[14],
 8001410:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <main+0x2b4>)
 8001412:	7b9b      	ldrb	r3, [r3, #14]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 8001414:	613b      	str	r3, [r7, #16]
				  buf_nrf_receive[15], buf_nrf_receive[16], buf_nrf_receive[17], buf_nrf_receive[18],
 8001416:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <main+0x2b4>)
 8001418:	7bdb      	ldrb	r3, [r3, #15]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 800141a:	60fb      	str	r3, [r7, #12]
				  buf_nrf_receive[15], buf_nrf_receive[16], buf_nrf_receive[17], buf_nrf_receive[18],
 800141c:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <main+0x2b4>)
 800141e:	7c1b      	ldrb	r3, [r3, #16]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 8001420:	60bb      	str	r3, [r7, #8]
				  buf_nrf_receive[15], buf_nrf_receive[16], buf_nrf_receive[17], buf_nrf_receive[18],
 8001422:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <main+0x2b4>)
 8001424:	7c5b      	ldrb	r3, [r3, #17]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 8001426:	607b      	str	r3, [r7, #4]
				  buf_nrf_receive[15], buf_nrf_receive[16], buf_nrf_receive[17], buf_nrf_receive[18],
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <main+0x2b4>)
 800142a:	7c9b      	ldrb	r3, [r3, #18]
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 800142c:	603b      	str	r3, [r7, #0]
				  *((uint32_t*)(buf_nrf_receive + 19)), *((uint32_t*)(buf_nrf_receive + 23)));
 800142e:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <main+0x2c4>)
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 8001430:	681a      	ldr	r2, [r3, #0]
				  *((uint32_t*)(buf_nrf_receive + 19)), *((uint32_t*)(buf_nrf_receive + 23)));
 8001432:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <main+0x2c8>)
		  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_receive), *((float*)(buf_nrf_receive + 4)),
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	930c      	str	r3, [sp, #48]	; 0x30
 8001438:	920b      	str	r2, [sp, #44]	; 0x2c
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	920a      	str	r2, [sp, #40]	; 0x28
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	9209      	str	r2, [sp, #36]	; 0x24
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	9208      	str	r2, [sp, #32]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	9207      	str	r2, [sp, #28]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	9305      	str	r3, [sp, #20]
 8001452:	9604      	str	r6, [sp, #16]
 8001454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001458:	e9cd 4500 	strd	r4, r5, [sp]
 800145c:	4642      	mov	r2, r8
 800145e:	464b      	mov	r3, r9
 8001460:	4956      	ldr	r1, [pc, #344]	; (80015bc <main+0x2cc>)
 8001462:	4857      	ldr	r0, [pc, #348]	; (80015c0 <main+0x2d0>)
 8001464:	f003 fc4e 	bl	8004d04 <siprintf>
		  HAL_UART_Transmit(&huart2, uart_transmit, strlen((char*)uart_transmit), 100);
 8001468:	4855      	ldr	r0, [pc, #340]	; (80015c0 <main+0x2d0>)
 800146a:	f7fe feb9 	bl	80001e0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	4952      	ldr	r1, [pc, #328]	; (80015c0 <main+0x2d0>)
 8001476:	4853      	ldr	r0, [pc, #332]	; (80015c4 <main+0x2d4>)
 8001478:	f002 f913 	bl	80036a2 <HAL_UART_Transmit>
	  }

	  if (uart_flag)
 800147c:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <main+0x2d8>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f43f af50 	beq.w	8001326 <main+0x36>
	  {
		  char array[10] = {0};
 8001486:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	811a      	strh	r2, [r3, #8]
		  uint8_t temp_buf[64];
		  uint32_t array_index = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	677b      	str	r3, [r7, #116]	; 0x74
		  uint32_t num_array_index = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	673b      	str	r3, [r7, #112]	; 0x70
		  uart_flag = 0;
 800149a:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <main+0x2d8>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]

		  memcpy(temp_buf, uart_receve, 64);
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <main+0x2dc>)
 80014a2:	f107 041c 	add.w	r4, r7, #28
 80014a6:	461d      	mov	r5, r3
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		  if (temp_buf[0] == 'u')
 80014bc:	7f3b      	ldrb	r3, [r7, #28]
 80014be:	2b75      	cmp	r3, #117	; 0x75
 80014c0:	d103      	bne.n	80014ca <main+0x1da>
		  {
			  buf_nrf_transmit[0] = temp_buf[0];
 80014c2:	7f3a      	ldrb	r2, [r7, #28]
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <main+0x2e0>)
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e0bb      	b.n	8001642 <main+0x352>
		  }
		  else if (temp_buf[0] == 'n')
 80014ca:	7f3b      	ldrb	r3, [r7, #28]
 80014cc:	2b6e      	cmp	r3, #110	; 0x6e
 80014ce:	d103      	bne.n	80014d8 <main+0x1e8>
		  {
			  buf_nrf_transmit[0] = temp_buf[0];
 80014d0:	7f3a      	ldrb	r2, [r7, #28]
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <main+0x2e0>)
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e0b4      	b.n	8001642 <main+0x352>
		  }
		  else if (temp_buf[0] == 'a')
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	2b61      	cmp	r3, #97	; 0x61
 80014dc:	d144      	bne.n	8001568 <main+0x278>
		  {
			  buf_nrf_transmit[0] = temp_buf[0];
 80014de:	7f3a      	ldrb	r2, [r7, #28]
 80014e0:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <main+0x2e0>)
 80014e2:	701a      	strb	r2, [r3, #0]

			  for (uint32_t i = 1; temp_buf[i] != '\0'; i++)
 80014e4:	2301      	movs	r3, #1
 80014e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014e8:	e028      	b.n	800153c <main+0x24c>
			  {
				  if (temp_buf[i] != ':')
 80014ea:	f107 021c 	add.w	r2, r7, #28
 80014ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b3a      	cmp	r3, #58	; 0x3a
 80014f6:	d00e      	beq.n	8001516 <main+0x226>
				  {
					  array[array_index] = temp_buf[i];
 80014f8:	f107 021c 	add.w	r2, r7, #28
 80014fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014fe:	4413      	add	r3, r2
 8001500:	7819      	ldrb	r1, [r3, #0]
 8001502:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001508:	4413      	add	r3, r2
 800150a:	460a      	mov	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
					  array_index++;
 800150e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001510:	3301      	adds	r3, #1
 8001512:	677b      	str	r3, [r7, #116]	; 0x74
 8001514:	e00f      	b.n	8001536 <main+0x246>
				  }
				  else
				  {
					  array[array_index] = '\0';
 8001516:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800151a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
					  *((uint32_t*)(buf_nrf_transmit + 1)) = atoi(array);
 8001522:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001526:	4618      	mov	r0, r3
 8001528:	f002 ff5a 	bl	80043e0 <atoi>
 800152c:	4602      	mov	r2, r0
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <main+0x2e4>)
 8001530:	601a      	str	r2, [r3, #0]
					  array_index = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	677b      	str	r3, [r7, #116]	; 0x74
			  for (uint32_t i = 1; temp_buf[i] != '\0'; i++)
 8001536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001538:	3301      	adds	r3, #1
 800153a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800153c:	f107 021c 	add.w	r2, r7, #28
 8001540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1cf      	bne.n	80014ea <main+0x1fa>
				  }
			  }

			  array[array_index] = '\0';
 800154a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800154e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001550:	4413      	add	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
			  *((uint32_t*)(buf_nrf_transmit + 5)) = atoi(array);
 8001556:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800155a:	4618      	mov	r0, r3
 800155c:	f002 ff40 	bl	80043e0 <atoi>
 8001560:	4602      	mov	r2, r0
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <main+0x2e8>)
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e06c      	b.n	8001642 <main+0x352>
		  }
		  else
		  {
			  for (uint32_t i = 0; temp_buf[i] != '\0'; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	66bb      	str	r3, [r7, #104]	; 0x68
 800156c:	e050      	b.n	8001610 <main+0x320>
			  {
				  if (temp_buf[i] != ':')
 800156e:	f107 021c 	add.w	r2, r7, #28
 8001572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b3a      	cmp	r3, #58	; 0x3a
 800157a:	d02f      	beq.n	80015dc <main+0x2ec>
				  {
					  array[array_index] = temp_buf[i];
 800157c:	f107 021c 	add.w	r2, r7, #28
 8001580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001582:	4413      	add	r3, r2
 8001584:	7819      	ldrb	r1, [r3, #0]
 8001586:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800158a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800158c:	4413      	add	r3, r2
 800158e:	460a      	mov	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
					  array_index++;
 8001592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001594:	3301      	adds	r3, #1
 8001596:	677b      	str	r3, [r7, #116]	; 0x74
 8001598:	e037      	b.n	800160a <main+0x31a>
 800159a:	bf00      	nop
 800159c:	40004400 	.word	0x40004400
 80015a0:	20000200 	.word	0x20000200
 80015a4:	200002a4 	.word	0x200002a4
 80015a8:	200002bf 	.word	0x200002bf
 80015ac:	200002a8 	.word	0x200002a8
 80015b0:	200002ac 	.word	0x200002ac
 80015b4:	200002b7 	.word	0x200002b7
 80015b8:	200002bb 	.word	0x200002bb
 80015bc:	08006608 	.word	0x08006608
 80015c0:	20000244 	.word	0x20000244
 80015c4:	20000328 	.word	0x20000328
 80015c8:	20000284 	.word	0x20000284
 80015cc:	20000204 	.word	0x20000204
 80015d0:	20000288 	.word	0x20000288
 80015d4:	20000289 	.word	0x20000289
 80015d8:	2000028d 	.word	0x2000028d
				  }
				  else
				  {
					  array[array_index] = '\0';
 80015dc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015e2:	4413      	add	r3, r2
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
					  buf_nrf_transmit[num_array_index] = atoi(array);
 80015e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fef7 	bl	80043e0 <atoi>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b2d9      	uxtb	r1, r3
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <main+0x35c>)
 80015f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015fa:	4413      	add	r3, r2
 80015fc:	460a      	mov	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
					  num_array_index++;
 8001600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001602:	3301      	adds	r3, #1
 8001604:	673b      	str	r3, [r7, #112]	; 0x70
					  array_index = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	677b      	str	r3, [r7, #116]	; 0x74
			  for (uint32_t i = 0; temp_buf[i] != '\0'; i++)
 800160a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800160c:	3301      	adds	r3, #1
 800160e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001610:	f107 021c 	add.w	r2, r7, #28
 8001614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1a7      	bne.n	800156e <main+0x27e>
				  }
			  }

			  array[array_index] = '\0';
 800161e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001624:	4413      	add	r3, r2
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
			  buf_nrf_transmit[num_array_index] = atoi(array);
 800162a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fed6 	bl	80043e0 <atoi>
 8001634:	4603      	mov	r3, r0
 8001636:	b2d9      	uxtb	r1, r3
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <main+0x35c>)
 800163a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
		  }

		  NRF24_Transmit_base(buf_nrf_transmit, 27);
 8001642:	211b      	movs	r1, #27
 8001644:	4801      	ldr	r0, [pc, #4]	; (800164c <main+0x35c>)
 8001646:	f7ff fdfb 	bl	8001240 <NRF24_Transmit_base>
	  if (NRF24_IRQ)
 800164a:	e66c      	b.n	8001326 <main+0x36>
 800164c:	20000288 	.word	0x20000288

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	; 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f002 feec 	bl	800443c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <SystemClock_Config+0xc8>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <SystemClock_Config+0xc8>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <SystemClock_Config+0xc8>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <SystemClock_Config+0xcc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <SystemClock_Config+0xcc>)
 800169a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <SystemClock_Config+0xcc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ac:	2302      	movs	r3, #2
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b4:	2310      	movs	r3, #16
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b8:	2302      	movs	r3, #2
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016bc:	2300      	movs	r3, #0
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016c0:	2308      	movs	r3, #8
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016c4:	2364      	movs	r3, #100	; 0x64
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fe07 	bl	80022e8 <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e0:	f000 f8e6 	bl	80018b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	2103      	movs	r1, #3
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f861 	bl	80027c8 <HAL_RCC_ClockConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800170c:	f000 f8d0 	bl	80018b0 <Error_Handler>
  }
}
 8001710:	bf00      	nop
 8001712:	3750      	adds	r7, #80	; 0x50
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_SPI1_Init+0x64>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_SPI1_Init+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI1_Init+0x64>)
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x64>)
 8001754:	2218      	movs	r2, #24
 8001756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x64>)
 800176c:	220a      	movs	r2, #10
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_SPI1_Init+0x64>)
 8001772:	f001 f9f5 	bl	8002b60 <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800177c:	f000 f898 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002d0 	.word	0x200002d0
 8001788:	40013000 	.word	0x40013000

0800178c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART2_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f001 ff20 	bl	8003608 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f86f 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000328 	.word	0x20000328
 80017dc:	40004400 	.word	0x40004400

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <MX_GPIO_Init+0xc0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <MX_GPIO_Init+0xc0>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <MX_GPIO_Init+0xc0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_GPIO_Init+0xc0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_GPIO_Init+0xc0>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_GPIO_Init+0xc0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_GPIO_Init+0xc0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <MX_GPIO_Init+0xc0>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_GPIO_Init+0xc0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2130      	movs	r1, #48	; 0x30
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <MX_GPIO_Init+0xc4>)
 8001850:	f000 fd0c 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001854:	2330      	movs	r3, #48	; 0x30
 8001856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4619      	mov	r1, r3
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_GPIO_Init+0xc4>)
 800186c:	f000 fb7c 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001870:	2301      	movs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_GPIO_Init+0xc8>)
 8001876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	4619      	mov	r1, r3
 8001882:	480a      	ldr	r0, [pc, #40]	; (80018ac <MX_GPIO_Init+0xcc>)
 8001884:	f000 fb70 	bl	8001f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2105      	movs	r1, #5
 800188c:	2006      	movs	r0, #6
 800188e:	f000 fb12 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001892:	2006      	movs	r0, #6
 8001894:	f000 fb2b 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	10210000 	.word	0x10210000
 80018ac:	40020400 	.word	0x40020400

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_SPI_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_SPI_MspInit+0x88>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_SPI_MspInit+0x88>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_SPI_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_SPI_MspInit+0x88>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800196a:	23e0      	movs	r3, #224	; 0xe0
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800197a:	2305      	movs	r3, #5
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_SPI_MspInit+0x8c>)
 8001986:	f000 faef 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40013000 	.word	0x40013000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_UART_MspInit+0x94>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d133      	bne.n	8001a2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fa:	230c      	movs	r3, #12
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <HAL_UART_MspInit+0x9c>)
 8001a16:	f000 faa7 	bl	8001f68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2106      	movs	r1, #6
 8001a1e:	2026      	movs	r0, #38	; 0x26
 8001a20:	f000 fa49 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a24:	2026      	movs	r0, #38	; 0x26
 8001a26:	f000 fa62 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40004400 	.word	0x40004400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 f914 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	NRF24_IRQ = 1;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <EXTI0_IRQHandler+0x14>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f000 fbfa 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000200 	.word	0x20000200

08001ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	static uint32_t index = 0;

	if ((USART2->SR & USART_SR_RXNE) != 0)
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <USART2_IRQHandler+0x68>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d026      	beq.n	8001b12 <USART2_IRQHandler+0x5e>
	{
		if (USART2->DR == '\n' || USART2->DR == '\r' || USART2->DR == '\0')
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <USART2_IRQHandler+0x68>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b0a      	cmp	r3, #10
 8001aca:	d007      	beq.n	8001adc <USART2_IRQHandler+0x28>
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <USART2_IRQHandler+0x68>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b0d      	cmp	r3, #13
 8001ad2:	d003      	beq.n	8001adc <USART2_IRQHandler+0x28>
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <USART2_IRQHandler+0x68>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <USART2_IRQHandler+0x40>
		{
			uart_receve[index] = '\0';
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <USART2_IRQHandler+0x6c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <USART2_IRQHandler+0x70>)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	54d1      	strb	r1, [r2, r3]
			index = 0;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <USART2_IRQHandler+0x6c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
			uart_flag = 1;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <USART2_IRQHandler+0x74>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	e00e      	b.n	8001b12 <USART2_IRQHandler+0x5e>
		}
		else
		{
			uart_receve[index] = USART2->DR;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <USART2_IRQHandler+0x68>)
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <USART2_IRQHandler+0x6c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b2d1      	uxtb	r1, r2
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <USART2_IRQHandler+0x70>)
 8001b00:	54d1      	strb	r1, [r2, r3]
			index++;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <USART2_IRQHandler+0x6c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <USART2_IRQHandler+0x6c>)
 8001b0a:	6013      	str	r3, [r2, #0]
			uart_flag = 0;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <USART2_IRQHandler+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
		}

	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <USART2_IRQHandler+0x78>)
 8001b14:	f001 fe5e 	bl	80037d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	200002c0 	.word	0x200002c0
 8001b24:	20000204 	.word	0x20000204
 8001b28:	20000284 	.word	0x20000284
 8001b2c:	20000328 	.word	0x20000328

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f002 fc42 	bl	80043e8 <__errno>
 8001b64:	4602      	mov	r2, r0
 8001b66:	230c      	movs	r3, #12
 8001b68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20020000 	.word	0x20020000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	200002c4 	.word	0x200002c4
 8001b98:	20000370 	.word	0x20000370

08001b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <SystemInit+0x28>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <SystemInit+0x28>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SystemInit+0x28>)
 8001bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bce:	e003      	b.n	8001bd8 <LoopCopyDataInit>

08001bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bd6:	3104      	adds	r1, #4

08001bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001be0:	d3f6      	bcc.n	8001bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001be4:	e002      	b.n	8001bec <LoopFillZerobss>

08001be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001be8:	f842 3b04 	str.w	r3, [r2], #4

08001bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bf0:	d3f9      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf2:	f7ff ffd3 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f002 fbfd 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff fb79 	bl	80012f0 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c04:	080068b8 	.word	0x080068b8
  ldr  r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c0c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001c10:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001c14:	20000370 	.word	0x20000370

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_Init+0x40>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_Init+0x40>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_Init+0x40>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 f92b 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff fe36 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f943 	bl	8001f0a <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f90b 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000010 	.word	0x20000010
 8001cbc:	2000000c 	.word	0x2000000c

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	20000368 	.word	0x20000368

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000368 	.word	0x20000368

08001d00 <__NVIC_SetPriorityGrouping>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	; (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff3e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff31 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e00c      	b.n	8001f5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2205      	movs	r2, #5
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e159      	b.n	8002238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8148 	bne.w	8002232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_GPIO_Init+0x5a>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb6:	2b11      	cmp	r3, #17
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d130      	bne.n	8002024 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0xfc>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b12      	cmp	r3, #18
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a2 	beq.w	8002232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_GPIO_Init+0x2e4>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a55      	ldr	r2, [pc, #340]	; (800224c <HAL_GPIO_Init+0x2e4>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_GPIO_Init+0x2e4>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a51      	ldr	r2, [pc, #324]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a48      	ldr	r2, [pc, #288]	; (8002254 <HAL_GPIO_Init+0x2ec>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x202>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a47      	ldr	r2, [pc, #284]	; (8002258 <HAL_GPIO_Init+0x2f0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x1fe>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a46      	ldr	r2, [pc, #280]	; (800225c <HAL_GPIO_Init+0x2f4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a45      	ldr	r2, [pc, #276]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x1f6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a44      	ldr	r2, [pc, #272]	; (8002264 <HAL_GPIO_Init+0x2fc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x1f2>
 8002156:	2304      	movs	r3, #4
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215a:	2307      	movs	r3, #7
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x204>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4934      	ldr	r1, [pc, #208]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <HAL_GPIO_Init+0x300>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ae:	4a2e      	ldr	r2, [pc, #184]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d8:	4a23      	ldr	r2, [pc, #140]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <HAL_GPIO_Init+0x300>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_GPIO_Init+0x300>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_GPIO_Init+0x300>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_GPIO_Init+0x300>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f aea2 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	3724      	adds	r7, #36	; 0x24
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40013c00 	.word	0x40013c00

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f806 	bl	80022d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e25b      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	4ba3      	ldr	r3, [pc, #652]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4ba0      	ldr	r3, [pc, #640]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e236      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a8a      	ldr	r2, [pc, #552]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b84      	ldr	r3, [pc, #528]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fca2 	bl	8001ce8 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff fc9e 	bl	8001ce8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1fb      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fc8e 	bl	8001ce8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fc8a 	bl	8001ce8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1e7      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1bb      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7ff fc43 	bl	8001ce8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7ff fc3f 	bl	8001ce8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e19c      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff fc22 	bl	8001ce8 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7ff fc1e 	bl	8001ce8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e17b      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d030      	beq.n	8002534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7ff fc02 	bl	8001ce8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7ff fbfe 	bl	8001ce8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e15b      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e015      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7ff fbeb 	bl	8001ce8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7ff fbe7 	bl	8001ce8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e144      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a0 	beq.w	8002682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7ff fbad 	bl	8001ce8 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
 80025a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7ff fba0 	bl	8001ce8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0fd      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x4d4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 80025ca:	4b7d      	ldr	r3, [pc, #500]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a7c      	ldr	r2, [pc, #496]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025e0:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a76      	ldr	r2, [pc, #472]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a73      	ldr	r2, [pc, #460]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025fa:	4b71      	ldr	r3, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a70      	ldr	r2, [pc, #448]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a6d      	ldr	r2, [pc, #436]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7ff fb65 	bl	8001ce8 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff fb61 	bl	8001ce8 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0bc      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ee      	beq.n	8002622 <HAL_RCC_OscConfig+0x33a>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff fb4f 	bl	8001ce8 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7ff fb4b 	bl	8001ce8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0a6      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b52      	ldr	r3, [pc, #328]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8092 	beq.w	80027b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268c:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d05c      	beq.n	8002752 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d141      	bne.n	8002724 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <HAL_RCC_OscConfig+0x4dc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7ff fb1f 	bl	8001ce8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff fb1b 	bl	8001ce8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e078      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	019b      	lsls	r3, r3, #6
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	061b      	lsls	r3, r3, #24
 80026f0:	4933      	ldr	r1, [pc, #204]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff faf4 	bl	8001ce8 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7ff faf0 	bl	8001ce8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e04d      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x41c>
 8002722:	e045      	b.n	80027b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x4dc>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff fadd 	bl	8001ce8 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff fad9 	bl	8001ce8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e036      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x44a>
 8002750:	e02e      	b.n	80027b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e029      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_RCC_OscConfig+0x4d8>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	429a      	cmp	r2, r3
 8002770:	d11c      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d115      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800278c:	4293      	cmp	r3, r2
 800278e:	d10d      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d106      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40007000 	.word	0x40007000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	42470060 	.word	0x42470060

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0cc      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d90c      	bls.n	8002804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d044      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d119      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d003      	beq.n	8002886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e067      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4934      	ldr	r1, [pc, #208]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff fa16 	bl	8001ce8 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff fa12 	bl	8001ce8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d20c      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4601      	mov	r1, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	fa21 f303 	lsr.w	r3, r1, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f976 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	08006630 	.word	0x08006630
 800298c:	20000008 	.word	0x20000008
 8002990:	2000000c 	.word	0x2000000c

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029aa:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_GetSysClockFreq+0x158>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d007      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x32>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d008      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x38>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 808d 	bne.w	8002ada <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80029c2:	60bb      	str	r3, [r7, #8]
       break;
 80029c4:	e08c      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c6:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029c8:	60bb      	str	r3, [r7, #8]
      break;
 80029ca:	e089      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029cc:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_GetSysClockFreq+0x158>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d6:	4b45      	ldr	r3, [pc, #276]	; (8002aec <HAL_RCC_GetSysClockFreq+0x158>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d023      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e2:	4b42      	ldr	r3, [pc, #264]	; (8002aec <HAL_RCC_GetSysClockFreq+0x158>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	ea03 0501 	and.w	r5, r3, r1
 80029f8:	ea04 0602 	and.w	r6, r4, r2
 80029fc:	4a3d      	ldr	r2, [pc, #244]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029fe:	fb02 f106 	mul.w	r1, r2, r6
 8002a02:	2200      	movs	r2, #0
 8002a04:	fb02 f205 	mul.w	r2, r2, r5
 8002a08:	440a      	add	r2, r1
 8002a0a:	493a      	ldr	r1, [pc, #232]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a0c:	fba5 0101 	umull	r0, r1, r5, r1
 8002a10:	1853      	adds	r3, r2, r1
 8002a12:	4619      	mov	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	f7fe f8cb 	bl	8000bb8 <__aeabi_uldivmod>
 8002a22:	4603      	mov	r3, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e049      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_RCC_GetSysClockFreq+0x158>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	099b      	lsrs	r3, r3, #6
 8002a30:	f04f 0400 	mov.w	r4, #0
 8002a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	ea03 0501 	and.w	r5, r3, r1
 8002a40:	ea04 0602 	and.w	r6, r4, r2
 8002a44:	4629      	mov	r1, r5
 8002a46:	4632      	mov	r2, r6
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f04f 0400 	mov.w	r4, #0
 8002a50:	0154      	lsls	r4, r2, #5
 8002a52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a56:	014b      	lsls	r3, r1, #5
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4622      	mov	r2, r4
 8002a5c:	1b49      	subs	r1, r1, r5
 8002a5e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	0194      	lsls	r4, r2, #6
 8002a6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a70:	018b      	lsls	r3, r1, #6
 8002a72:	1a5b      	subs	r3, r3, r1
 8002a74:	eb64 0402 	sbc.w	r4, r4, r2
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	00e2      	lsls	r2, r4, #3
 8002a82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a86:	00d9      	lsls	r1, r3, #3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	195b      	adds	r3, r3, r5
 8002a8e:	eb44 0406 	adc.w	r4, r4, r6
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	02a2      	lsls	r2, r4, #10
 8002a9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002aa0:	0299      	lsls	r1, r3, #10
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f04f 0400 	mov.w	r4, #0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4623      	mov	r3, r4
 8002ab4:	f7fe f880 	bl	8000bb8 <__aeabi_uldivmod>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	460c      	mov	r4, r1
 8002abc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_GetSysClockFreq+0x158>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	60bb      	str	r3, [r7, #8]
      break;
 8002ad8:	e002      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002adc:	60bb      	str	r3, [r7, #8]
      break;
 8002ade:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	017d7840 	.word	0x017d7840

08002af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000008 	.word	0x20000008

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b18:	4601      	mov	r1, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0a9b      	lsrs	r3, r3, #10
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4a03      	ldr	r2, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	08006640 	.word	0x08006640

08002b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b3c:	f7ff ffdc 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b40:	4601      	mov	r1, r0
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0b5b      	lsrs	r3, r3, #13
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4a03      	ldr	r2, [pc, #12]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	08006640 	.word	0x08006640

08002b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e056      	b.n	8002c20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fe febf 	bl	8001910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 0104 	and.w	r1, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_SPI_Transmit+0x22>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e11e      	b.n	8002e88 <HAL_SPI_Transmit+0x260>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c52:	f7ff f849 	bl	8001ce8 <HAL_GetTick>
 8002c56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d002      	beq.n	8002c6e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6c:	e103      	b.n	8002e76 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_SPI_Transmit+0x52>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c7e:	e0fa      	b.n	8002e76 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2203      	movs	r2, #3
 8002c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc6:	d107      	bne.n	8002cd8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d007      	beq.n	8002cf6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cfe:	d14b      	bne.n	8002d98 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_SPI_Transmit+0xe6>
 8002d08:	8afb      	ldrh	r3, [r7, #22]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d13e      	bne.n	8002d8c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	1c9a      	adds	r2, r3, #2
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d32:	e02b      	b.n	8002d8c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d112      	bne.n	8002d68 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	1c9a      	adds	r2, r3, #2
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d66:	e011      	b.n	8002d8c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d68:	f7fe ffbe 	bl	8001ce8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d803      	bhi.n	8002d80 <HAL_SPI_Transmit+0x158>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d102      	bne.n	8002d86 <HAL_SPI_Transmit+0x15e>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d8a:	e074      	b.n	8002e76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ce      	bne.n	8002d34 <HAL_SPI_Transmit+0x10c>
 8002d96:	e04c      	b.n	8002e32 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_SPI_Transmit+0x17e>
 8002da0:	8afb      	ldrh	r3, [r7, #22]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d140      	bne.n	8002e28 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dcc:	e02c      	b.n	8002e28 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d113      	bne.n	8002e04 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e02:	e011      	b.n	8002e28 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e04:	f7fe ff70 	bl	8001ce8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d803      	bhi.n	8002e1c <HAL_SPI_Transmit+0x1f4>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d102      	bne.n	8002e22 <HAL_SPI_Transmit+0x1fa>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e26:	e026      	b.n	8002e76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1cd      	bne.n	8002dce <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	6839      	ldr	r1, [r7, #0]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fba4 	bl	8003584 <SPI_EndRxTxTransaction>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	e000      	b.n	8002e76 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eac:	d112      	bne.n	8002ed4 <HAL_SPI_Receive+0x44>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8e9 	bl	80030a2 <HAL_SPI_TransmitReceive>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	e0e2      	b.n	800309a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_SPI_Receive+0x52>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0db      	b.n	800309a <HAL_SPI_Receive+0x20a>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eea:	f7fe fefd 	bl	8001ce8 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f00:	e0c2      	b.n	8003088 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_SPI_Receive+0x7e>
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f12:	e0b9      	b.n	8003088 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2204      	movs	r2, #4
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5a:	d107      	bne.n	8002f6c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d007      	beq.n	8002f8a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d162      	bne.n	8003058 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f92:	e02e      	b.n	8002ff2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d115      	bne.n	8002fce <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f103 020c 	add.w	r2, r3, #12
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fcc:	e011      	b.n	8002ff2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fce:	f7fe fe8b 	bl	8001ce8 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d803      	bhi.n	8002fe6 <HAL_SPI_Receive+0x156>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d102      	bne.n	8002fec <HAL_SPI_Receive+0x15c>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ff0:	e04a      	b.n	8003088 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1cb      	bne.n	8002f94 <HAL_SPI_Receive+0x104>
 8002ffc:	e031      	b.n	8003062 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d113      	bne.n	8003034 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	b292      	uxth	r2, r2
 8003018:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	1c9a      	adds	r2, r3, #2
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003032:	e011      	b.n	8003058 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003034:	f7fe fe58 	bl	8001ce8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d803      	bhi.n	800304c <HAL_SPI_Receive+0x1bc>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d102      	bne.n	8003052 <HAL_SPI_Receive+0x1c2>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003056:	e017      	b.n	8003088 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1cd      	bne.n	8002ffe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fa27 	bl	80034ba <SPI_EndRxTransaction>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
 8003084:	e000      	b.n	8003088 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003086:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b08c      	sub	sp, #48	; 0x30
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030b0:	2301      	movs	r3, #1
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x26>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e18a      	b.n	80033de <HAL_SPI_TransmitReceive+0x33c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030d0:	f7fe fe0a 	bl	8001ce8 <HAL_GetTick>
 80030d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d00f      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x70>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f8:	d107      	bne.n	800310a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_SPI_TransmitReceive+0x68>
 8003102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003106:	2b04      	cmp	r3, #4
 8003108:	d003      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003110:	e15b      	b.n	80033ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x82>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x82>
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800312a:	e14e      	b.n	80033ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b04      	cmp	r3, #4
 8003136:	d003      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2205      	movs	r2, #5
 800313c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	887a      	ldrh	r2, [r7, #2]
 8003156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d007      	beq.n	8003194 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319c:	d178      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x10a>
 80031a6:	8b7b      	ldrh	r3, [r7, #26]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d166      	bne.n	800327a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d0:	e053      	b.n	800327a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d11b      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x176>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x176>
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d113      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d119      	bne.n	800325a <HAL_SPI_TransmitReceive+0x1b8>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	b292      	uxth	r2, r2
 800323c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003256:	2301      	movs	r3, #1
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800325a:	f7fe fd45 	bl	8001ce8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003266:	429a      	cmp	r2, r3
 8003268:	d807      	bhi.n	800327a <HAL_SPI_TransmitReceive+0x1d8>
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d003      	beq.n	800327a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003278:	e0a7      	b.n	80033ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1a6      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x130>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1a1      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x130>
 800328e:	e07c      	b.n	800338a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_SPI_TransmitReceive+0x1fc>
 8003298:	8b7b      	ldrh	r3, [r7, #26]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d16b      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c4:	e057      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d11c      	bne.n	800330e <HAL_SPI_TransmitReceive+0x26c>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d017      	beq.n	800330e <HAL_SPI_TransmitReceive+0x26c>
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d114      	bne.n	800330e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d119      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x2ae>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d014      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800334c:	2301      	movs	r3, #1
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003350:	f7fe fcca 	bl	8001ce8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335c:	429a      	cmp	r2, r3
 800335e:	d803      	bhi.n	8003368 <HAL_SPI_TransmitReceive+0x2c6>
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d102      	bne.n	800336e <HAL_SPI_TransmitReceive+0x2cc>
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003374:	e029      	b.n	80033ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1a2      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x224>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d19d      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800338a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8f8 	bl	8003584 <SPI_EndRxTxTransaction>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033a6:	e010      	b.n	80033ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	e000      	b.n	80033ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3730      	adds	r7, #48	; 0x30
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033f6:	e04c      	b.n	8003492 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d048      	beq.n	8003492 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003400:	f7fe fc72 	bl	8001ce8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d902      	bls.n	8003416 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d13d      	bne.n	8003492 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342e:	d111      	bne.n	8003454 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003438:	d004      	beq.n	8003444 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d107      	bne.n	8003454 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345c:	d10f      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e00f      	b.n	80034b2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4013      	ands	r3, r2
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1a3      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af02      	add	r7, sp, #8
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ce:	d111      	bne.n	80034f4 <SPI_EndRxTransaction+0x3a>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d8:	d004      	beq.n	80034e4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d107      	bne.n	80034f4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fc:	d12a      	bne.n	8003554 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d012      	beq.n	800352e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff ff67 	bl	80033e6 <SPI_WaitFlagStateUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02d      	beq.n	800357a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e026      	b.n	800357c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2200      	movs	r2, #0
 8003536:	2101      	movs	r1, #1
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff ff54 	bl	80033e6 <SPI_WaitFlagStateUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01a      	beq.n	800357a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e013      	b.n	800357c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	2101      	movs	r1, #1
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff ff41 	bl	80033e6 <SPI_WaitFlagStateUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e000      	b.n	800357c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <SPI_EndRxTxTransaction+0x7c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <SPI_EndRxTxTransaction+0x80>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0d5b      	lsrs	r3, r3, #21
 800359c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ae:	d112      	bne.n	80035d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff ff13 	bl	80033e6 <SPI_WaitFlagStateUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e00f      	b.n	80035f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3b01      	subs	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d0f2      	beq.n	80035d6 <SPI_EndRxTxTransaction+0x52>
 80035f0:	e000      	b.n	80035f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80035f2:	bf00      	nop
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000008 	.word	0x20000008
 8003604:	165e9f81 	.word	0x165e9f81

08003608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03f      	b.n	800369a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f9b6 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb4b 	bl	8003ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b088      	sub	sp, #32
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b20      	cmp	r3, #32
 80036c0:	f040 8083 	bne.w	80037ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Transmit+0x2e>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e07b      	b.n	80037cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Transmit+0x40>
 80036de:	2302      	movs	r3, #2
 80036e0:	e074      	b.n	80037cc <HAL_UART_Transmit+0x12a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2221      	movs	r2, #33	; 0x21
 80036f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036f8:	f7fe faf6 	bl	8001ce8 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003712:	e042      	b.n	800379a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d122      	bne.n	8003772 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2200      	movs	r2, #0
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f96a 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e042      	b.n	80037cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003758:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3302      	adds	r3, #2
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	e017      	b.n	800379a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3301      	adds	r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	e013      	b.n	800379a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2200      	movs	r2, #0
 800377a:	2180      	movs	r1, #128	; 0x80
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f947 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e01f      	b.n	80037cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	60ba      	str	r2, [r7, #8]
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1b7      	bne.n	8003714 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f92e 	bl	8003a10 <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e006      	b.n	80037cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_UART_IRQHandler+0x52>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9e0 	bl	8003be4 <UART_Receive_IT>
      return;
 8003824:	e0d1      	b.n	80039ca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80b0 	beq.w	800398e <HAL_UART_IRQHandler+0x1ba>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_UART_IRQHandler+0x70>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80a5 	beq.w	800398e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_UART_IRQHandler+0x90>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_UART_IRQHandler+0xb0>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	f043 0202 	orr.w	r2, r3, #2
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_UART_IRQHandler+0xd0>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	f043 0204 	orr.w	r2, r3, #4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00f      	beq.n	80038ce <HAL_UART_IRQHandler+0xfa>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_UART_IRQHandler+0xee>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	f043 0208 	orr.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d078      	beq.n	80039c8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_UART_IRQHandler+0x11c>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f97a 	bl	8003be4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_UART_IRQHandler+0x144>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d031      	beq.n	800397c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8c3 	bl	8003aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d123      	bne.n	8003974 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <HAL_UART_IRQHandler+0x1fc>)
 800394a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fae6 	bl	8001f22 <HAL_DMA_Abort_IT>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003966:	4610      	mov	r0, r2
 8003968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396a:	e00e      	b.n	800398a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f845 	bl	80039fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003972:	e00a      	b.n	800398a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f841 	bl	80039fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397a:	e006      	b.n	800398a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f83d 	bl	80039fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003988:	e01e      	b.n	80039c8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398a:	bf00      	nop
    return;
 800398c:	e01c      	b.n	80039c8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_UART_IRQHandler+0x1d6>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8b0 	bl	8003b08 <UART_Transmit_IT>
    return;
 80039a8:	e00f      	b.n	80039ca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_UART_IRQHandler+0x1f6>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8f8 	bl	8003bb4 <UART_EndTransmit_IT>
    return;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_UART_IRQHandler+0x1f6>
    return;
 80039c8:	bf00      	nop
  }
}
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	08003ae1 	.word	0x08003ae1

080039d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a20:	e02c      	b.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d028      	beq.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a30:	f7fe f95a 	bl	8001ce8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d21d      	bcs.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e00f      	b.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4013      	ands	r3, r2
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d0c3      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003aba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff ff7e 	bl	80039fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b21      	cmp	r3, #33	; 0x21
 8003b1a:	d144      	bne.n	8003ba6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b24:	d11a      	bne.n	8003b5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	621a      	str	r2, [r3, #32]
 8003b4e:	e00e      	b.n	8003b6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]
 8003b5a:	e008      	b.n	8003b6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	1c59      	adds	r1, r3, #1
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6211      	str	r1, [r2, #32]
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fefd 	bl	80039d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b22      	cmp	r3, #34	; 0x22
 8003bf6:	d171      	bne.n	8003cdc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	d123      	bne.n	8003c4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10e      	bne.n	8003c2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	1c9a      	adds	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c2c:	e029      	b.n	8003c82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
 8003c48:	e01b      	b.n	8003c82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6858      	ldr	r0, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	1c59      	adds	r1, r3, #1
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6291      	str	r1, [r2, #40]	; 0x28
 8003c62:	b2c2      	uxtb	r2, r0
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e00c      	b.n	8003c82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	1c58      	adds	r0, r3, #1
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	6288      	str	r0, [r1, #40]	; 0x28
 8003c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d120      	bne.n	8003cd8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0220 	bic.w	r2, r2, #32
 8003ca4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fe8a 	bl	80039e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e002      	b.n	8003cde <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d2a:	f023 030c 	bic.w	r3, r3, #12
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d56:	f040 818b 	bne.w	8004070 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4ac1      	ldr	r2, [pc, #772]	; (8004064 <UART_SetConfig+0x37c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d005      	beq.n	8003d70 <UART_SetConfig+0x88>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4abf      	ldr	r2, [pc, #764]	; (8004068 <UART_SetConfig+0x380>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	f040 80bd 	bne.w	8003eea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7fe fee2 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 8003d74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	461d      	mov	r5, r3
 8003d7a:	f04f 0600 	mov.w	r6, #0
 8003d7e:	46a8      	mov	r8, r5
 8003d80:	46b1      	mov	r9, r6
 8003d82:	eb18 0308 	adds.w	r3, r8, r8
 8003d86:	eb49 0409 	adc.w	r4, r9, r9
 8003d8a:	4698      	mov	r8, r3
 8003d8c:	46a1      	mov	r9, r4
 8003d8e:	eb18 0805 	adds.w	r8, r8, r5
 8003d92:	eb49 0906 	adc.w	r9, r9, r6
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003da2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003da6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003daa:	4688      	mov	r8, r1
 8003dac:	4691      	mov	r9, r2
 8003dae:	eb18 0005 	adds.w	r0, r8, r5
 8003db2:	eb49 0106 	adc.w	r1, r9, r6
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	461d      	mov	r5, r3
 8003dbc:	f04f 0600 	mov.w	r6, #0
 8003dc0:	196b      	adds	r3, r5, r5
 8003dc2:	eb46 0406 	adc.w	r4, r6, r6
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	f7fc fef5 	bl	8000bb8 <__aeabi_uldivmod>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4ba5      	ldr	r3, [pc, #660]	; (800406c <UART_SetConfig+0x384>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	461d      	mov	r5, r3
 8003de4:	f04f 0600 	mov.w	r6, #0
 8003de8:	46a9      	mov	r9, r5
 8003dea:	46b2      	mov	sl, r6
 8003dec:	eb19 0309 	adds.w	r3, r9, r9
 8003df0:	eb4a 040a 	adc.w	r4, sl, sl
 8003df4:	4699      	mov	r9, r3
 8003df6:	46a2      	mov	sl, r4
 8003df8:	eb19 0905 	adds.w	r9, r9, r5
 8003dfc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e14:	4689      	mov	r9, r1
 8003e16:	4692      	mov	sl, r2
 8003e18:	eb19 0005 	adds.w	r0, r9, r5
 8003e1c:	eb4a 0106 	adc.w	r1, sl, r6
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	461d      	mov	r5, r3
 8003e26:	f04f 0600 	mov.w	r6, #0
 8003e2a:	196b      	adds	r3, r5, r5
 8003e2c:	eb46 0406 	adc.w	r4, r6, r6
 8003e30:	461a      	mov	r2, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	f7fc fec0 	bl	8000bb8 <__aeabi_uldivmod>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b8b      	ldr	r3, [pc, #556]	; (800406c <UART_SetConfig+0x384>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	; 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3332      	adds	r3, #50	; 0x32
 8003e52:	4a86      	ldr	r2, [pc, #536]	; (800406c <UART_SetConfig+0x384>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e60:	4498      	add	r8, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	461d      	mov	r5, r3
 8003e66:	f04f 0600 	mov.w	r6, #0
 8003e6a:	46a9      	mov	r9, r5
 8003e6c:	46b2      	mov	sl, r6
 8003e6e:	eb19 0309 	adds.w	r3, r9, r9
 8003e72:	eb4a 040a 	adc.w	r4, sl, sl
 8003e76:	4699      	mov	r9, r3
 8003e78:	46a2      	mov	sl, r4
 8003e7a:	eb19 0905 	adds.w	r9, r9, r5
 8003e7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e96:	4689      	mov	r9, r1
 8003e98:	4692      	mov	sl, r2
 8003e9a:	eb19 0005 	adds.w	r0, r9, r5
 8003e9e:	eb4a 0106 	adc.w	r1, sl, r6
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	461d      	mov	r5, r3
 8003ea8:	f04f 0600 	mov.w	r6, #0
 8003eac:	196b      	adds	r3, r5, r5
 8003eae:	eb46 0406 	adc.w	r4, r6, r6
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	f7fc fe7f 	bl	8000bb8 <__aeabi_uldivmod>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b6a      	ldr	r3, [pc, #424]	; (800406c <UART_SetConfig+0x384>)
 8003ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2164      	movs	r1, #100	; 0x64
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	4a65      	ldr	r2, [pc, #404]	; (800406c <UART_SetConfig+0x384>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f003 0207 	and.w	r2, r3, #7
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4442      	add	r2, r8
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	e26f      	b.n	80043ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eea:	f7fe fe11 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8003eee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	f04f 0600 	mov.w	r6, #0
 8003ef8:	46a8      	mov	r8, r5
 8003efa:	46b1      	mov	r9, r6
 8003efc:	eb18 0308 	adds.w	r3, r8, r8
 8003f00:	eb49 0409 	adc.w	r4, r9, r9
 8003f04:	4698      	mov	r8, r3
 8003f06:	46a1      	mov	r9, r4
 8003f08:	eb18 0805 	adds.w	r8, r8, r5
 8003f0c:	eb49 0906 	adc.w	r9, r9, r6
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f24:	4688      	mov	r8, r1
 8003f26:	4691      	mov	r9, r2
 8003f28:	eb18 0005 	adds.w	r0, r8, r5
 8003f2c:	eb49 0106 	adc.w	r1, r9, r6
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	461d      	mov	r5, r3
 8003f36:	f04f 0600 	mov.w	r6, #0
 8003f3a:	196b      	adds	r3, r5, r5
 8003f3c:	eb46 0406 	adc.w	r4, r6, r6
 8003f40:	461a      	mov	r2, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	f7fc fe38 	bl	8000bb8 <__aeabi_uldivmod>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <UART_SetConfig+0x384>)
 8003f50:	fba3 2302 	umull	r2, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	461d      	mov	r5, r3
 8003f5e:	f04f 0600 	mov.w	r6, #0
 8003f62:	46a9      	mov	r9, r5
 8003f64:	46b2      	mov	sl, r6
 8003f66:	eb19 0309 	adds.w	r3, r9, r9
 8003f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f6e:	4699      	mov	r9, r3
 8003f70:	46a2      	mov	sl, r4
 8003f72:	eb19 0905 	adds.w	r9, r9, r5
 8003f76:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f8e:	4689      	mov	r9, r1
 8003f90:	4692      	mov	sl, r2
 8003f92:	eb19 0005 	adds.w	r0, r9, r5
 8003f96:	eb4a 0106 	adc.w	r1, sl, r6
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	f04f 0600 	mov.w	r6, #0
 8003fa4:	196b      	adds	r3, r5, r5
 8003fa6:	eb46 0406 	adc.w	r4, r6, r6
 8003faa:	461a      	mov	r2, r3
 8003fac:	4623      	mov	r3, r4
 8003fae:	f7fc fe03 	bl	8000bb8 <__aeabi_uldivmod>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <UART_SetConfig+0x384>)
 8003fba:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2164      	movs	r1, #100	; 0x64
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <UART_SetConfig+0x384>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fda:	4498      	add	r8, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	461d      	mov	r5, r3
 8003fe0:	f04f 0600 	mov.w	r6, #0
 8003fe4:	46a9      	mov	r9, r5
 8003fe6:	46b2      	mov	sl, r6
 8003fe8:	eb19 0309 	adds.w	r3, r9, r9
 8003fec:	eb4a 040a 	adc.w	r4, sl, sl
 8003ff0:	4699      	mov	r9, r3
 8003ff2:	46a2      	mov	sl, r4
 8003ff4:	eb19 0905 	adds.w	r9, r9, r5
 8003ff8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004008:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800400c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004010:	4689      	mov	r9, r1
 8004012:	4692      	mov	sl, r2
 8004014:	eb19 0005 	adds.w	r0, r9, r5
 8004018:	eb4a 0106 	adc.w	r1, sl, r6
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	461d      	mov	r5, r3
 8004022:	f04f 0600 	mov.w	r6, #0
 8004026:	196b      	adds	r3, r5, r5
 8004028:	eb46 0406 	adc.w	r4, r6, r6
 800402c:	461a      	mov	r2, r3
 800402e:	4623      	mov	r3, r4
 8004030:	f7fc fdc2 	bl	8000bb8 <__aeabi_uldivmod>
 8004034:	4603      	mov	r3, r0
 8004036:	460c      	mov	r4, r1
 8004038:	461a      	mov	r2, r3
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <UART_SetConfig+0x384>)
 800403c:	fba3 1302 	umull	r1, r3, r3, r2
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2164      	movs	r1, #100	; 0x64
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	3332      	adds	r3, #50	; 0x32
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <UART_SetConfig+0x384>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	f003 0207 	and.w	r2, r3, #7
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4442      	add	r2, r8
 8004060:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004062:	e1b2      	b.n	80043ca <UART_SetConfig+0x6e2>
 8004064:	40011000 	.word	0x40011000
 8004068:	40011400 	.word	0x40011400
 800406c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4ad7      	ldr	r2, [pc, #860]	; (80043d4 <UART_SetConfig+0x6ec>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d005      	beq.n	8004086 <UART_SetConfig+0x39e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4ad6      	ldr	r2, [pc, #856]	; (80043d8 <UART_SetConfig+0x6f0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	f040 80d1 	bne.w	8004228 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004086:	f7fe fd57 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 800408a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	469a      	mov	sl, r3
 8004090:	f04f 0b00 	mov.w	fp, #0
 8004094:	46d0      	mov	r8, sl
 8004096:	46d9      	mov	r9, fp
 8004098:	eb18 0308 	adds.w	r3, r8, r8
 800409c:	eb49 0409 	adc.w	r4, r9, r9
 80040a0:	4698      	mov	r8, r3
 80040a2:	46a1      	mov	r9, r4
 80040a4:	eb18 080a 	adds.w	r8, r8, sl
 80040a8:	eb49 090b 	adc.w	r9, r9, fp
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040c0:	4688      	mov	r8, r1
 80040c2:	4691      	mov	r9, r2
 80040c4:	eb1a 0508 	adds.w	r5, sl, r8
 80040c8:	eb4b 0609 	adc.w	r6, fp, r9
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4619      	mov	r1, r3
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	f04f 0400 	mov.w	r4, #0
 80040de:	0094      	lsls	r4, r2, #2
 80040e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040e4:	008b      	lsls	r3, r1, #2
 80040e6:	461a      	mov	r2, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	4628      	mov	r0, r5
 80040ec:	4631      	mov	r1, r6
 80040ee:	f7fc fd63 	bl	8000bb8 <__aeabi_uldivmod>
 80040f2:	4603      	mov	r3, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	461a      	mov	r2, r3
 80040f8:	4bb8      	ldr	r3, [pc, #736]	; (80043dc <UART_SetConfig+0x6f4>)
 80040fa:	fba3 2302 	umull	r2, r3, r3, r2
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	469b      	mov	fp, r3
 8004108:	f04f 0c00 	mov.w	ip, #0
 800410c:	46d9      	mov	r9, fp
 800410e:	46e2      	mov	sl, ip
 8004110:	eb19 0309 	adds.w	r3, r9, r9
 8004114:	eb4a 040a 	adc.w	r4, sl, sl
 8004118:	4699      	mov	r9, r3
 800411a:	46a2      	mov	sl, r4
 800411c:	eb19 090b 	adds.w	r9, r9, fp
 8004120:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004130:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004134:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004138:	4689      	mov	r9, r1
 800413a:	4692      	mov	sl, r2
 800413c:	eb1b 0509 	adds.w	r5, fp, r9
 8004140:	eb4c 060a 	adc.w	r6, ip, sl
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	f04f 0400 	mov.w	r4, #0
 8004156:	0094      	lsls	r4, r2, #2
 8004158:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800415c:	008b      	lsls	r3, r1, #2
 800415e:	461a      	mov	r2, r3
 8004160:	4623      	mov	r3, r4
 8004162:	4628      	mov	r0, r5
 8004164:	4631      	mov	r1, r6
 8004166:	f7fc fd27 	bl	8000bb8 <__aeabi_uldivmod>
 800416a:	4603      	mov	r3, r0
 800416c:	460c      	mov	r4, r1
 800416e:	461a      	mov	r2, r3
 8004170:	4b9a      	ldr	r3, [pc, #616]	; (80043dc <UART_SetConfig+0x6f4>)
 8004172:	fba3 1302 	umull	r1, r3, r3, r2
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2164      	movs	r1, #100	; 0x64
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	3332      	adds	r3, #50	; 0x32
 8004184:	4a95      	ldr	r2, [pc, #596]	; (80043dc <UART_SetConfig+0x6f4>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004190:	4498      	add	r8, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	469b      	mov	fp, r3
 8004196:	f04f 0c00 	mov.w	ip, #0
 800419a:	46d9      	mov	r9, fp
 800419c:	46e2      	mov	sl, ip
 800419e:	eb19 0309 	adds.w	r3, r9, r9
 80041a2:	eb4a 040a 	adc.w	r4, sl, sl
 80041a6:	4699      	mov	r9, r3
 80041a8:	46a2      	mov	sl, r4
 80041aa:	eb19 090b 	adds.w	r9, r9, fp
 80041ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c6:	4689      	mov	r9, r1
 80041c8:	4692      	mov	sl, r2
 80041ca:	eb1b 0509 	adds.w	r5, fp, r9
 80041ce:	eb4c 060a 	adc.w	r6, ip, sl
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4619      	mov	r1, r3
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	f04f 0400 	mov.w	r4, #0
 80041e4:	0094      	lsls	r4, r2, #2
 80041e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ea:	008b      	lsls	r3, r1, #2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	4631      	mov	r1, r6
 80041f4:	f7fc fce0 	bl	8000bb8 <__aeabi_uldivmod>
 80041f8:	4603      	mov	r3, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b77      	ldr	r3, [pc, #476]	; (80043dc <UART_SetConfig+0x6f4>)
 8004200:	fba3 1302 	umull	r1, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	2164      	movs	r1, #100	; 0x64
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	3332      	adds	r3, #50	; 0x32
 8004212:	4a72      	ldr	r2, [pc, #456]	; (80043dc <UART_SetConfig+0x6f4>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f003 020f 	and.w	r2, r3, #15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4442      	add	r2, r8
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	e0d0      	b.n	80043ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe fc72 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 800422c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	469a      	mov	sl, r3
 8004232:	f04f 0b00 	mov.w	fp, #0
 8004236:	46d0      	mov	r8, sl
 8004238:	46d9      	mov	r9, fp
 800423a:	eb18 0308 	adds.w	r3, r8, r8
 800423e:	eb49 0409 	adc.w	r4, r9, r9
 8004242:	4698      	mov	r8, r3
 8004244:	46a1      	mov	r9, r4
 8004246:	eb18 080a 	adds.w	r8, r8, sl
 800424a:	eb49 090b 	adc.w	r9, r9, fp
 800424e:	f04f 0100 	mov.w	r1, #0
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800425a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800425e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004262:	4688      	mov	r8, r1
 8004264:	4691      	mov	r9, r2
 8004266:	eb1a 0508 	adds.w	r5, sl, r8
 800426a:	eb4b 0609 	adc.w	r6, fp, r9
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4619      	mov	r1, r3
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	0094      	lsls	r4, r2, #2
 8004282:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004286:	008b      	lsls	r3, r1, #2
 8004288:	461a      	mov	r2, r3
 800428a:	4623      	mov	r3, r4
 800428c:	4628      	mov	r0, r5
 800428e:	4631      	mov	r1, r6
 8004290:	f7fc fc92 	bl	8000bb8 <__aeabi_uldivmod>
 8004294:	4603      	mov	r3, r0
 8004296:	460c      	mov	r4, r1
 8004298:	461a      	mov	r2, r3
 800429a:	4b50      	ldr	r3, [pc, #320]	; (80043dc <UART_SetConfig+0x6f4>)
 800429c:	fba3 2302 	umull	r2, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	469b      	mov	fp, r3
 80042aa:	f04f 0c00 	mov.w	ip, #0
 80042ae:	46d9      	mov	r9, fp
 80042b0:	46e2      	mov	sl, ip
 80042b2:	eb19 0309 	adds.w	r3, r9, r9
 80042b6:	eb4a 040a 	adc.w	r4, sl, sl
 80042ba:	4699      	mov	r9, r3
 80042bc:	46a2      	mov	sl, r4
 80042be:	eb19 090b 	adds.w	r9, r9, fp
 80042c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042da:	4689      	mov	r9, r1
 80042dc:	4692      	mov	sl, r2
 80042de:	eb1b 0509 	adds.w	r5, fp, r9
 80042e2:	eb4c 060a 	adc.w	r6, ip, sl
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4619      	mov	r1, r3
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	f04f 0400 	mov.w	r4, #0
 80042f8:	0094      	lsls	r4, r2, #2
 80042fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042fe:	008b      	lsls	r3, r1, #2
 8004300:	461a      	mov	r2, r3
 8004302:	4623      	mov	r3, r4
 8004304:	4628      	mov	r0, r5
 8004306:	4631      	mov	r1, r6
 8004308:	f7fc fc56 	bl	8000bb8 <__aeabi_uldivmod>
 800430c:	4603      	mov	r3, r0
 800430e:	460c      	mov	r4, r1
 8004310:	461a      	mov	r2, r3
 8004312:	4b32      	ldr	r3, [pc, #200]	; (80043dc <UART_SetConfig+0x6f4>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	; 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <UART_SetConfig+0x6f4>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004332:	4498      	add	r8, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	469b      	mov	fp, r3
 8004338:	f04f 0c00 	mov.w	ip, #0
 800433c:	46d9      	mov	r9, fp
 800433e:	46e2      	mov	sl, ip
 8004340:	eb19 0309 	adds.w	r3, r9, r9
 8004344:	eb4a 040a 	adc.w	r4, sl, sl
 8004348:	4699      	mov	r9, r3
 800434a:	46a2      	mov	sl, r4
 800434c:	eb19 090b 	adds.w	r9, r9, fp
 8004350:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004360:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004364:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004368:	4689      	mov	r9, r1
 800436a:	4692      	mov	sl, r2
 800436c:	eb1b 0509 	adds.w	r5, fp, r9
 8004370:	eb4c 060a 	adc.w	r6, ip, sl
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4619      	mov	r1, r3
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	f04f 0400 	mov.w	r4, #0
 8004386:	0094      	lsls	r4, r2, #2
 8004388:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800438c:	008b      	lsls	r3, r1, #2
 800438e:	461a      	mov	r2, r3
 8004390:	4623      	mov	r3, r4
 8004392:	4628      	mov	r0, r5
 8004394:	4631      	mov	r1, r6
 8004396:	f7fc fc0f 	bl	8000bb8 <__aeabi_uldivmod>
 800439a:	4603      	mov	r3, r0
 800439c:	460c      	mov	r4, r1
 800439e:	461a      	mov	r2, r3
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <UART_SetConfig+0x6f4>)
 80043a2:	fba3 1302 	umull	r1, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2164      	movs	r1, #100	; 0x64
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	3332      	adds	r3, #50	; 0x32
 80043b4:	4a09      	ldr	r2, [pc, #36]	; (80043dc <UART_SetConfig+0x6f4>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	f003 020f 	and.w	r2, r3, #15
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4442      	add	r2, r8
 80043c6:	609a      	str	r2, [r3, #8]
}
 80043c8:	e7ff      	b.n	80043ca <UART_SetConfig+0x6e2>
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d4:	40011000 	.word	0x40011000
 80043d8:	40011400 	.word	0x40011400
 80043dc:	51eb851f 	.word	0x51eb851f

080043e0 <atoi>:
 80043e0:	220a      	movs	r2, #10
 80043e2:	2100      	movs	r1, #0
 80043e4:	f000 bd2a 	b.w	8004e3c <strtol>

080043e8 <__errno>:
 80043e8:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <__errno+0x8>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000014 	.word	0x20000014

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	4e0d      	ldr	r6, [pc, #52]	; (800442c <__libc_init_array+0x38>)
 80043f8:	4c0d      	ldr	r4, [pc, #52]	; (8004430 <__libc_init_array+0x3c>)
 80043fa:	1ba4      	subs	r4, r4, r6
 80043fc:	10a4      	asrs	r4, r4, #2
 80043fe:	2500      	movs	r5, #0
 8004400:	42a5      	cmp	r5, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	4e0b      	ldr	r6, [pc, #44]	; (8004434 <__libc_init_array+0x40>)
 8004406:	4c0c      	ldr	r4, [pc, #48]	; (8004438 <__libc_init_array+0x44>)
 8004408:	f002 f8f2 	bl	80065f0 <_init>
 800440c:	1ba4      	subs	r4, r4, r6
 800440e:	10a4      	asrs	r4, r4, #2
 8004410:	2500      	movs	r5, #0
 8004412:	42a5      	cmp	r5, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800441c:	4798      	blx	r3
 800441e:	3501      	adds	r5, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004426:	4798      	blx	r3
 8004428:	3501      	adds	r5, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	080068b0 	.word	0x080068b0
 8004430:	080068b0 	.word	0x080068b0
 8004434:	080068b0 	.word	0x080068b0
 8004438:	080068b4 	.word	0x080068b4

0800443c <memset>:
 800443c:	4402      	add	r2, r0
 800443e:	4603      	mov	r3, r0
 8004440:	4293      	cmp	r3, r2
 8004442:	d100      	bne.n	8004446 <memset+0xa>
 8004444:	4770      	bx	lr
 8004446:	f803 1b01 	strb.w	r1, [r3], #1
 800444a:	e7f9      	b.n	8004440 <memset+0x4>

0800444c <__cvt>:
 800444c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004450:	ec55 4b10 	vmov	r4, r5, d0
 8004454:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004456:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800445a:	2d00      	cmp	r5, #0
 800445c:	460e      	mov	r6, r1
 800445e:	4691      	mov	r9, r2
 8004460:	4619      	mov	r1, r3
 8004462:	bfb8      	it	lt
 8004464:	4622      	movlt	r2, r4
 8004466:	462b      	mov	r3, r5
 8004468:	f027 0720 	bic.w	r7, r7, #32
 800446c:	bfbb      	ittet	lt
 800446e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004472:	461d      	movlt	r5, r3
 8004474:	2300      	movge	r3, #0
 8004476:	232d      	movlt	r3, #45	; 0x2d
 8004478:	bfb8      	it	lt
 800447a:	4614      	movlt	r4, r2
 800447c:	2f46      	cmp	r7, #70	; 0x46
 800447e:	700b      	strb	r3, [r1, #0]
 8004480:	d004      	beq.n	800448c <__cvt+0x40>
 8004482:	2f45      	cmp	r7, #69	; 0x45
 8004484:	d100      	bne.n	8004488 <__cvt+0x3c>
 8004486:	3601      	adds	r6, #1
 8004488:	2102      	movs	r1, #2
 800448a:	e000      	b.n	800448e <__cvt+0x42>
 800448c:	2103      	movs	r1, #3
 800448e:	ab03      	add	r3, sp, #12
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	ab02      	add	r3, sp, #8
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	4632      	mov	r2, r6
 8004498:	4653      	mov	r3, sl
 800449a:	ec45 4b10 	vmov	d0, r4, r5
 800449e:	f000 fd6f 	bl	8004f80 <_dtoa_r>
 80044a2:	2f47      	cmp	r7, #71	; 0x47
 80044a4:	4680      	mov	r8, r0
 80044a6:	d102      	bne.n	80044ae <__cvt+0x62>
 80044a8:	f019 0f01 	tst.w	r9, #1
 80044ac:	d026      	beq.n	80044fc <__cvt+0xb0>
 80044ae:	2f46      	cmp	r7, #70	; 0x46
 80044b0:	eb08 0906 	add.w	r9, r8, r6
 80044b4:	d111      	bne.n	80044da <__cvt+0x8e>
 80044b6:	f898 3000 	ldrb.w	r3, [r8]
 80044ba:	2b30      	cmp	r3, #48	; 0x30
 80044bc:	d10a      	bne.n	80044d4 <__cvt+0x88>
 80044be:	2200      	movs	r2, #0
 80044c0:	2300      	movs	r3, #0
 80044c2:	4620      	mov	r0, r4
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fc fb07 	bl	8000ad8 <__aeabi_dcmpeq>
 80044ca:	b918      	cbnz	r0, 80044d4 <__cvt+0x88>
 80044cc:	f1c6 0601 	rsb	r6, r6, #1
 80044d0:	f8ca 6000 	str.w	r6, [sl]
 80044d4:	f8da 3000 	ldr.w	r3, [sl]
 80044d8:	4499      	add	r9, r3
 80044da:	2200      	movs	r2, #0
 80044dc:	2300      	movs	r3, #0
 80044de:	4620      	mov	r0, r4
 80044e0:	4629      	mov	r1, r5
 80044e2:	f7fc faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80044e6:	b938      	cbnz	r0, 80044f8 <__cvt+0xac>
 80044e8:	2230      	movs	r2, #48	; 0x30
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	454b      	cmp	r3, r9
 80044ee:	d205      	bcs.n	80044fc <__cvt+0xb0>
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	9103      	str	r1, [sp, #12]
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e7f8      	b.n	80044ea <__cvt+0x9e>
 80044f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004500:	eba3 0308 	sub.w	r3, r3, r8
 8004504:	4640      	mov	r0, r8
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	b004      	add	sp, #16
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800450e <__exponent>:
 800450e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004510:	2900      	cmp	r1, #0
 8004512:	4604      	mov	r4, r0
 8004514:	bfba      	itte	lt
 8004516:	4249      	neglt	r1, r1
 8004518:	232d      	movlt	r3, #45	; 0x2d
 800451a:	232b      	movge	r3, #43	; 0x2b
 800451c:	2909      	cmp	r1, #9
 800451e:	f804 2b02 	strb.w	r2, [r4], #2
 8004522:	7043      	strb	r3, [r0, #1]
 8004524:	dd20      	ble.n	8004568 <__exponent+0x5a>
 8004526:	f10d 0307 	add.w	r3, sp, #7
 800452a:	461f      	mov	r7, r3
 800452c:	260a      	movs	r6, #10
 800452e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004532:	fb06 1115 	mls	r1, r6, r5, r1
 8004536:	3130      	adds	r1, #48	; 0x30
 8004538:	2d09      	cmp	r5, #9
 800453a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800453e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004542:	4629      	mov	r1, r5
 8004544:	dc09      	bgt.n	800455a <__exponent+0x4c>
 8004546:	3130      	adds	r1, #48	; 0x30
 8004548:	3b02      	subs	r3, #2
 800454a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800454e:	42bb      	cmp	r3, r7
 8004550:	4622      	mov	r2, r4
 8004552:	d304      	bcc.n	800455e <__exponent+0x50>
 8004554:	1a10      	subs	r0, r2, r0
 8004556:	b003      	add	sp, #12
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455a:	4613      	mov	r3, r2
 800455c:	e7e7      	b.n	800452e <__exponent+0x20>
 800455e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004562:	f804 2b01 	strb.w	r2, [r4], #1
 8004566:	e7f2      	b.n	800454e <__exponent+0x40>
 8004568:	2330      	movs	r3, #48	; 0x30
 800456a:	4419      	add	r1, r3
 800456c:	7083      	strb	r3, [r0, #2]
 800456e:	1d02      	adds	r2, r0, #4
 8004570:	70c1      	strb	r1, [r0, #3]
 8004572:	e7ef      	b.n	8004554 <__exponent+0x46>

08004574 <_printf_float>:
 8004574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004578:	b08d      	sub	sp, #52	; 0x34
 800457a:	460c      	mov	r4, r1
 800457c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004580:	4616      	mov	r6, r2
 8004582:	461f      	mov	r7, r3
 8004584:	4605      	mov	r5, r0
 8004586:	f001 fab7 	bl	8005af8 <_localeconv_r>
 800458a:	6803      	ldr	r3, [r0, #0]
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fb fe26 	bl	80001e0 <strlen>
 8004594:	2300      	movs	r3, #0
 8004596:	930a      	str	r3, [sp, #40]	; 0x28
 8004598:	f8d8 3000 	ldr.w	r3, [r8]
 800459c:	9005      	str	r0, [sp, #20]
 800459e:	3307      	adds	r3, #7
 80045a0:	f023 0307 	bic.w	r3, r3, #7
 80045a4:	f103 0208 	add.w	r2, r3, #8
 80045a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045ac:	f8d4 b000 	ldr.w	fp, [r4]
 80045b0:	f8c8 2000 	str.w	r2, [r8]
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045c4:	9307      	str	r3, [sp, #28]
 80045c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	4ba7      	ldr	r3, [pc, #668]	; (800486c <_printf_float+0x2f8>)
 80045d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d4:	f7fc fab2 	bl	8000b3c <__aeabi_dcmpun>
 80045d8:	bb70      	cbnz	r0, 8004638 <_printf_float+0xc4>
 80045da:	f04f 32ff 	mov.w	r2, #4294967295
 80045de:	4ba3      	ldr	r3, [pc, #652]	; (800486c <_printf_float+0x2f8>)
 80045e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045e4:	f7fc fa8c 	bl	8000b00 <__aeabi_dcmple>
 80045e8:	bb30      	cbnz	r0, 8004638 <_printf_float+0xc4>
 80045ea:	2200      	movs	r2, #0
 80045ec:	2300      	movs	r3, #0
 80045ee:	4640      	mov	r0, r8
 80045f0:	4649      	mov	r1, r9
 80045f2:	f7fc fa7b 	bl	8000aec <__aeabi_dcmplt>
 80045f6:	b110      	cbz	r0, 80045fe <_printf_float+0x8a>
 80045f8:	232d      	movs	r3, #45	; 0x2d
 80045fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fe:	4a9c      	ldr	r2, [pc, #624]	; (8004870 <_printf_float+0x2fc>)
 8004600:	4b9c      	ldr	r3, [pc, #624]	; (8004874 <_printf_float+0x300>)
 8004602:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004606:	bf8c      	ite	hi
 8004608:	4690      	movhi	r8, r2
 800460a:	4698      	movls	r8, r3
 800460c:	2303      	movs	r3, #3
 800460e:	f02b 0204 	bic.w	r2, fp, #4
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	f04f 0900 	mov.w	r9, #0
 800461a:	9700      	str	r7, [sp, #0]
 800461c:	4633      	mov	r3, r6
 800461e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004620:	4621      	mov	r1, r4
 8004622:	4628      	mov	r0, r5
 8004624:	f000 f9e6 	bl	80049f4 <_printf_common>
 8004628:	3001      	adds	r0, #1
 800462a:	f040 808d 	bne.w	8004748 <_printf_float+0x1d4>
 800462e:	f04f 30ff 	mov.w	r0, #4294967295
 8004632:	b00d      	add	sp, #52	; 0x34
 8004634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	4640      	mov	r0, r8
 800463e:	4649      	mov	r1, r9
 8004640:	f7fc fa7c 	bl	8000b3c <__aeabi_dcmpun>
 8004644:	b110      	cbz	r0, 800464c <_printf_float+0xd8>
 8004646:	4a8c      	ldr	r2, [pc, #560]	; (8004878 <_printf_float+0x304>)
 8004648:	4b8c      	ldr	r3, [pc, #560]	; (800487c <_printf_float+0x308>)
 800464a:	e7da      	b.n	8004602 <_printf_float+0x8e>
 800464c:	6861      	ldr	r1, [r4, #4]
 800464e:	1c4b      	adds	r3, r1, #1
 8004650:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004654:	a80a      	add	r0, sp, #40	; 0x28
 8004656:	d13e      	bne.n	80046d6 <_printf_float+0x162>
 8004658:	2306      	movs	r3, #6
 800465a:	6063      	str	r3, [r4, #4]
 800465c:	2300      	movs	r3, #0
 800465e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004662:	ab09      	add	r3, sp, #36	; 0x24
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	ec49 8b10 	vmov	d0, r8, r9
 800466a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800466e:	6022      	str	r2, [r4, #0]
 8004670:	f8cd a004 	str.w	sl, [sp, #4]
 8004674:	6861      	ldr	r1, [r4, #4]
 8004676:	4628      	mov	r0, r5
 8004678:	f7ff fee8 	bl	800444c <__cvt>
 800467c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004680:	2b47      	cmp	r3, #71	; 0x47
 8004682:	4680      	mov	r8, r0
 8004684:	d109      	bne.n	800469a <_printf_float+0x126>
 8004686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004688:	1cd8      	adds	r0, r3, #3
 800468a:	db02      	blt.n	8004692 <_printf_float+0x11e>
 800468c:	6862      	ldr	r2, [r4, #4]
 800468e:	4293      	cmp	r3, r2
 8004690:	dd47      	ble.n	8004722 <_printf_float+0x1ae>
 8004692:	f1aa 0a02 	sub.w	sl, sl, #2
 8004696:	fa5f fa8a 	uxtb.w	sl, sl
 800469a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800469e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046a0:	d824      	bhi.n	80046ec <_printf_float+0x178>
 80046a2:	3901      	subs	r1, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046aa:	9109      	str	r1, [sp, #36]	; 0x24
 80046ac:	f7ff ff2f 	bl	800450e <__exponent>
 80046b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046b2:	1813      	adds	r3, r2, r0
 80046b4:	2a01      	cmp	r2, #1
 80046b6:	4681      	mov	r9, r0
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	dc02      	bgt.n	80046c2 <_printf_float+0x14e>
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	07d1      	lsls	r1, r2, #31
 80046c0:	d501      	bpl.n	80046c6 <_printf_float+0x152>
 80046c2:	3301      	adds	r3, #1
 80046c4:	6123      	str	r3, [r4, #16]
 80046c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0a5      	beq.n	800461a <_printf_float+0xa6>
 80046ce:	232d      	movs	r3, #45	; 0x2d
 80046d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d4:	e7a1      	b.n	800461a <_printf_float+0xa6>
 80046d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80046da:	f000 8177 	beq.w	80049cc <_printf_float+0x458>
 80046de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046e2:	d1bb      	bne.n	800465c <_printf_float+0xe8>
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d1b9      	bne.n	800465c <_printf_float+0xe8>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e7b6      	b.n	800465a <_printf_float+0xe6>
 80046ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80046f0:	d119      	bne.n	8004726 <_printf_float+0x1b2>
 80046f2:	2900      	cmp	r1, #0
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	dd0c      	ble.n	8004712 <_printf_float+0x19e>
 80046f8:	6121      	str	r1, [r4, #16]
 80046fa:	b913      	cbnz	r3, 8004702 <_printf_float+0x18e>
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	07d2      	lsls	r2, r2, #31
 8004700:	d502      	bpl.n	8004708 <_printf_float+0x194>
 8004702:	3301      	adds	r3, #1
 8004704:	440b      	add	r3, r1
 8004706:	6123      	str	r3, [r4, #16]
 8004708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470a:	65a3      	str	r3, [r4, #88]	; 0x58
 800470c:	f04f 0900 	mov.w	r9, #0
 8004710:	e7d9      	b.n	80046c6 <_printf_float+0x152>
 8004712:	b913      	cbnz	r3, 800471a <_printf_float+0x1a6>
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	07d0      	lsls	r0, r2, #31
 8004718:	d501      	bpl.n	800471e <_printf_float+0x1aa>
 800471a:	3302      	adds	r3, #2
 800471c:	e7f3      	b.n	8004706 <_printf_float+0x192>
 800471e:	2301      	movs	r3, #1
 8004720:	e7f1      	b.n	8004706 <_printf_float+0x192>
 8004722:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004726:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800472a:	4293      	cmp	r3, r2
 800472c:	db05      	blt.n	800473a <_printf_float+0x1c6>
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	07d1      	lsls	r1, r2, #31
 8004734:	d5e8      	bpl.n	8004708 <_printf_float+0x194>
 8004736:	3301      	adds	r3, #1
 8004738:	e7e5      	b.n	8004706 <_printf_float+0x192>
 800473a:	2b00      	cmp	r3, #0
 800473c:	bfd4      	ite	le
 800473e:	f1c3 0302 	rsble	r3, r3, #2
 8004742:	2301      	movgt	r3, #1
 8004744:	4413      	add	r3, r2
 8004746:	e7de      	b.n	8004706 <_printf_float+0x192>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	055a      	lsls	r2, r3, #21
 800474c:	d407      	bmi.n	800475e <_printf_float+0x1ea>
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	4642      	mov	r2, r8
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	d12b      	bne.n	80047b4 <_printf_float+0x240>
 800475c:	e767      	b.n	800462e <_printf_float+0xba>
 800475e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004762:	f240 80dc 	bls.w	800491e <_printf_float+0x3aa>
 8004766:	2200      	movs	r2, #0
 8004768:	2300      	movs	r3, #0
 800476a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800476e:	f7fc f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004772:	2800      	cmp	r0, #0
 8004774:	d033      	beq.n	80047de <_printf_float+0x26a>
 8004776:	2301      	movs	r3, #1
 8004778:	4a41      	ldr	r2, [pc, #260]	; (8004880 <_printf_float+0x30c>)
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	f43f af54 	beq.w	800462e <_printf_float+0xba>
 8004786:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800478a:	429a      	cmp	r2, r3
 800478c:	db02      	blt.n	8004794 <_printf_float+0x220>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	07d8      	lsls	r0, r3, #31
 8004792:	d50f      	bpl.n	80047b4 <_printf_float+0x240>
 8004794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004798:	4631      	mov	r1, r6
 800479a:	4628      	mov	r0, r5
 800479c:	47b8      	blx	r7
 800479e:	3001      	adds	r0, #1
 80047a0:	f43f af45 	beq.w	800462e <_printf_float+0xba>
 80047a4:	f04f 0800 	mov.w	r8, #0
 80047a8:	f104 091a 	add.w	r9, r4, #26
 80047ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	4543      	cmp	r3, r8
 80047b2:	dc09      	bgt.n	80047c8 <_printf_float+0x254>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	079b      	lsls	r3, r3, #30
 80047b8:	f100 8103 	bmi.w	80049c2 <_printf_float+0x44e>
 80047bc:	68e0      	ldr	r0, [r4, #12]
 80047be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047c0:	4298      	cmp	r0, r3
 80047c2:	bfb8      	it	lt
 80047c4:	4618      	movlt	r0, r3
 80047c6:	e734      	b.n	8004632 <_printf_float+0xbe>
 80047c8:	2301      	movs	r3, #1
 80047ca:	464a      	mov	r2, r9
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f af2b 	beq.w	800462e <_printf_float+0xba>
 80047d8:	f108 0801 	add.w	r8, r8, #1
 80047dc:	e7e6      	b.n	80047ac <_printf_float+0x238>
 80047de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	dc2b      	bgt.n	800483c <_printf_float+0x2c8>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <_printf_float+0x30c>)
 80047e8:	4631      	mov	r1, r6
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b8      	blx	r7
 80047ee:	3001      	adds	r0, #1
 80047f0:	f43f af1d 	beq.w	800462e <_printf_float+0xba>
 80047f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f6:	b923      	cbnz	r3, 8004802 <_printf_float+0x28e>
 80047f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fa:	b913      	cbnz	r3, 8004802 <_printf_float+0x28e>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	07d9      	lsls	r1, r3, #31
 8004800:	d5d8      	bpl.n	80047b4 <_printf_float+0x240>
 8004802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	f43f af0e 	beq.w	800462e <_printf_float+0xba>
 8004812:	f04f 0900 	mov.w	r9, #0
 8004816:	f104 0a1a 	add.w	sl, r4, #26
 800481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481c:	425b      	negs	r3, r3
 800481e:	454b      	cmp	r3, r9
 8004820:	dc01      	bgt.n	8004826 <_printf_float+0x2b2>
 8004822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004824:	e794      	b.n	8004750 <_printf_float+0x1dc>
 8004826:	2301      	movs	r3, #1
 8004828:	4652      	mov	r2, sl
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	f43f aefc 	beq.w	800462e <_printf_float+0xba>
 8004836:	f109 0901 	add.w	r9, r9, #1
 800483a:	e7ee      	b.n	800481a <_printf_float+0x2a6>
 800483c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800483e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004840:	429a      	cmp	r2, r3
 8004842:	bfa8      	it	ge
 8004844:	461a      	movge	r2, r3
 8004846:	2a00      	cmp	r2, #0
 8004848:	4691      	mov	r9, r2
 800484a:	dd07      	ble.n	800485c <_printf_float+0x2e8>
 800484c:	4613      	mov	r3, r2
 800484e:	4631      	mov	r1, r6
 8004850:	4642      	mov	r2, r8
 8004852:	4628      	mov	r0, r5
 8004854:	47b8      	blx	r7
 8004856:	3001      	adds	r0, #1
 8004858:	f43f aee9 	beq.w	800462e <_printf_float+0xba>
 800485c:	f104 031a 	add.w	r3, r4, #26
 8004860:	f04f 0b00 	mov.w	fp, #0
 8004864:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004868:	9306      	str	r3, [sp, #24]
 800486a:	e015      	b.n	8004898 <_printf_float+0x324>
 800486c:	7fefffff 	.word	0x7fefffff
 8004870:	0800664c 	.word	0x0800664c
 8004874:	08006648 	.word	0x08006648
 8004878:	08006654 	.word	0x08006654
 800487c:	08006650 	.word	0x08006650
 8004880:	08006658 	.word	0x08006658
 8004884:	2301      	movs	r3, #1
 8004886:	9a06      	ldr	r2, [sp, #24]
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	f43f aecd 	beq.w	800462e <_printf_float+0xba>
 8004894:	f10b 0b01 	add.w	fp, fp, #1
 8004898:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800489c:	ebaa 0309 	sub.w	r3, sl, r9
 80048a0:	455b      	cmp	r3, fp
 80048a2:	dcef      	bgt.n	8004884 <_printf_float+0x310>
 80048a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a8:	429a      	cmp	r2, r3
 80048aa:	44d0      	add	r8, sl
 80048ac:	db15      	blt.n	80048da <_printf_float+0x366>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	07da      	lsls	r2, r3, #31
 80048b2:	d412      	bmi.n	80048da <_printf_float+0x366>
 80048b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048b8:	eba3 020a 	sub.w	r2, r3, sl
 80048bc:	eba3 0a01 	sub.w	sl, r3, r1
 80048c0:	4592      	cmp	sl, r2
 80048c2:	bfa8      	it	ge
 80048c4:	4692      	movge	sl, r2
 80048c6:	f1ba 0f00 	cmp.w	sl, #0
 80048ca:	dc0e      	bgt.n	80048ea <_printf_float+0x376>
 80048cc:	f04f 0800 	mov.w	r8, #0
 80048d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80048d4:	f104 091a 	add.w	r9, r4, #26
 80048d8:	e019      	b.n	800490e <_printf_float+0x39a>
 80048da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	d1e5      	bne.n	80048b4 <_printf_float+0x340>
 80048e8:	e6a1      	b.n	800462e <_printf_float+0xba>
 80048ea:	4653      	mov	r3, sl
 80048ec:	4642      	mov	r2, r8
 80048ee:	4631      	mov	r1, r6
 80048f0:	4628      	mov	r0, r5
 80048f2:	47b8      	blx	r7
 80048f4:	3001      	adds	r0, #1
 80048f6:	d1e9      	bne.n	80048cc <_printf_float+0x358>
 80048f8:	e699      	b.n	800462e <_printf_float+0xba>
 80048fa:	2301      	movs	r3, #1
 80048fc:	464a      	mov	r2, r9
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	f43f ae92 	beq.w	800462e <_printf_float+0xba>
 800490a:	f108 0801 	add.w	r8, r8, #1
 800490e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	eba3 030a 	sub.w	r3, r3, sl
 8004918:	4543      	cmp	r3, r8
 800491a:	dcee      	bgt.n	80048fa <_printf_float+0x386>
 800491c:	e74a      	b.n	80047b4 <_printf_float+0x240>
 800491e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004920:	2a01      	cmp	r2, #1
 8004922:	dc01      	bgt.n	8004928 <_printf_float+0x3b4>
 8004924:	07db      	lsls	r3, r3, #31
 8004926:	d53a      	bpl.n	800499e <_printf_float+0x42a>
 8004928:	2301      	movs	r3, #1
 800492a:	4642      	mov	r2, r8
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	47b8      	blx	r7
 8004932:	3001      	adds	r0, #1
 8004934:	f43f ae7b 	beq.w	800462e <_printf_float+0xba>
 8004938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800493c:	4631      	mov	r1, r6
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	f108 0801 	add.w	r8, r8, #1
 8004948:	f43f ae71 	beq.w	800462e <_printf_float+0xba>
 800494c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800494e:	2200      	movs	r2, #0
 8004950:	f103 3aff 	add.w	sl, r3, #4294967295
 8004954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004958:	2300      	movs	r3, #0
 800495a:	f7fc f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800495e:	b9c8      	cbnz	r0, 8004994 <_printf_float+0x420>
 8004960:	4653      	mov	r3, sl
 8004962:	4642      	mov	r2, r8
 8004964:	4631      	mov	r1, r6
 8004966:	4628      	mov	r0, r5
 8004968:	47b8      	blx	r7
 800496a:	3001      	adds	r0, #1
 800496c:	d10e      	bne.n	800498c <_printf_float+0x418>
 800496e:	e65e      	b.n	800462e <_printf_float+0xba>
 8004970:	2301      	movs	r3, #1
 8004972:	4652      	mov	r2, sl
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f ae57 	beq.w	800462e <_printf_float+0xba>
 8004980:	f108 0801 	add.w	r8, r8, #1
 8004984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	4543      	cmp	r3, r8
 800498a:	dcf1      	bgt.n	8004970 <_printf_float+0x3fc>
 800498c:	464b      	mov	r3, r9
 800498e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004992:	e6de      	b.n	8004752 <_printf_float+0x1de>
 8004994:	f04f 0800 	mov.w	r8, #0
 8004998:	f104 0a1a 	add.w	sl, r4, #26
 800499c:	e7f2      	b.n	8004984 <_printf_float+0x410>
 800499e:	2301      	movs	r3, #1
 80049a0:	e7df      	b.n	8004962 <_printf_float+0x3ee>
 80049a2:	2301      	movs	r3, #1
 80049a4:	464a      	mov	r2, r9
 80049a6:	4631      	mov	r1, r6
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b8      	blx	r7
 80049ac:	3001      	adds	r0, #1
 80049ae:	f43f ae3e 	beq.w	800462e <_printf_float+0xba>
 80049b2:	f108 0801 	add.w	r8, r8, #1
 80049b6:	68e3      	ldr	r3, [r4, #12]
 80049b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	4543      	cmp	r3, r8
 80049be:	dcf0      	bgt.n	80049a2 <_printf_float+0x42e>
 80049c0:	e6fc      	b.n	80047bc <_printf_float+0x248>
 80049c2:	f04f 0800 	mov.w	r8, #0
 80049c6:	f104 0919 	add.w	r9, r4, #25
 80049ca:	e7f4      	b.n	80049b6 <_printf_float+0x442>
 80049cc:	2900      	cmp	r1, #0
 80049ce:	f43f ae8b 	beq.w	80046e8 <_printf_float+0x174>
 80049d2:	2300      	movs	r3, #0
 80049d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049d8:	ab09      	add	r3, sp, #36	; 0x24
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	ec49 8b10 	vmov	d0, r8, r9
 80049e0:	6022      	str	r2, [r4, #0]
 80049e2:	f8cd a004 	str.w	sl, [sp, #4]
 80049e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049ea:	4628      	mov	r0, r5
 80049ec:	f7ff fd2e 	bl	800444c <__cvt>
 80049f0:	4680      	mov	r8, r0
 80049f2:	e648      	b.n	8004686 <_printf_float+0x112>

080049f4 <_printf_common>:
 80049f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f8:	4691      	mov	r9, r2
 80049fa:	461f      	mov	r7, r3
 80049fc:	688a      	ldr	r2, [r1, #8]
 80049fe:	690b      	ldr	r3, [r1, #16]
 8004a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a04:	4293      	cmp	r3, r2
 8004a06:	bfb8      	it	lt
 8004a08:	4613      	movlt	r3, r2
 8004a0a:	f8c9 3000 	str.w	r3, [r9]
 8004a0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a12:	4606      	mov	r6, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	b112      	cbz	r2, 8004a1e <_printf_common+0x2a>
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f8c9 3000 	str.w	r3, [r9]
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	0699      	lsls	r1, r3, #26
 8004a22:	bf42      	ittt	mi
 8004a24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a28:	3302      	addmi	r3, #2
 8004a2a:	f8c9 3000 	strmi.w	r3, [r9]
 8004a2e:	6825      	ldr	r5, [r4, #0]
 8004a30:	f015 0506 	ands.w	r5, r5, #6
 8004a34:	d107      	bne.n	8004a46 <_printf_common+0x52>
 8004a36:	f104 0a19 	add.w	sl, r4, #25
 8004a3a:	68e3      	ldr	r3, [r4, #12]
 8004a3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	42ab      	cmp	r3, r5
 8004a44:	dc28      	bgt.n	8004a98 <_printf_common+0xa4>
 8004a46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	3300      	adds	r3, #0
 8004a4e:	bf18      	it	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	0692      	lsls	r2, r2, #26
 8004a54:	d42d      	bmi.n	8004ab2 <_printf_common+0xbe>
 8004a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a5a:	4639      	mov	r1, r7
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	47c0      	blx	r8
 8004a60:	3001      	adds	r0, #1
 8004a62:	d020      	beq.n	8004aa6 <_printf_common+0xb2>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	68e5      	ldr	r5, [r4, #12]
 8004a68:	f8d9 2000 	ldr.w	r2, [r9]
 8004a6c:	f003 0306 	and.w	r3, r3, #6
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	bf08      	it	eq
 8004a74:	1aad      	subeq	r5, r5, r2
 8004a76:	68a3      	ldr	r3, [r4, #8]
 8004a78:	6922      	ldr	r2, [r4, #16]
 8004a7a:	bf0c      	ite	eq
 8004a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a80:	2500      	movne	r5, #0
 8004a82:	4293      	cmp	r3, r2
 8004a84:	bfc4      	itt	gt
 8004a86:	1a9b      	subgt	r3, r3, r2
 8004a88:	18ed      	addgt	r5, r5, r3
 8004a8a:	f04f 0900 	mov.w	r9, #0
 8004a8e:	341a      	adds	r4, #26
 8004a90:	454d      	cmp	r5, r9
 8004a92:	d11a      	bne.n	8004aca <_printf_common+0xd6>
 8004a94:	2000      	movs	r0, #0
 8004a96:	e008      	b.n	8004aaa <_printf_common+0xb6>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4652      	mov	r2, sl
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	47c0      	blx	r8
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d103      	bne.n	8004aae <_printf_common+0xba>
 8004aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aae:	3501      	adds	r5, #1
 8004ab0:	e7c3      	b.n	8004a3a <_printf_common+0x46>
 8004ab2:	18e1      	adds	r1, r4, r3
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	2030      	movs	r0, #48	; 0x30
 8004ab8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004abc:	4422      	add	r2, r4
 8004abe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ac2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	e7c5      	b.n	8004a56 <_printf_common+0x62>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4622      	mov	r2, r4
 8004ace:	4639      	mov	r1, r7
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	47c0      	blx	r8
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0e6      	beq.n	8004aa6 <_printf_common+0xb2>
 8004ad8:	f109 0901 	add.w	r9, r9, #1
 8004adc:	e7d8      	b.n	8004a90 <_printf_common+0x9c>
	...

08004ae0 <_printf_i>:
 8004ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ae4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ae8:	460c      	mov	r4, r1
 8004aea:	7e09      	ldrb	r1, [r1, #24]
 8004aec:	b085      	sub	sp, #20
 8004aee:	296e      	cmp	r1, #110	; 0x6e
 8004af0:	4617      	mov	r7, r2
 8004af2:	4606      	mov	r6, r0
 8004af4:	4698      	mov	r8, r3
 8004af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004af8:	f000 80b3 	beq.w	8004c62 <_printf_i+0x182>
 8004afc:	d822      	bhi.n	8004b44 <_printf_i+0x64>
 8004afe:	2963      	cmp	r1, #99	; 0x63
 8004b00:	d036      	beq.n	8004b70 <_printf_i+0x90>
 8004b02:	d80a      	bhi.n	8004b1a <_printf_i+0x3a>
 8004b04:	2900      	cmp	r1, #0
 8004b06:	f000 80b9 	beq.w	8004c7c <_printf_i+0x19c>
 8004b0a:	2958      	cmp	r1, #88	; 0x58
 8004b0c:	f000 8083 	beq.w	8004c16 <_printf_i+0x136>
 8004b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b18:	e032      	b.n	8004b80 <_printf_i+0xa0>
 8004b1a:	2964      	cmp	r1, #100	; 0x64
 8004b1c:	d001      	beq.n	8004b22 <_printf_i+0x42>
 8004b1e:	2969      	cmp	r1, #105	; 0x69
 8004b20:	d1f6      	bne.n	8004b10 <_printf_i+0x30>
 8004b22:	6820      	ldr	r0, [r4, #0]
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	0605      	lsls	r5, r0, #24
 8004b28:	f103 0104 	add.w	r1, r3, #4
 8004b2c:	d52a      	bpl.n	8004b84 <_printf_i+0xa4>
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da03      	bge.n	8004b3e <_printf_i+0x5e>
 8004b36:	222d      	movs	r2, #45	; 0x2d
 8004b38:	425b      	negs	r3, r3
 8004b3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b3e:	486f      	ldr	r0, [pc, #444]	; (8004cfc <_printf_i+0x21c>)
 8004b40:	220a      	movs	r2, #10
 8004b42:	e039      	b.n	8004bb8 <_printf_i+0xd8>
 8004b44:	2973      	cmp	r1, #115	; 0x73
 8004b46:	f000 809d 	beq.w	8004c84 <_printf_i+0x1a4>
 8004b4a:	d808      	bhi.n	8004b5e <_printf_i+0x7e>
 8004b4c:	296f      	cmp	r1, #111	; 0x6f
 8004b4e:	d020      	beq.n	8004b92 <_printf_i+0xb2>
 8004b50:	2970      	cmp	r1, #112	; 0x70
 8004b52:	d1dd      	bne.n	8004b10 <_printf_i+0x30>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f043 0320 	orr.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e003      	b.n	8004b66 <_printf_i+0x86>
 8004b5e:	2975      	cmp	r1, #117	; 0x75
 8004b60:	d017      	beq.n	8004b92 <_printf_i+0xb2>
 8004b62:	2978      	cmp	r1, #120	; 0x78
 8004b64:	d1d4      	bne.n	8004b10 <_printf_i+0x30>
 8004b66:	2378      	movs	r3, #120	; 0x78
 8004b68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b6c:	4864      	ldr	r0, [pc, #400]	; (8004d00 <_printf_i+0x220>)
 8004b6e:	e055      	b.n	8004c1c <_printf_i+0x13c>
 8004b70:	6813      	ldr	r3, [r2, #0]
 8004b72:	1d19      	adds	r1, r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6011      	str	r1, [r2, #0]
 8004b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b80:	2301      	movs	r3, #1
 8004b82:	e08c      	b.n	8004c9e <_printf_i+0x1be>
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6011      	str	r1, [r2, #0]
 8004b88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b8c:	bf18      	it	ne
 8004b8e:	b21b      	sxthne	r3, r3
 8004b90:	e7cf      	b.n	8004b32 <_printf_i+0x52>
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	6825      	ldr	r5, [r4, #0]
 8004b96:	1d18      	adds	r0, r3, #4
 8004b98:	6010      	str	r0, [r2, #0]
 8004b9a:	0628      	lsls	r0, r5, #24
 8004b9c:	d501      	bpl.n	8004ba2 <_printf_i+0xc2>
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	e002      	b.n	8004ba8 <_printf_i+0xc8>
 8004ba2:	0668      	lsls	r0, r5, #25
 8004ba4:	d5fb      	bpl.n	8004b9e <_printf_i+0xbe>
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	4854      	ldr	r0, [pc, #336]	; (8004cfc <_printf_i+0x21c>)
 8004baa:	296f      	cmp	r1, #111	; 0x6f
 8004bac:	bf14      	ite	ne
 8004bae:	220a      	movne	r2, #10
 8004bb0:	2208      	moveq	r2, #8
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bb8:	6865      	ldr	r5, [r4, #4]
 8004bba:	60a5      	str	r5, [r4, #8]
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	f2c0 8095 	blt.w	8004cec <_printf_i+0x20c>
 8004bc2:	6821      	ldr	r1, [r4, #0]
 8004bc4:	f021 0104 	bic.w	r1, r1, #4
 8004bc8:	6021      	str	r1, [r4, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d13d      	bne.n	8004c4a <_printf_i+0x16a>
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	f040 808e 	bne.w	8004cf0 <_printf_i+0x210>
 8004bd4:	4665      	mov	r5, ip
 8004bd6:	2a08      	cmp	r2, #8
 8004bd8:	d10b      	bne.n	8004bf2 <_printf_i+0x112>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	07db      	lsls	r3, r3, #31
 8004bde:	d508      	bpl.n	8004bf2 <_printf_i+0x112>
 8004be0:	6923      	ldr	r3, [r4, #16]
 8004be2:	6862      	ldr	r2, [r4, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	bfde      	ittt	le
 8004be8:	2330      	movle	r3, #48	; 0x30
 8004bea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bf2:	ebac 0305 	sub.w	r3, ip, r5
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	f8cd 8000 	str.w	r8, [sp]
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	aa03      	add	r2, sp, #12
 8004c00:	4621      	mov	r1, r4
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7ff fef6 	bl	80049f4 <_printf_common>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d14d      	bne.n	8004ca8 <_printf_i+0x1c8>
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	b005      	add	sp, #20
 8004c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c16:	4839      	ldr	r0, [pc, #228]	; (8004cfc <_printf_i+0x21c>)
 8004c18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	6821      	ldr	r1, [r4, #0]
 8004c20:	1d1d      	adds	r5, r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6015      	str	r5, [r2, #0]
 8004c26:	060a      	lsls	r2, r1, #24
 8004c28:	d50b      	bpl.n	8004c42 <_printf_i+0x162>
 8004c2a:	07ca      	lsls	r2, r1, #31
 8004c2c:	bf44      	itt	mi
 8004c2e:	f041 0120 	orrmi.w	r1, r1, #32
 8004c32:	6021      	strmi	r1, [r4, #0]
 8004c34:	b91b      	cbnz	r3, 8004c3e <_printf_i+0x15e>
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	f022 0220 	bic.w	r2, r2, #32
 8004c3c:	6022      	str	r2, [r4, #0]
 8004c3e:	2210      	movs	r2, #16
 8004c40:	e7b7      	b.n	8004bb2 <_printf_i+0xd2>
 8004c42:	064d      	lsls	r5, r1, #25
 8004c44:	bf48      	it	mi
 8004c46:	b29b      	uxthmi	r3, r3
 8004c48:	e7ef      	b.n	8004c2a <_printf_i+0x14a>
 8004c4a:	4665      	mov	r5, ip
 8004c4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c50:	fb02 3311 	mls	r3, r2, r1, r3
 8004c54:	5cc3      	ldrb	r3, [r0, r3]
 8004c56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	2900      	cmp	r1, #0
 8004c5e:	d1f5      	bne.n	8004c4c <_printf_i+0x16c>
 8004c60:	e7b9      	b.n	8004bd6 <_printf_i+0xf6>
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	6825      	ldr	r5, [r4, #0]
 8004c66:	6961      	ldr	r1, [r4, #20]
 8004c68:	1d18      	adds	r0, r3, #4
 8004c6a:	6010      	str	r0, [r2, #0]
 8004c6c:	0628      	lsls	r0, r5, #24
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	d501      	bpl.n	8004c76 <_printf_i+0x196>
 8004c72:	6019      	str	r1, [r3, #0]
 8004c74:	e002      	b.n	8004c7c <_printf_i+0x19c>
 8004c76:	066a      	lsls	r2, r5, #25
 8004c78:	d5fb      	bpl.n	8004c72 <_printf_i+0x192>
 8004c7a:	8019      	strh	r1, [r3, #0]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	4665      	mov	r5, ip
 8004c82:	e7b9      	b.n	8004bf8 <_printf_i+0x118>
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	1d19      	adds	r1, r3, #4
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	681d      	ldr	r5, [r3, #0]
 8004c8c:	6862      	ldr	r2, [r4, #4]
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4628      	mov	r0, r5
 8004c92:	f7fb faad 	bl	80001f0 <memchr>
 8004c96:	b108      	cbz	r0, 8004c9c <_printf_i+0x1bc>
 8004c98:	1b40      	subs	r0, r0, r5
 8004c9a:	6060      	str	r0, [r4, #4]
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca6:	e7a7      	b.n	8004bf8 <_printf_i+0x118>
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	462a      	mov	r2, r5
 8004cac:	4639      	mov	r1, r7
 8004cae:	4630      	mov	r0, r6
 8004cb0:	47c0      	blx	r8
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d0aa      	beq.n	8004c0c <_printf_i+0x12c>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	079b      	lsls	r3, r3, #30
 8004cba:	d413      	bmi.n	8004ce4 <_printf_i+0x204>
 8004cbc:	68e0      	ldr	r0, [r4, #12]
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	4298      	cmp	r0, r3
 8004cc2:	bfb8      	it	lt
 8004cc4:	4618      	movlt	r0, r3
 8004cc6:	e7a3      	b.n	8004c10 <_printf_i+0x130>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	464a      	mov	r2, r9
 8004ccc:	4639      	mov	r1, r7
 8004cce:	4630      	mov	r0, r6
 8004cd0:	47c0      	blx	r8
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d09a      	beq.n	8004c0c <_printf_i+0x12c>
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	68e3      	ldr	r3, [r4, #12]
 8004cda:	9a03      	ldr	r2, [sp, #12]
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	42ab      	cmp	r3, r5
 8004ce0:	dcf2      	bgt.n	8004cc8 <_printf_i+0x1e8>
 8004ce2:	e7eb      	b.n	8004cbc <_printf_i+0x1dc>
 8004ce4:	2500      	movs	r5, #0
 8004ce6:	f104 0919 	add.w	r9, r4, #25
 8004cea:	e7f5      	b.n	8004cd8 <_printf_i+0x1f8>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ac      	bne.n	8004c4a <_printf_i+0x16a>
 8004cf0:	7803      	ldrb	r3, [r0, #0]
 8004cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cfa:	e76c      	b.n	8004bd6 <_printf_i+0xf6>
 8004cfc:	0800665a 	.word	0x0800665a
 8004d00:	0800666b 	.word	0x0800666b

08004d04 <siprintf>:
 8004d04:	b40e      	push	{r1, r2, r3}
 8004d06:	b500      	push	{lr}
 8004d08:	b09c      	sub	sp, #112	; 0x70
 8004d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d0c:	9002      	str	r0, [sp, #8]
 8004d0e:	9006      	str	r0, [sp, #24]
 8004d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d14:	4809      	ldr	r0, [pc, #36]	; (8004d3c <siprintf+0x38>)
 8004d16:	9107      	str	r1, [sp, #28]
 8004d18:	9104      	str	r1, [sp, #16]
 8004d1a:	4909      	ldr	r1, [pc, #36]	; (8004d40 <siprintf+0x3c>)
 8004d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d20:	9105      	str	r1, [sp, #20]
 8004d22:	6800      	ldr	r0, [r0, #0]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	a902      	add	r1, sp, #8
 8004d28:	f001 fb04 	bl	8006334 <_svfiprintf_r>
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	b01c      	add	sp, #112	; 0x70
 8004d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d38:	b003      	add	sp, #12
 8004d3a:	4770      	bx	lr
 8004d3c:	20000014 	.word	0x20000014
 8004d40:	ffff0208 	.word	0xffff0208

08004d44 <_strtol_l.isra.0>:
 8004d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	4680      	mov	r8, r0
 8004d4a:	4689      	mov	r9, r1
 8004d4c:	4692      	mov	sl, r2
 8004d4e:	461e      	mov	r6, r3
 8004d50:	460f      	mov	r7, r1
 8004d52:	463d      	mov	r5, r7
 8004d54:	9808      	ldr	r0, [sp, #32]
 8004d56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d5a:	f000 fec9 	bl	8005af0 <__locale_ctype_ptr_l>
 8004d5e:	4420      	add	r0, r4
 8004d60:	7843      	ldrb	r3, [r0, #1]
 8004d62:	f013 0308 	ands.w	r3, r3, #8
 8004d66:	d132      	bne.n	8004dce <_strtol_l.isra.0+0x8a>
 8004d68:	2c2d      	cmp	r4, #45	; 0x2d
 8004d6a:	d132      	bne.n	8004dd2 <_strtol_l.isra.0+0x8e>
 8004d6c:	787c      	ldrb	r4, [r7, #1]
 8004d6e:	1cbd      	adds	r5, r7, #2
 8004d70:	2201      	movs	r2, #1
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	d05d      	beq.n	8004e32 <_strtol_l.isra.0+0xee>
 8004d76:	2e10      	cmp	r6, #16
 8004d78:	d109      	bne.n	8004d8e <_strtol_l.isra.0+0x4a>
 8004d7a:	2c30      	cmp	r4, #48	; 0x30
 8004d7c:	d107      	bne.n	8004d8e <_strtol_l.isra.0+0x4a>
 8004d7e:	782b      	ldrb	r3, [r5, #0]
 8004d80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d84:	2b58      	cmp	r3, #88	; 0x58
 8004d86:	d14f      	bne.n	8004e28 <_strtol_l.isra.0+0xe4>
 8004d88:	786c      	ldrb	r4, [r5, #1]
 8004d8a:	2610      	movs	r6, #16
 8004d8c:	3502      	adds	r5, #2
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	bf14      	ite	ne
 8004d92:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004d96:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004d9a:	2700      	movs	r7, #0
 8004d9c:	fbb1 fcf6 	udiv	ip, r1, r6
 8004da0:	4638      	mov	r0, r7
 8004da2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004da6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	d817      	bhi.n	8004dde <_strtol_l.isra.0+0x9a>
 8004dae:	461c      	mov	r4, r3
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	dd23      	ble.n	8004dfc <_strtol_l.isra.0+0xb8>
 8004db4:	1c7b      	adds	r3, r7, #1
 8004db6:	d007      	beq.n	8004dc8 <_strtol_l.isra.0+0x84>
 8004db8:	4584      	cmp	ip, r0
 8004dba:	d31c      	bcc.n	8004df6 <_strtol_l.isra.0+0xb2>
 8004dbc:	d101      	bne.n	8004dc2 <_strtol_l.isra.0+0x7e>
 8004dbe:	45a6      	cmp	lr, r4
 8004dc0:	db19      	blt.n	8004df6 <_strtol_l.isra.0+0xb2>
 8004dc2:	fb00 4006 	mla	r0, r0, r6, r4
 8004dc6:	2701      	movs	r7, #1
 8004dc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dcc:	e7eb      	b.n	8004da6 <_strtol_l.isra.0+0x62>
 8004dce:	462f      	mov	r7, r5
 8004dd0:	e7bf      	b.n	8004d52 <_strtol_l.isra.0+0xe>
 8004dd2:	2c2b      	cmp	r4, #43	; 0x2b
 8004dd4:	bf04      	itt	eq
 8004dd6:	1cbd      	addeq	r5, r7, #2
 8004dd8:	787c      	ldrbeq	r4, [r7, #1]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	e7c9      	b.n	8004d72 <_strtol_l.isra.0+0x2e>
 8004dde:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004de2:	2b19      	cmp	r3, #25
 8004de4:	d801      	bhi.n	8004dea <_strtol_l.isra.0+0xa6>
 8004de6:	3c37      	subs	r4, #55	; 0x37
 8004de8:	e7e2      	b.n	8004db0 <_strtol_l.isra.0+0x6c>
 8004dea:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004dee:	2b19      	cmp	r3, #25
 8004df0:	d804      	bhi.n	8004dfc <_strtol_l.isra.0+0xb8>
 8004df2:	3c57      	subs	r4, #87	; 0x57
 8004df4:	e7dc      	b.n	8004db0 <_strtol_l.isra.0+0x6c>
 8004df6:	f04f 37ff 	mov.w	r7, #4294967295
 8004dfa:	e7e5      	b.n	8004dc8 <_strtol_l.isra.0+0x84>
 8004dfc:	1c7b      	adds	r3, r7, #1
 8004dfe:	d108      	bne.n	8004e12 <_strtol_l.isra.0+0xce>
 8004e00:	2322      	movs	r3, #34	; 0x22
 8004e02:	f8c8 3000 	str.w	r3, [r8]
 8004e06:	4608      	mov	r0, r1
 8004e08:	f1ba 0f00 	cmp.w	sl, #0
 8004e0c:	d107      	bne.n	8004e1e <_strtol_l.isra.0+0xda>
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	b102      	cbz	r2, 8004e16 <_strtol_l.isra.0+0xd2>
 8004e14:	4240      	negs	r0, r0
 8004e16:	f1ba 0f00 	cmp.w	sl, #0
 8004e1a:	d0f8      	beq.n	8004e0e <_strtol_l.isra.0+0xca>
 8004e1c:	b10f      	cbz	r7, 8004e22 <_strtol_l.isra.0+0xde>
 8004e1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004e22:	f8ca 9000 	str.w	r9, [sl]
 8004e26:	e7f2      	b.n	8004e0e <_strtol_l.isra.0+0xca>
 8004e28:	2430      	movs	r4, #48	; 0x30
 8004e2a:	2e00      	cmp	r6, #0
 8004e2c:	d1af      	bne.n	8004d8e <_strtol_l.isra.0+0x4a>
 8004e2e:	2608      	movs	r6, #8
 8004e30:	e7ad      	b.n	8004d8e <_strtol_l.isra.0+0x4a>
 8004e32:	2c30      	cmp	r4, #48	; 0x30
 8004e34:	d0a3      	beq.n	8004d7e <_strtol_l.isra.0+0x3a>
 8004e36:	260a      	movs	r6, #10
 8004e38:	e7a9      	b.n	8004d8e <_strtol_l.isra.0+0x4a>
	...

08004e3c <strtol>:
 8004e3c:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <strtol+0x24>)
 8004e3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e40:	681c      	ldr	r4, [r3, #0]
 8004e42:	4d08      	ldr	r5, [pc, #32]	; (8004e64 <strtol+0x28>)
 8004e44:	6a23      	ldr	r3, [r4, #32]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf08      	it	eq
 8004e4a:	462b      	moveq	r3, r5
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	460a      	mov	r2, r1
 8004e52:	4601      	mov	r1, r0
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7ff ff75 	bl	8004d44 <_strtol_l.isra.0>
 8004e5a:	b003      	add	sp, #12
 8004e5c:	bd30      	pop	{r4, r5, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000014 	.word	0x20000014
 8004e64:	20000078 	.word	0x20000078

08004e68 <quorem>:
 8004e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	6903      	ldr	r3, [r0, #16]
 8004e6e:	690c      	ldr	r4, [r1, #16]
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	4680      	mov	r8, r0
 8004e74:	f2c0 8082 	blt.w	8004f7c <quorem+0x114>
 8004e78:	3c01      	subs	r4, #1
 8004e7a:	f101 0714 	add.w	r7, r1, #20
 8004e7e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e82:	f100 0614 	add.w	r6, r0, #20
 8004e86:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e8a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e8e:	eb06 030c 	add.w	r3, r6, ip
 8004e92:	3501      	adds	r5, #1
 8004e94:	eb07 090c 	add.w	r9, r7, ip
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e9e:	b395      	cbz	r5, 8004f06 <quorem+0x9e>
 8004ea0:	f04f 0a00 	mov.w	sl, #0
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	46b6      	mov	lr, r6
 8004ea8:	46d3      	mov	fp, sl
 8004eaa:	f850 2b04 	ldr.w	r2, [r0], #4
 8004eae:	b293      	uxth	r3, r2
 8004eb0:	fb05 a303 	mla	r3, r5, r3, sl
 8004eb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	ebab 0303 	sub.w	r3, fp, r3
 8004ebe:	0c12      	lsrs	r2, r2, #16
 8004ec0:	f8de b000 	ldr.w	fp, [lr]
 8004ec4:	fb05 a202 	mla	r2, r5, r2, sl
 8004ec8:	fa13 f38b 	uxtah	r3, r3, fp
 8004ecc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004ed0:	fa1f fb82 	uxth.w	fp, r2
 8004ed4:	f8de 2000 	ldr.w	r2, [lr]
 8004ed8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ee6:	4581      	cmp	r9, r0
 8004ee8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004eec:	f84e 3b04 	str.w	r3, [lr], #4
 8004ef0:	d2db      	bcs.n	8004eaa <quorem+0x42>
 8004ef2:	f856 300c 	ldr.w	r3, [r6, ip]
 8004ef6:	b933      	cbnz	r3, 8004f06 <quorem+0x9e>
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	3b04      	subs	r3, #4
 8004efc:	429e      	cmp	r6, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	d330      	bcc.n	8004f64 <quorem+0xfc>
 8004f02:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f06:	4640      	mov	r0, r8
 8004f08:	f001 f83e 	bl	8005f88 <__mcmp>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	db25      	blt.n	8004f5c <quorem+0xf4>
 8004f10:	3501      	adds	r5, #1
 8004f12:	4630      	mov	r0, r6
 8004f14:	f04f 0c00 	mov.w	ip, #0
 8004f18:	f857 2b04 	ldr.w	r2, [r7], #4
 8004f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8004f20:	b293      	uxth	r3, r2
 8004f22:	ebac 0303 	sub.w	r3, ip, r3
 8004f26:	0c12      	lsrs	r2, r2, #16
 8004f28:	fa13 f38e 	uxtah	r3, r3, lr
 8004f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f3a:	45b9      	cmp	r9, r7
 8004f3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f40:	f840 3b04 	str.w	r3, [r0], #4
 8004f44:	d2e8      	bcs.n	8004f18 <quorem+0xb0>
 8004f46:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004f4a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004f4e:	b92a      	cbnz	r2, 8004f5c <quorem+0xf4>
 8004f50:	3b04      	subs	r3, #4
 8004f52:	429e      	cmp	r6, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	d30b      	bcc.n	8004f70 <quorem+0x108>
 8004f58:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	b003      	add	sp, #12
 8004f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	3b04      	subs	r3, #4
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	d1ca      	bne.n	8004f02 <quorem+0x9a>
 8004f6c:	3c01      	subs	r4, #1
 8004f6e:	e7c5      	b.n	8004efc <quorem+0x94>
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	3b04      	subs	r3, #4
 8004f74:	2a00      	cmp	r2, #0
 8004f76:	d1ef      	bne.n	8004f58 <quorem+0xf0>
 8004f78:	3c01      	subs	r4, #1
 8004f7a:	e7ea      	b.n	8004f52 <quorem+0xea>
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	e7ee      	b.n	8004f5e <quorem+0xf6>

08004f80 <_dtoa_r>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	ec57 6b10 	vmov	r6, r7, d0
 8004f88:	b097      	sub	sp, #92	; 0x5c
 8004f8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f8c:	9106      	str	r1, [sp, #24]
 8004f8e:	4604      	mov	r4, r0
 8004f90:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f92:	9312      	str	r3, [sp, #72]	; 0x48
 8004f94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f98:	e9cd 6700 	strd	r6, r7, [sp]
 8004f9c:	b93d      	cbnz	r5, 8004fae <_dtoa_r+0x2e>
 8004f9e:	2010      	movs	r0, #16
 8004fa0:	f000 fdb8 	bl	8005b14 <malloc>
 8004fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8004fa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004faa:	6005      	str	r5, [r0, #0]
 8004fac:	60c5      	str	r5, [r0, #12]
 8004fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb0:	6819      	ldr	r1, [r3, #0]
 8004fb2:	b151      	cbz	r1, 8004fca <_dtoa_r+0x4a>
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	604a      	str	r2, [r1, #4]
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4093      	lsls	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 fe01 	bl	8005bc6 <_Bfree>
 8004fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	1e3b      	subs	r3, r7, #0
 8004fcc:	bfbb      	ittet	lt
 8004fce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fd2:	9301      	strlt	r3, [sp, #4]
 8004fd4:	2300      	movge	r3, #0
 8004fd6:	2201      	movlt	r2, #1
 8004fd8:	bfac      	ite	ge
 8004fda:	f8c8 3000 	strge.w	r3, [r8]
 8004fde:	f8c8 2000 	strlt.w	r2, [r8]
 8004fe2:	4baf      	ldr	r3, [pc, #700]	; (80052a0 <_dtoa_r+0x320>)
 8004fe4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004fe8:	ea33 0308 	bics.w	r3, r3, r8
 8004fec:	d114      	bne.n	8005018 <_dtoa_r+0x98>
 8004fee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ff0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	9b00      	ldr	r3, [sp, #0]
 8004ff8:	b923      	cbnz	r3, 8005004 <_dtoa_r+0x84>
 8004ffa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ffe:	2800      	cmp	r0, #0
 8005000:	f000 8542 	beq.w	8005a88 <_dtoa_r+0xb08>
 8005004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005006:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80052b4 <_dtoa_r+0x334>
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8544 	beq.w	8005a98 <_dtoa_r+0xb18>
 8005010:	f10b 0303 	add.w	r3, fp, #3
 8005014:	f000 bd3e 	b.w	8005a94 <_dtoa_r+0xb14>
 8005018:	e9dd 6700 	ldrd	r6, r7, [sp]
 800501c:	2200      	movs	r2, #0
 800501e:	2300      	movs	r3, #0
 8005020:	4630      	mov	r0, r6
 8005022:	4639      	mov	r1, r7
 8005024:	f7fb fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 8005028:	4681      	mov	r9, r0
 800502a:	b168      	cbz	r0, 8005048 <_dtoa_r+0xc8>
 800502c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800502e:	2301      	movs	r3, #1
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8524 	beq.w	8005a82 <_dtoa_r+0xb02>
 800503a:	4b9a      	ldr	r3, [pc, #616]	; (80052a4 <_dtoa_r+0x324>)
 800503c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800503e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	f000 bd28 	b.w	8005a98 <_dtoa_r+0xb18>
 8005048:	aa14      	add	r2, sp, #80	; 0x50
 800504a:	a915      	add	r1, sp, #84	; 0x54
 800504c:	ec47 6b10 	vmov	d0, r6, r7
 8005050:	4620      	mov	r0, r4
 8005052:	f001 f810 	bl	8006076 <__d2b>
 8005056:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800505a:	9004      	str	r0, [sp, #16]
 800505c:	2d00      	cmp	r5, #0
 800505e:	d07c      	beq.n	800515a <_dtoa_r+0x1da>
 8005060:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005064:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005068:	46b2      	mov	sl, r6
 800506a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800506e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005072:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005076:	2200      	movs	r2, #0
 8005078:	4b8b      	ldr	r3, [pc, #556]	; (80052a8 <_dtoa_r+0x328>)
 800507a:	4650      	mov	r0, sl
 800507c:	4659      	mov	r1, fp
 800507e:	f7fb f90b 	bl	8000298 <__aeabi_dsub>
 8005082:	a381      	add	r3, pc, #516	; (adr r3, 8005288 <_dtoa_r+0x308>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb fabe 	bl	8000608 <__aeabi_dmul>
 800508c:	a380      	add	r3, pc, #512	; (adr r3, 8005290 <_dtoa_r+0x310>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fb f903 	bl	800029c <__adddf3>
 8005096:	4606      	mov	r6, r0
 8005098:	4628      	mov	r0, r5
 800509a:	460f      	mov	r7, r1
 800509c:	f7fb fa4a 	bl	8000534 <__aeabi_i2d>
 80050a0:	a37d      	add	r3, pc, #500	; (adr r3, 8005298 <_dtoa_r+0x318>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb faaf 	bl	8000608 <__aeabi_dmul>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4630      	mov	r0, r6
 80050b0:	4639      	mov	r1, r7
 80050b2:	f7fb f8f3 	bl	800029c <__adddf3>
 80050b6:	4606      	mov	r6, r0
 80050b8:	460f      	mov	r7, r1
 80050ba:	f7fb fd55 	bl	8000b68 <__aeabi_d2iz>
 80050be:	2200      	movs	r2, #0
 80050c0:	4682      	mov	sl, r0
 80050c2:	2300      	movs	r3, #0
 80050c4:	4630      	mov	r0, r6
 80050c6:	4639      	mov	r1, r7
 80050c8:	f7fb fd10 	bl	8000aec <__aeabi_dcmplt>
 80050cc:	b148      	cbz	r0, 80050e2 <_dtoa_r+0x162>
 80050ce:	4650      	mov	r0, sl
 80050d0:	f7fb fa30 	bl	8000534 <__aeabi_i2d>
 80050d4:	4632      	mov	r2, r6
 80050d6:	463b      	mov	r3, r7
 80050d8:	f7fb fcfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80050dc:	b908      	cbnz	r0, 80050e2 <_dtoa_r+0x162>
 80050de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050e2:	f1ba 0f16 	cmp.w	sl, #22
 80050e6:	d859      	bhi.n	800519c <_dtoa_r+0x21c>
 80050e8:	4970      	ldr	r1, [pc, #448]	; (80052ac <_dtoa_r+0x32c>)
 80050ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80050ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f6:	f7fb fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d050      	beq.n	80051a0 <_dtoa_r+0x220>
 80050fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005102:	2300      	movs	r3, #0
 8005104:	930f      	str	r3, [sp, #60]	; 0x3c
 8005106:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005108:	1b5d      	subs	r5, r3, r5
 800510a:	f1b5 0801 	subs.w	r8, r5, #1
 800510e:	bf49      	itett	mi
 8005110:	f1c5 0301 	rsbmi	r3, r5, #1
 8005114:	2300      	movpl	r3, #0
 8005116:	9305      	strmi	r3, [sp, #20]
 8005118:	f04f 0800 	movmi.w	r8, #0
 800511c:	bf58      	it	pl
 800511e:	9305      	strpl	r3, [sp, #20]
 8005120:	f1ba 0f00 	cmp.w	sl, #0
 8005124:	db3e      	blt.n	80051a4 <_dtoa_r+0x224>
 8005126:	2300      	movs	r3, #0
 8005128:	44d0      	add	r8, sl
 800512a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800512e:	9307      	str	r3, [sp, #28]
 8005130:	9b06      	ldr	r3, [sp, #24]
 8005132:	2b09      	cmp	r3, #9
 8005134:	f200 8090 	bhi.w	8005258 <_dtoa_r+0x2d8>
 8005138:	2b05      	cmp	r3, #5
 800513a:	bfc4      	itt	gt
 800513c:	3b04      	subgt	r3, #4
 800513e:	9306      	strgt	r3, [sp, #24]
 8005140:	9b06      	ldr	r3, [sp, #24]
 8005142:	f1a3 0302 	sub.w	r3, r3, #2
 8005146:	bfcc      	ite	gt
 8005148:	2500      	movgt	r5, #0
 800514a:	2501      	movle	r5, #1
 800514c:	2b03      	cmp	r3, #3
 800514e:	f200 808f 	bhi.w	8005270 <_dtoa_r+0x2f0>
 8005152:	e8df f003 	tbb	[pc, r3]
 8005156:	7f7d      	.short	0x7f7d
 8005158:	7131      	.short	0x7131
 800515a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800515e:	441d      	add	r5, r3
 8005160:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005164:	2820      	cmp	r0, #32
 8005166:	dd13      	ble.n	8005190 <_dtoa_r+0x210>
 8005168:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	fa08 f800 	lsl.w	r8, r8, r0
 8005172:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005176:	fa23 f000 	lsr.w	r0, r3, r0
 800517a:	ea48 0000 	orr.w	r0, r8, r0
 800517e:	f7fb f9c9 	bl	8000514 <__aeabi_ui2d>
 8005182:	2301      	movs	r3, #1
 8005184:	4682      	mov	sl, r0
 8005186:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800518a:	3d01      	subs	r5, #1
 800518c:	9313      	str	r3, [sp, #76]	; 0x4c
 800518e:	e772      	b.n	8005076 <_dtoa_r+0xf6>
 8005190:	9b00      	ldr	r3, [sp, #0]
 8005192:	f1c0 0020 	rsb	r0, r0, #32
 8005196:	fa03 f000 	lsl.w	r0, r3, r0
 800519a:	e7f0      	b.n	800517e <_dtoa_r+0x1fe>
 800519c:	2301      	movs	r3, #1
 800519e:	e7b1      	b.n	8005104 <_dtoa_r+0x184>
 80051a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80051a2:	e7b0      	b.n	8005106 <_dtoa_r+0x186>
 80051a4:	9b05      	ldr	r3, [sp, #20]
 80051a6:	eba3 030a 	sub.w	r3, r3, sl
 80051aa:	9305      	str	r3, [sp, #20]
 80051ac:	f1ca 0300 	rsb	r3, sl, #0
 80051b0:	9307      	str	r3, [sp, #28]
 80051b2:	2300      	movs	r3, #0
 80051b4:	930e      	str	r3, [sp, #56]	; 0x38
 80051b6:	e7bb      	b.n	8005130 <_dtoa_r+0x1b0>
 80051b8:	2301      	movs	r3, #1
 80051ba:	930a      	str	r3, [sp, #40]	; 0x28
 80051bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dd59      	ble.n	8005276 <_dtoa_r+0x2f6>
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	4699      	mov	r9, r3
 80051c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051c8:	2200      	movs	r2, #0
 80051ca:	6072      	str	r2, [r6, #4]
 80051cc:	2204      	movs	r2, #4
 80051ce:	f102 0014 	add.w	r0, r2, #20
 80051d2:	4298      	cmp	r0, r3
 80051d4:	6871      	ldr	r1, [r6, #4]
 80051d6:	d953      	bls.n	8005280 <_dtoa_r+0x300>
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 fcc0 	bl	8005b5e <_Balloc>
 80051de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e0:	6030      	str	r0, [r6, #0]
 80051e2:	f1b9 0f0e 	cmp.w	r9, #14
 80051e6:	f8d3 b000 	ldr.w	fp, [r3]
 80051ea:	f200 80e6 	bhi.w	80053ba <_dtoa_r+0x43a>
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	f000 80e3 	beq.w	80053ba <_dtoa_r+0x43a>
 80051f4:	ed9d 7b00 	vldr	d7, [sp]
 80051f8:	f1ba 0f00 	cmp.w	sl, #0
 80051fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005200:	dd74      	ble.n	80052ec <_dtoa_r+0x36c>
 8005202:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <_dtoa_r+0x32c>)
 8005204:	f00a 030f 	and.w	r3, sl, #15
 8005208:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800520c:	ed93 7b00 	vldr	d7, [r3]
 8005210:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005214:	06f0      	lsls	r0, r6, #27
 8005216:	ed8d 7b08 	vstr	d7, [sp, #32]
 800521a:	d565      	bpl.n	80052e8 <_dtoa_r+0x368>
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <_dtoa_r+0x330>)
 800521e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005222:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005226:	f7fb fb19 	bl	800085c <__aeabi_ddiv>
 800522a:	e9cd 0100 	strd	r0, r1, [sp]
 800522e:	f006 060f 	and.w	r6, r6, #15
 8005232:	2503      	movs	r5, #3
 8005234:	4f1e      	ldr	r7, [pc, #120]	; (80052b0 <_dtoa_r+0x330>)
 8005236:	e04c      	b.n	80052d2 <_dtoa_r+0x352>
 8005238:	2301      	movs	r3, #1
 800523a:	930a      	str	r3, [sp, #40]	; 0x28
 800523c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523e:	4453      	add	r3, sl
 8005240:	f103 0901 	add.w	r9, r3, #1
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	464b      	mov	r3, r9
 8005248:	2b01      	cmp	r3, #1
 800524a:	bfb8      	it	lt
 800524c:	2301      	movlt	r3, #1
 800524e:	e7ba      	b.n	80051c6 <_dtoa_r+0x246>
 8005250:	2300      	movs	r3, #0
 8005252:	e7b2      	b.n	80051ba <_dtoa_r+0x23a>
 8005254:	2300      	movs	r3, #0
 8005256:	e7f0      	b.n	800523a <_dtoa_r+0x2ba>
 8005258:	2501      	movs	r5, #1
 800525a:	2300      	movs	r3, #0
 800525c:	9306      	str	r3, [sp, #24]
 800525e:	950a      	str	r5, [sp, #40]	; 0x28
 8005260:	f04f 33ff 	mov.w	r3, #4294967295
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	4699      	mov	r9, r3
 8005268:	2200      	movs	r2, #0
 800526a:	2312      	movs	r3, #18
 800526c:	920b      	str	r2, [sp, #44]	; 0x2c
 800526e:	e7aa      	b.n	80051c6 <_dtoa_r+0x246>
 8005270:	2301      	movs	r3, #1
 8005272:	930a      	str	r3, [sp, #40]	; 0x28
 8005274:	e7f4      	b.n	8005260 <_dtoa_r+0x2e0>
 8005276:	2301      	movs	r3, #1
 8005278:	9302      	str	r3, [sp, #8]
 800527a:	4699      	mov	r9, r3
 800527c:	461a      	mov	r2, r3
 800527e:	e7f5      	b.n	800526c <_dtoa_r+0x2ec>
 8005280:	3101      	adds	r1, #1
 8005282:	6071      	str	r1, [r6, #4]
 8005284:	0052      	lsls	r2, r2, #1
 8005286:	e7a2      	b.n	80051ce <_dtoa_r+0x24e>
 8005288:	636f4361 	.word	0x636f4361
 800528c:	3fd287a7 	.word	0x3fd287a7
 8005290:	8b60c8b3 	.word	0x8b60c8b3
 8005294:	3fc68a28 	.word	0x3fc68a28
 8005298:	509f79fb 	.word	0x509f79fb
 800529c:	3fd34413 	.word	0x3fd34413
 80052a0:	7ff00000 	.word	0x7ff00000
 80052a4:	08006659 	.word	0x08006659
 80052a8:	3ff80000 	.word	0x3ff80000
 80052ac:	080066c0 	.word	0x080066c0
 80052b0:	08006698 	.word	0x08006698
 80052b4:	08006685 	.word	0x08006685
 80052b8:	07f1      	lsls	r1, r6, #31
 80052ba:	d508      	bpl.n	80052ce <_dtoa_r+0x34e>
 80052bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c4:	f7fb f9a0 	bl	8000608 <__aeabi_dmul>
 80052c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052cc:	3501      	adds	r5, #1
 80052ce:	1076      	asrs	r6, r6, #1
 80052d0:	3708      	adds	r7, #8
 80052d2:	2e00      	cmp	r6, #0
 80052d4:	d1f0      	bne.n	80052b8 <_dtoa_r+0x338>
 80052d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052de:	f7fb fabd 	bl	800085c <__aeabi_ddiv>
 80052e2:	e9cd 0100 	strd	r0, r1, [sp]
 80052e6:	e01a      	b.n	800531e <_dtoa_r+0x39e>
 80052e8:	2502      	movs	r5, #2
 80052ea:	e7a3      	b.n	8005234 <_dtoa_r+0x2b4>
 80052ec:	f000 80a0 	beq.w	8005430 <_dtoa_r+0x4b0>
 80052f0:	f1ca 0600 	rsb	r6, sl, #0
 80052f4:	4b9f      	ldr	r3, [pc, #636]	; (8005574 <_dtoa_r+0x5f4>)
 80052f6:	4fa0      	ldr	r7, [pc, #640]	; (8005578 <_dtoa_r+0x5f8>)
 80052f8:	f006 020f 	and.w	r2, r6, #15
 80052fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005308:	f7fb f97e 	bl	8000608 <__aeabi_dmul>
 800530c:	e9cd 0100 	strd	r0, r1, [sp]
 8005310:	1136      	asrs	r6, r6, #4
 8005312:	2300      	movs	r3, #0
 8005314:	2502      	movs	r5, #2
 8005316:	2e00      	cmp	r6, #0
 8005318:	d17f      	bne.n	800541a <_dtoa_r+0x49a>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e1      	bne.n	80052e2 <_dtoa_r+0x362>
 800531e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8087 	beq.w	8005434 <_dtoa_r+0x4b4>
 8005326:	e9dd 6700 	ldrd	r6, r7, [sp]
 800532a:	2200      	movs	r2, #0
 800532c:	4b93      	ldr	r3, [pc, #588]	; (800557c <_dtoa_r+0x5fc>)
 800532e:	4630      	mov	r0, r6
 8005330:	4639      	mov	r1, r7
 8005332:	f7fb fbdb 	bl	8000aec <__aeabi_dcmplt>
 8005336:	2800      	cmp	r0, #0
 8005338:	d07c      	beq.n	8005434 <_dtoa_r+0x4b4>
 800533a:	f1b9 0f00 	cmp.w	r9, #0
 800533e:	d079      	beq.n	8005434 <_dtoa_r+0x4b4>
 8005340:	9b02      	ldr	r3, [sp, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	dd35      	ble.n	80053b2 <_dtoa_r+0x432>
 8005346:	f10a 33ff 	add.w	r3, sl, #4294967295
 800534a:	9308      	str	r3, [sp, #32]
 800534c:	4639      	mov	r1, r7
 800534e:	2200      	movs	r2, #0
 8005350:	4b8b      	ldr	r3, [pc, #556]	; (8005580 <_dtoa_r+0x600>)
 8005352:	4630      	mov	r0, r6
 8005354:	f7fb f958 	bl	8000608 <__aeabi_dmul>
 8005358:	e9cd 0100 	strd	r0, r1, [sp]
 800535c:	9f02      	ldr	r7, [sp, #8]
 800535e:	3501      	adds	r5, #1
 8005360:	4628      	mov	r0, r5
 8005362:	f7fb f8e7 	bl	8000534 <__aeabi_i2d>
 8005366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800536a:	f7fb f94d 	bl	8000608 <__aeabi_dmul>
 800536e:	2200      	movs	r2, #0
 8005370:	4b84      	ldr	r3, [pc, #528]	; (8005584 <_dtoa_r+0x604>)
 8005372:	f7fa ff93 	bl	800029c <__adddf3>
 8005376:	4605      	mov	r5, r0
 8005378:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800537c:	2f00      	cmp	r7, #0
 800537e:	d15d      	bne.n	800543c <_dtoa_r+0x4bc>
 8005380:	2200      	movs	r2, #0
 8005382:	4b81      	ldr	r3, [pc, #516]	; (8005588 <_dtoa_r+0x608>)
 8005384:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005388:	f7fa ff86 	bl	8000298 <__aeabi_dsub>
 800538c:	462a      	mov	r2, r5
 800538e:	4633      	mov	r3, r6
 8005390:	e9cd 0100 	strd	r0, r1, [sp]
 8005394:	f7fb fbc8 	bl	8000b28 <__aeabi_dcmpgt>
 8005398:	2800      	cmp	r0, #0
 800539a:	f040 8288 	bne.w	80058ae <_dtoa_r+0x92e>
 800539e:	462a      	mov	r2, r5
 80053a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80053a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053a8:	f7fb fba0 	bl	8000aec <__aeabi_dcmplt>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	f040 827c 	bne.w	80058aa <_dtoa_r+0x92a>
 80053b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053b6:	e9cd 2300 	strd	r2, r3, [sp]
 80053ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f2c0 8150 	blt.w	8005662 <_dtoa_r+0x6e2>
 80053c2:	f1ba 0f0e 	cmp.w	sl, #14
 80053c6:	f300 814c 	bgt.w	8005662 <_dtoa_r+0x6e2>
 80053ca:	4b6a      	ldr	r3, [pc, #424]	; (8005574 <_dtoa_r+0x5f4>)
 80053cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053d0:	ed93 7b00 	vldr	d7, [r3]
 80053d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053dc:	f280 80d8 	bge.w	8005590 <_dtoa_r+0x610>
 80053e0:	f1b9 0f00 	cmp.w	r9, #0
 80053e4:	f300 80d4 	bgt.w	8005590 <_dtoa_r+0x610>
 80053e8:	f040 825e 	bne.w	80058a8 <_dtoa_r+0x928>
 80053ec:	2200      	movs	r2, #0
 80053ee:	4b66      	ldr	r3, [pc, #408]	; (8005588 <_dtoa_r+0x608>)
 80053f0:	ec51 0b17 	vmov	r0, r1, d7
 80053f4:	f7fb f908 	bl	8000608 <__aeabi_dmul>
 80053f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053fc:	f7fb fb8a 	bl	8000b14 <__aeabi_dcmpge>
 8005400:	464f      	mov	r7, r9
 8005402:	464e      	mov	r6, r9
 8005404:	2800      	cmp	r0, #0
 8005406:	f040 8234 	bne.w	8005872 <_dtoa_r+0x8f2>
 800540a:	2331      	movs	r3, #49	; 0x31
 800540c:	f10b 0501 	add.w	r5, fp, #1
 8005410:	f88b 3000 	strb.w	r3, [fp]
 8005414:	f10a 0a01 	add.w	sl, sl, #1
 8005418:	e22f      	b.n	800587a <_dtoa_r+0x8fa>
 800541a:	07f2      	lsls	r2, r6, #31
 800541c:	d505      	bpl.n	800542a <_dtoa_r+0x4aa>
 800541e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005422:	f7fb f8f1 	bl	8000608 <__aeabi_dmul>
 8005426:	3501      	adds	r5, #1
 8005428:	2301      	movs	r3, #1
 800542a:	1076      	asrs	r6, r6, #1
 800542c:	3708      	adds	r7, #8
 800542e:	e772      	b.n	8005316 <_dtoa_r+0x396>
 8005430:	2502      	movs	r5, #2
 8005432:	e774      	b.n	800531e <_dtoa_r+0x39e>
 8005434:	f8cd a020 	str.w	sl, [sp, #32]
 8005438:	464f      	mov	r7, r9
 800543a:	e791      	b.n	8005360 <_dtoa_r+0x3e0>
 800543c:	4b4d      	ldr	r3, [pc, #308]	; (8005574 <_dtoa_r+0x5f4>)
 800543e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005442:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d047      	beq.n	80054dc <_dtoa_r+0x55c>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	2000      	movs	r0, #0
 8005452:	494e      	ldr	r1, [pc, #312]	; (800558c <_dtoa_r+0x60c>)
 8005454:	f7fb fa02 	bl	800085c <__aeabi_ddiv>
 8005458:	462a      	mov	r2, r5
 800545a:	4633      	mov	r3, r6
 800545c:	f7fa ff1c 	bl	8000298 <__aeabi_dsub>
 8005460:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005464:	465d      	mov	r5, fp
 8005466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800546a:	f7fb fb7d 	bl	8000b68 <__aeabi_d2iz>
 800546e:	4606      	mov	r6, r0
 8005470:	f7fb f860 	bl	8000534 <__aeabi_i2d>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800547c:	f7fa ff0c 	bl	8000298 <__aeabi_dsub>
 8005480:	3630      	adds	r6, #48	; 0x30
 8005482:	f805 6b01 	strb.w	r6, [r5], #1
 8005486:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800548a:	e9cd 0100 	strd	r0, r1, [sp]
 800548e:	f7fb fb2d 	bl	8000aec <__aeabi_dcmplt>
 8005492:	2800      	cmp	r0, #0
 8005494:	d163      	bne.n	800555e <_dtoa_r+0x5de>
 8005496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800549a:	2000      	movs	r0, #0
 800549c:	4937      	ldr	r1, [pc, #220]	; (800557c <_dtoa_r+0x5fc>)
 800549e:	f7fa fefb 	bl	8000298 <__aeabi_dsub>
 80054a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054a6:	f7fb fb21 	bl	8000aec <__aeabi_dcmplt>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	f040 80b7 	bne.w	800561e <_dtoa_r+0x69e>
 80054b0:	eba5 030b 	sub.w	r3, r5, fp
 80054b4:	429f      	cmp	r7, r3
 80054b6:	f77f af7c 	ble.w	80053b2 <_dtoa_r+0x432>
 80054ba:	2200      	movs	r2, #0
 80054bc:	4b30      	ldr	r3, [pc, #192]	; (8005580 <_dtoa_r+0x600>)
 80054be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c2:	f7fb f8a1 	bl	8000608 <__aeabi_dmul>
 80054c6:	2200      	movs	r2, #0
 80054c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80054cc:	4b2c      	ldr	r3, [pc, #176]	; (8005580 <_dtoa_r+0x600>)
 80054ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054d2:	f7fb f899 	bl	8000608 <__aeabi_dmul>
 80054d6:	e9cd 0100 	strd	r0, r1, [sp]
 80054da:	e7c4      	b.n	8005466 <_dtoa_r+0x4e6>
 80054dc:	462a      	mov	r2, r5
 80054de:	4633      	mov	r3, r6
 80054e0:	f7fb f892 	bl	8000608 <__aeabi_dmul>
 80054e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80054e8:	eb0b 0507 	add.w	r5, fp, r7
 80054ec:	465e      	mov	r6, fp
 80054ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054f2:	f7fb fb39 	bl	8000b68 <__aeabi_d2iz>
 80054f6:	4607      	mov	r7, r0
 80054f8:	f7fb f81c 	bl	8000534 <__aeabi_i2d>
 80054fc:	3730      	adds	r7, #48	; 0x30
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005506:	f7fa fec7 	bl	8000298 <__aeabi_dsub>
 800550a:	f806 7b01 	strb.w	r7, [r6], #1
 800550e:	42ae      	cmp	r6, r5
 8005510:	e9cd 0100 	strd	r0, r1, [sp]
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	d126      	bne.n	8005568 <_dtoa_r+0x5e8>
 800551a:	4b1c      	ldr	r3, [pc, #112]	; (800558c <_dtoa_r+0x60c>)
 800551c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005520:	f7fa febc 	bl	800029c <__adddf3>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800552c:	f7fb fafc 	bl	8000b28 <__aeabi_dcmpgt>
 8005530:	2800      	cmp	r0, #0
 8005532:	d174      	bne.n	800561e <_dtoa_r+0x69e>
 8005534:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005538:	2000      	movs	r0, #0
 800553a:	4914      	ldr	r1, [pc, #80]	; (800558c <_dtoa_r+0x60c>)
 800553c:	f7fa feac 	bl	8000298 <__aeabi_dsub>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005548:	f7fb fad0 	bl	8000aec <__aeabi_dcmplt>
 800554c:	2800      	cmp	r0, #0
 800554e:	f43f af30 	beq.w	80053b2 <_dtoa_r+0x432>
 8005552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005556:	2b30      	cmp	r3, #48	; 0x30
 8005558:	f105 32ff 	add.w	r2, r5, #4294967295
 800555c:	d002      	beq.n	8005564 <_dtoa_r+0x5e4>
 800555e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005562:	e04a      	b.n	80055fa <_dtoa_r+0x67a>
 8005564:	4615      	mov	r5, r2
 8005566:	e7f4      	b.n	8005552 <_dtoa_r+0x5d2>
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <_dtoa_r+0x600>)
 800556a:	f7fb f84d 	bl	8000608 <__aeabi_dmul>
 800556e:	e9cd 0100 	strd	r0, r1, [sp]
 8005572:	e7bc      	b.n	80054ee <_dtoa_r+0x56e>
 8005574:	080066c0 	.word	0x080066c0
 8005578:	08006698 	.word	0x08006698
 800557c:	3ff00000 	.word	0x3ff00000
 8005580:	40240000 	.word	0x40240000
 8005584:	401c0000 	.word	0x401c0000
 8005588:	40140000 	.word	0x40140000
 800558c:	3fe00000 	.word	0x3fe00000
 8005590:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005594:	465d      	mov	r5, fp
 8005596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800559a:	4630      	mov	r0, r6
 800559c:	4639      	mov	r1, r7
 800559e:	f7fb f95d 	bl	800085c <__aeabi_ddiv>
 80055a2:	f7fb fae1 	bl	8000b68 <__aeabi_d2iz>
 80055a6:	4680      	mov	r8, r0
 80055a8:	f7fa ffc4 	bl	8000534 <__aeabi_i2d>
 80055ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b0:	f7fb f82a 	bl	8000608 <__aeabi_dmul>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4630      	mov	r0, r6
 80055ba:	4639      	mov	r1, r7
 80055bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80055c0:	f7fa fe6a 	bl	8000298 <__aeabi_dsub>
 80055c4:	f805 6b01 	strb.w	r6, [r5], #1
 80055c8:	eba5 060b 	sub.w	r6, r5, fp
 80055cc:	45b1      	cmp	r9, r6
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	d139      	bne.n	8005648 <_dtoa_r+0x6c8>
 80055d4:	f7fa fe62 	bl	800029c <__adddf3>
 80055d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055dc:	4606      	mov	r6, r0
 80055de:	460f      	mov	r7, r1
 80055e0:	f7fb faa2 	bl	8000b28 <__aeabi_dcmpgt>
 80055e4:	b9c8      	cbnz	r0, 800561a <_dtoa_r+0x69a>
 80055e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ea:	4630      	mov	r0, r6
 80055ec:	4639      	mov	r1, r7
 80055ee:	f7fb fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 80055f2:	b110      	cbz	r0, 80055fa <_dtoa_r+0x67a>
 80055f4:	f018 0f01 	tst.w	r8, #1
 80055f8:	d10f      	bne.n	800561a <_dtoa_r+0x69a>
 80055fa:	9904      	ldr	r1, [sp, #16]
 80055fc:	4620      	mov	r0, r4
 80055fe:	f000 fae2 	bl	8005bc6 <_Bfree>
 8005602:	2300      	movs	r3, #0
 8005604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005606:	702b      	strb	r3, [r5, #0]
 8005608:	f10a 0301 	add.w	r3, sl, #1
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8241 	beq.w	8005a98 <_dtoa_r+0xb18>
 8005616:	601d      	str	r5, [r3, #0]
 8005618:	e23e      	b.n	8005a98 <_dtoa_r+0xb18>
 800561a:	f8cd a020 	str.w	sl, [sp, #32]
 800561e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005622:	2a39      	cmp	r2, #57	; 0x39
 8005624:	f105 33ff 	add.w	r3, r5, #4294967295
 8005628:	d108      	bne.n	800563c <_dtoa_r+0x6bc>
 800562a:	459b      	cmp	fp, r3
 800562c:	d10a      	bne.n	8005644 <_dtoa_r+0x6c4>
 800562e:	9b08      	ldr	r3, [sp, #32]
 8005630:	3301      	adds	r3, #1
 8005632:	9308      	str	r3, [sp, #32]
 8005634:	2330      	movs	r3, #48	; 0x30
 8005636:	f88b 3000 	strb.w	r3, [fp]
 800563a:	465b      	mov	r3, fp
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	3201      	adds	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e78c      	b.n	800555e <_dtoa_r+0x5de>
 8005644:	461d      	mov	r5, r3
 8005646:	e7ea      	b.n	800561e <_dtoa_r+0x69e>
 8005648:	2200      	movs	r2, #0
 800564a:	4b9b      	ldr	r3, [pc, #620]	; (80058b8 <_dtoa_r+0x938>)
 800564c:	f7fa ffdc 	bl	8000608 <__aeabi_dmul>
 8005650:	2200      	movs	r2, #0
 8005652:	2300      	movs	r3, #0
 8005654:	4606      	mov	r6, r0
 8005656:	460f      	mov	r7, r1
 8005658:	f7fb fa3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800565c:	2800      	cmp	r0, #0
 800565e:	d09a      	beq.n	8005596 <_dtoa_r+0x616>
 8005660:	e7cb      	b.n	80055fa <_dtoa_r+0x67a>
 8005662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005664:	2a00      	cmp	r2, #0
 8005666:	f000 808b 	beq.w	8005780 <_dtoa_r+0x800>
 800566a:	9a06      	ldr	r2, [sp, #24]
 800566c:	2a01      	cmp	r2, #1
 800566e:	dc6e      	bgt.n	800574e <_dtoa_r+0x7ce>
 8005670:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005672:	2a00      	cmp	r2, #0
 8005674:	d067      	beq.n	8005746 <_dtoa_r+0x7c6>
 8005676:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800567a:	9f07      	ldr	r7, [sp, #28]
 800567c:	9d05      	ldr	r5, [sp, #20]
 800567e:	9a05      	ldr	r2, [sp, #20]
 8005680:	2101      	movs	r1, #1
 8005682:	441a      	add	r2, r3
 8005684:	4620      	mov	r0, r4
 8005686:	9205      	str	r2, [sp, #20]
 8005688:	4498      	add	r8, r3
 800568a:	f000 fb3c 	bl	8005d06 <__i2b>
 800568e:	4606      	mov	r6, r0
 8005690:	2d00      	cmp	r5, #0
 8005692:	dd0c      	ble.n	80056ae <_dtoa_r+0x72e>
 8005694:	f1b8 0f00 	cmp.w	r8, #0
 8005698:	dd09      	ble.n	80056ae <_dtoa_r+0x72e>
 800569a:	4545      	cmp	r5, r8
 800569c:	9a05      	ldr	r2, [sp, #20]
 800569e:	462b      	mov	r3, r5
 80056a0:	bfa8      	it	ge
 80056a2:	4643      	movge	r3, r8
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	9205      	str	r2, [sp, #20]
 80056a8:	1aed      	subs	r5, r5, r3
 80056aa:	eba8 0803 	sub.w	r8, r8, r3
 80056ae:	9b07      	ldr	r3, [sp, #28]
 80056b0:	b1eb      	cbz	r3, 80056ee <_dtoa_r+0x76e>
 80056b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d067      	beq.n	8005788 <_dtoa_r+0x808>
 80056b8:	b18f      	cbz	r7, 80056de <_dtoa_r+0x75e>
 80056ba:	4631      	mov	r1, r6
 80056bc:	463a      	mov	r2, r7
 80056be:	4620      	mov	r0, r4
 80056c0:	f000 fbc0 	bl	8005e44 <__pow5mult>
 80056c4:	9a04      	ldr	r2, [sp, #16]
 80056c6:	4601      	mov	r1, r0
 80056c8:	4606      	mov	r6, r0
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 fb24 	bl	8005d18 <__multiply>
 80056d0:	9904      	ldr	r1, [sp, #16]
 80056d2:	9008      	str	r0, [sp, #32]
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 fa76 	bl	8005bc6 <_Bfree>
 80056da:	9b08      	ldr	r3, [sp, #32]
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	9b07      	ldr	r3, [sp, #28]
 80056e0:	1bda      	subs	r2, r3, r7
 80056e2:	d004      	beq.n	80056ee <_dtoa_r+0x76e>
 80056e4:	9904      	ldr	r1, [sp, #16]
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 fbac 	bl	8005e44 <__pow5mult>
 80056ec:	9004      	str	r0, [sp, #16]
 80056ee:	2101      	movs	r1, #1
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fb08 	bl	8005d06 <__i2b>
 80056f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f8:	4607      	mov	r7, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 81d0 	beq.w	8005aa0 <_dtoa_r+0xb20>
 8005700:	461a      	mov	r2, r3
 8005702:	4601      	mov	r1, r0
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fb9d 	bl	8005e44 <__pow5mult>
 800570a:	9b06      	ldr	r3, [sp, #24]
 800570c:	2b01      	cmp	r3, #1
 800570e:	4607      	mov	r7, r0
 8005710:	dc40      	bgt.n	8005794 <_dtoa_r+0x814>
 8005712:	9b00      	ldr	r3, [sp, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d139      	bne.n	800578c <_dtoa_r+0x80c>
 8005718:	9b01      	ldr	r3, [sp, #4]
 800571a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800571e:	2b00      	cmp	r3, #0
 8005720:	d136      	bne.n	8005790 <_dtoa_r+0x810>
 8005722:	9b01      	ldr	r3, [sp, #4]
 8005724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005728:	0d1b      	lsrs	r3, r3, #20
 800572a:	051b      	lsls	r3, r3, #20
 800572c:	b12b      	cbz	r3, 800573a <_dtoa_r+0x7ba>
 800572e:	9b05      	ldr	r3, [sp, #20]
 8005730:	3301      	adds	r3, #1
 8005732:	9305      	str	r3, [sp, #20]
 8005734:	f108 0801 	add.w	r8, r8, #1
 8005738:	2301      	movs	r3, #1
 800573a:	9307      	str	r3, [sp, #28]
 800573c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800573e:	2b00      	cmp	r3, #0
 8005740:	d12a      	bne.n	8005798 <_dtoa_r+0x818>
 8005742:	2001      	movs	r0, #1
 8005744:	e030      	b.n	80057a8 <_dtoa_r+0x828>
 8005746:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005748:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800574c:	e795      	b.n	800567a <_dtoa_r+0x6fa>
 800574e:	9b07      	ldr	r3, [sp, #28]
 8005750:	f109 37ff 	add.w	r7, r9, #4294967295
 8005754:	42bb      	cmp	r3, r7
 8005756:	bfbf      	itttt	lt
 8005758:	9b07      	ldrlt	r3, [sp, #28]
 800575a:	9707      	strlt	r7, [sp, #28]
 800575c:	1afa      	sublt	r2, r7, r3
 800575e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005760:	bfbb      	ittet	lt
 8005762:	189b      	addlt	r3, r3, r2
 8005764:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005766:	1bdf      	subge	r7, r3, r7
 8005768:	2700      	movlt	r7, #0
 800576a:	f1b9 0f00 	cmp.w	r9, #0
 800576e:	bfb5      	itete	lt
 8005770:	9b05      	ldrlt	r3, [sp, #20]
 8005772:	9d05      	ldrge	r5, [sp, #20]
 8005774:	eba3 0509 	sublt.w	r5, r3, r9
 8005778:	464b      	movge	r3, r9
 800577a:	bfb8      	it	lt
 800577c:	2300      	movlt	r3, #0
 800577e:	e77e      	b.n	800567e <_dtoa_r+0x6fe>
 8005780:	9f07      	ldr	r7, [sp, #28]
 8005782:	9d05      	ldr	r5, [sp, #20]
 8005784:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005786:	e783      	b.n	8005690 <_dtoa_r+0x710>
 8005788:	9a07      	ldr	r2, [sp, #28]
 800578a:	e7ab      	b.n	80056e4 <_dtoa_r+0x764>
 800578c:	2300      	movs	r3, #0
 800578e:	e7d4      	b.n	800573a <_dtoa_r+0x7ba>
 8005790:	9b00      	ldr	r3, [sp, #0]
 8005792:	e7d2      	b.n	800573a <_dtoa_r+0x7ba>
 8005794:	2300      	movs	r3, #0
 8005796:	9307      	str	r3, [sp, #28]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800579e:	6918      	ldr	r0, [r3, #16]
 80057a0:	f000 fa63 	bl	8005c6a <__hi0bits>
 80057a4:	f1c0 0020 	rsb	r0, r0, #32
 80057a8:	4440      	add	r0, r8
 80057aa:	f010 001f 	ands.w	r0, r0, #31
 80057ae:	d047      	beq.n	8005840 <_dtoa_r+0x8c0>
 80057b0:	f1c0 0320 	rsb	r3, r0, #32
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	dd3b      	ble.n	8005830 <_dtoa_r+0x8b0>
 80057b8:	9b05      	ldr	r3, [sp, #20]
 80057ba:	f1c0 001c 	rsb	r0, r0, #28
 80057be:	4403      	add	r3, r0
 80057c0:	9305      	str	r3, [sp, #20]
 80057c2:	4405      	add	r5, r0
 80057c4:	4480      	add	r8, r0
 80057c6:	9b05      	ldr	r3, [sp, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	dd05      	ble.n	80057d8 <_dtoa_r+0x858>
 80057cc:	461a      	mov	r2, r3
 80057ce:	9904      	ldr	r1, [sp, #16]
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 fb85 	bl	8005ee0 <__lshift>
 80057d6:	9004      	str	r0, [sp, #16]
 80057d8:	f1b8 0f00 	cmp.w	r8, #0
 80057dc:	dd05      	ble.n	80057ea <_dtoa_r+0x86a>
 80057de:	4639      	mov	r1, r7
 80057e0:	4642      	mov	r2, r8
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 fb7c 	bl	8005ee0 <__lshift>
 80057e8:	4607      	mov	r7, r0
 80057ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ec:	b353      	cbz	r3, 8005844 <_dtoa_r+0x8c4>
 80057ee:	4639      	mov	r1, r7
 80057f0:	9804      	ldr	r0, [sp, #16]
 80057f2:	f000 fbc9 	bl	8005f88 <__mcmp>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	da24      	bge.n	8005844 <_dtoa_r+0x8c4>
 80057fa:	2300      	movs	r3, #0
 80057fc:	220a      	movs	r2, #10
 80057fe:	9904      	ldr	r1, [sp, #16]
 8005800:	4620      	mov	r0, r4
 8005802:	f000 f9f7 	bl	8005bf4 <__multadd>
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	9004      	str	r0, [sp, #16]
 800580a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 814d 	beq.w	8005aae <_dtoa_r+0xb2e>
 8005814:	2300      	movs	r3, #0
 8005816:	4631      	mov	r1, r6
 8005818:	220a      	movs	r2, #10
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f9ea 	bl	8005bf4 <__multadd>
 8005820:	9b02      	ldr	r3, [sp, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	4606      	mov	r6, r0
 8005826:	dc4f      	bgt.n	80058c8 <_dtoa_r+0x948>
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	2b02      	cmp	r3, #2
 800582c:	dd4c      	ble.n	80058c8 <_dtoa_r+0x948>
 800582e:	e011      	b.n	8005854 <_dtoa_r+0x8d4>
 8005830:	d0c9      	beq.n	80057c6 <_dtoa_r+0x846>
 8005832:	9a05      	ldr	r2, [sp, #20]
 8005834:	331c      	adds	r3, #28
 8005836:	441a      	add	r2, r3
 8005838:	9205      	str	r2, [sp, #20]
 800583a:	441d      	add	r5, r3
 800583c:	4498      	add	r8, r3
 800583e:	e7c2      	b.n	80057c6 <_dtoa_r+0x846>
 8005840:	4603      	mov	r3, r0
 8005842:	e7f6      	b.n	8005832 <_dtoa_r+0x8b2>
 8005844:	f1b9 0f00 	cmp.w	r9, #0
 8005848:	dc38      	bgt.n	80058bc <_dtoa_r+0x93c>
 800584a:	9b06      	ldr	r3, [sp, #24]
 800584c:	2b02      	cmp	r3, #2
 800584e:	dd35      	ble.n	80058bc <_dtoa_r+0x93c>
 8005850:	f8cd 9008 	str.w	r9, [sp, #8]
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	b963      	cbnz	r3, 8005872 <_dtoa_r+0x8f2>
 8005858:	4639      	mov	r1, r7
 800585a:	2205      	movs	r2, #5
 800585c:	4620      	mov	r0, r4
 800585e:	f000 f9c9 	bl	8005bf4 <__multadd>
 8005862:	4601      	mov	r1, r0
 8005864:	4607      	mov	r7, r0
 8005866:	9804      	ldr	r0, [sp, #16]
 8005868:	f000 fb8e 	bl	8005f88 <__mcmp>
 800586c:	2800      	cmp	r0, #0
 800586e:	f73f adcc 	bgt.w	800540a <_dtoa_r+0x48a>
 8005872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005874:	465d      	mov	r5, fp
 8005876:	ea6f 0a03 	mvn.w	sl, r3
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	4639      	mov	r1, r7
 8005880:	4620      	mov	r0, r4
 8005882:	f000 f9a0 	bl	8005bc6 <_Bfree>
 8005886:	2e00      	cmp	r6, #0
 8005888:	f43f aeb7 	beq.w	80055fa <_dtoa_r+0x67a>
 800588c:	f1b9 0f00 	cmp.w	r9, #0
 8005890:	d005      	beq.n	800589e <_dtoa_r+0x91e>
 8005892:	45b1      	cmp	r9, r6
 8005894:	d003      	beq.n	800589e <_dtoa_r+0x91e>
 8005896:	4649      	mov	r1, r9
 8005898:	4620      	mov	r0, r4
 800589a:	f000 f994 	bl	8005bc6 <_Bfree>
 800589e:	4631      	mov	r1, r6
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 f990 	bl	8005bc6 <_Bfree>
 80058a6:	e6a8      	b.n	80055fa <_dtoa_r+0x67a>
 80058a8:	2700      	movs	r7, #0
 80058aa:	463e      	mov	r6, r7
 80058ac:	e7e1      	b.n	8005872 <_dtoa_r+0x8f2>
 80058ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80058b2:	463e      	mov	r6, r7
 80058b4:	e5a9      	b.n	800540a <_dtoa_r+0x48a>
 80058b6:	bf00      	nop
 80058b8:	40240000 	.word	0x40240000
 80058bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058be:	f8cd 9008 	str.w	r9, [sp, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80fa 	beq.w	8005abc <_dtoa_r+0xb3c>
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	dd05      	ble.n	80058d8 <_dtoa_r+0x958>
 80058cc:	4631      	mov	r1, r6
 80058ce:	462a      	mov	r2, r5
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fb05 	bl	8005ee0 <__lshift>
 80058d6:	4606      	mov	r6, r0
 80058d8:	9b07      	ldr	r3, [sp, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d04c      	beq.n	8005978 <_dtoa_r+0x9f8>
 80058de:	6871      	ldr	r1, [r6, #4]
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 f93c 	bl	8005b5e <_Balloc>
 80058e6:	6932      	ldr	r2, [r6, #16]
 80058e8:	3202      	adds	r2, #2
 80058ea:	4605      	mov	r5, r0
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	f106 010c 	add.w	r1, r6, #12
 80058f2:	300c      	adds	r0, #12
 80058f4:	f000 f928 	bl	8005b48 <memcpy>
 80058f8:	2201      	movs	r2, #1
 80058fa:	4629      	mov	r1, r5
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 faef 	bl	8005ee0 <__lshift>
 8005902:	9b00      	ldr	r3, [sp, #0]
 8005904:	f8cd b014 	str.w	fp, [sp, #20]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	46b1      	mov	r9, r6
 800590e:	9307      	str	r3, [sp, #28]
 8005910:	4606      	mov	r6, r0
 8005912:	4639      	mov	r1, r7
 8005914:	9804      	ldr	r0, [sp, #16]
 8005916:	f7ff faa7 	bl	8004e68 <quorem>
 800591a:	4649      	mov	r1, r9
 800591c:	4605      	mov	r5, r0
 800591e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005922:	9804      	ldr	r0, [sp, #16]
 8005924:	f000 fb30 	bl	8005f88 <__mcmp>
 8005928:	4632      	mov	r2, r6
 800592a:	9000      	str	r0, [sp, #0]
 800592c:	4639      	mov	r1, r7
 800592e:	4620      	mov	r0, r4
 8005930:	f000 fb44 	bl	8005fbc <__mdiff>
 8005934:	68c3      	ldr	r3, [r0, #12]
 8005936:	4602      	mov	r2, r0
 8005938:	bb03      	cbnz	r3, 800597c <_dtoa_r+0x9fc>
 800593a:	4601      	mov	r1, r0
 800593c:	9008      	str	r0, [sp, #32]
 800593e:	9804      	ldr	r0, [sp, #16]
 8005940:	f000 fb22 	bl	8005f88 <__mcmp>
 8005944:	9a08      	ldr	r2, [sp, #32]
 8005946:	4603      	mov	r3, r0
 8005948:	4611      	mov	r1, r2
 800594a:	4620      	mov	r0, r4
 800594c:	9308      	str	r3, [sp, #32]
 800594e:	f000 f93a 	bl	8005bc6 <_Bfree>
 8005952:	9b08      	ldr	r3, [sp, #32]
 8005954:	b9a3      	cbnz	r3, 8005980 <_dtoa_r+0xa00>
 8005956:	9a06      	ldr	r2, [sp, #24]
 8005958:	b992      	cbnz	r2, 8005980 <_dtoa_r+0xa00>
 800595a:	9a07      	ldr	r2, [sp, #28]
 800595c:	b982      	cbnz	r2, 8005980 <_dtoa_r+0xa00>
 800595e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005962:	d029      	beq.n	80059b8 <_dtoa_r+0xa38>
 8005964:	9b00      	ldr	r3, [sp, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	dd01      	ble.n	800596e <_dtoa_r+0x9ee>
 800596a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800596e:	9b05      	ldr	r3, [sp, #20]
 8005970:	1c5d      	adds	r5, r3, #1
 8005972:	f883 8000 	strb.w	r8, [r3]
 8005976:	e782      	b.n	800587e <_dtoa_r+0x8fe>
 8005978:	4630      	mov	r0, r6
 800597a:	e7c2      	b.n	8005902 <_dtoa_r+0x982>
 800597c:	2301      	movs	r3, #1
 800597e:	e7e3      	b.n	8005948 <_dtoa_r+0x9c8>
 8005980:	9a00      	ldr	r2, [sp, #0]
 8005982:	2a00      	cmp	r2, #0
 8005984:	db04      	blt.n	8005990 <_dtoa_r+0xa10>
 8005986:	d125      	bne.n	80059d4 <_dtoa_r+0xa54>
 8005988:	9a06      	ldr	r2, [sp, #24]
 800598a:	bb1a      	cbnz	r2, 80059d4 <_dtoa_r+0xa54>
 800598c:	9a07      	ldr	r2, [sp, #28]
 800598e:	bb0a      	cbnz	r2, 80059d4 <_dtoa_r+0xa54>
 8005990:	2b00      	cmp	r3, #0
 8005992:	ddec      	ble.n	800596e <_dtoa_r+0x9ee>
 8005994:	2201      	movs	r2, #1
 8005996:	9904      	ldr	r1, [sp, #16]
 8005998:	4620      	mov	r0, r4
 800599a:	f000 faa1 	bl	8005ee0 <__lshift>
 800599e:	4639      	mov	r1, r7
 80059a0:	9004      	str	r0, [sp, #16]
 80059a2:	f000 faf1 	bl	8005f88 <__mcmp>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	dc03      	bgt.n	80059b2 <_dtoa_r+0xa32>
 80059aa:	d1e0      	bne.n	800596e <_dtoa_r+0x9ee>
 80059ac:	f018 0f01 	tst.w	r8, #1
 80059b0:	d0dd      	beq.n	800596e <_dtoa_r+0x9ee>
 80059b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059b6:	d1d8      	bne.n	800596a <_dtoa_r+0x9ea>
 80059b8:	9b05      	ldr	r3, [sp, #20]
 80059ba:	9a05      	ldr	r2, [sp, #20]
 80059bc:	1c5d      	adds	r5, r3, #1
 80059be:	2339      	movs	r3, #57	; 0x39
 80059c0:	7013      	strb	r3, [r2, #0]
 80059c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059c6:	2b39      	cmp	r3, #57	; 0x39
 80059c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80059cc:	d04f      	beq.n	8005a6e <_dtoa_r+0xaee>
 80059ce:	3301      	adds	r3, #1
 80059d0:	7013      	strb	r3, [r2, #0]
 80059d2:	e754      	b.n	800587e <_dtoa_r+0x8fe>
 80059d4:	9a05      	ldr	r2, [sp, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f102 0501 	add.w	r5, r2, #1
 80059dc:	dd06      	ble.n	80059ec <_dtoa_r+0xa6c>
 80059de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059e2:	d0e9      	beq.n	80059b8 <_dtoa_r+0xa38>
 80059e4:	f108 0801 	add.w	r8, r8, #1
 80059e8:	9b05      	ldr	r3, [sp, #20]
 80059ea:	e7c2      	b.n	8005972 <_dtoa_r+0x9f2>
 80059ec:	9a02      	ldr	r2, [sp, #8]
 80059ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80059f2:	eba5 030b 	sub.w	r3, r5, fp
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d021      	beq.n	8005a3e <_dtoa_r+0xabe>
 80059fa:	2300      	movs	r3, #0
 80059fc:	220a      	movs	r2, #10
 80059fe:	9904      	ldr	r1, [sp, #16]
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 f8f7 	bl	8005bf4 <__multadd>
 8005a06:	45b1      	cmp	r9, r6
 8005a08:	9004      	str	r0, [sp, #16]
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	f04f 020a 	mov.w	r2, #10
 8005a12:	4649      	mov	r1, r9
 8005a14:	4620      	mov	r0, r4
 8005a16:	d105      	bne.n	8005a24 <_dtoa_r+0xaa4>
 8005a18:	f000 f8ec 	bl	8005bf4 <__multadd>
 8005a1c:	4681      	mov	r9, r0
 8005a1e:	4606      	mov	r6, r0
 8005a20:	9505      	str	r5, [sp, #20]
 8005a22:	e776      	b.n	8005912 <_dtoa_r+0x992>
 8005a24:	f000 f8e6 	bl	8005bf4 <__multadd>
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4681      	mov	r9, r0
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	220a      	movs	r2, #10
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 f8df 	bl	8005bf4 <__multadd>
 8005a36:	4606      	mov	r6, r0
 8005a38:	e7f2      	b.n	8005a20 <_dtoa_r+0xaa0>
 8005a3a:	f04f 0900 	mov.w	r9, #0
 8005a3e:	2201      	movs	r2, #1
 8005a40:	9904      	ldr	r1, [sp, #16]
 8005a42:	4620      	mov	r0, r4
 8005a44:	f000 fa4c 	bl	8005ee0 <__lshift>
 8005a48:	4639      	mov	r1, r7
 8005a4a:	9004      	str	r0, [sp, #16]
 8005a4c:	f000 fa9c 	bl	8005f88 <__mcmp>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	dcb6      	bgt.n	80059c2 <_dtoa_r+0xa42>
 8005a54:	d102      	bne.n	8005a5c <_dtoa_r+0xadc>
 8005a56:	f018 0f01 	tst.w	r8, #1
 8005a5a:	d1b2      	bne.n	80059c2 <_dtoa_r+0xa42>
 8005a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a60:	2b30      	cmp	r3, #48	; 0x30
 8005a62:	f105 32ff 	add.w	r2, r5, #4294967295
 8005a66:	f47f af0a 	bne.w	800587e <_dtoa_r+0x8fe>
 8005a6a:	4615      	mov	r5, r2
 8005a6c:	e7f6      	b.n	8005a5c <_dtoa_r+0xadc>
 8005a6e:	4593      	cmp	fp, r2
 8005a70:	d105      	bne.n	8005a7e <_dtoa_r+0xafe>
 8005a72:	2331      	movs	r3, #49	; 0x31
 8005a74:	f10a 0a01 	add.w	sl, sl, #1
 8005a78:	f88b 3000 	strb.w	r3, [fp]
 8005a7c:	e6ff      	b.n	800587e <_dtoa_r+0x8fe>
 8005a7e:	4615      	mov	r5, r2
 8005a80:	e79f      	b.n	80059c2 <_dtoa_r+0xa42>
 8005a82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005ae8 <_dtoa_r+0xb68>
 8005a86:	e007      	b.n	8005a98 <_dtoa_r+0xb18>
 8005a88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005aec <_dtoa_r+0xb6c>
 8005a8e:	b11b      	cbz	r3, 8005a98 <_dtoa_r+0xb18>
 8005a90:	f10b 0308 	add.w	r3, fp, #8
 8005a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	4658      	mov	r0, fp
 8005a9a:	b017      	add	sp, #92	; 0x5c
 8005a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa0:	9b06      	ldr	r3, [sp, #24]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	f77f ae35 	ble.w	8005712 <_dtoa_r+0x792>
 8005aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aaa:	9307      	str	r3, [sp, #28]
 8005aac:	e649      	b.n	8005742 <_dtoa_r+0x7c2>
 8005aae:	9b02      	ldr	r3, [sp, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	dc03      	bgt.n	8005abc <_dtoa_r+0xb3c>
 8005ab4:	9b06      	ldr	r3, [sp, #24]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	f73f aecc 	bgt.w	8005854 <_dtoa_r+0x8d4>
 8005abc:	465d      	mov	r5, fp
 8005abe:	4639      	mov	r1, r7
 8005ac0:	9804      	ldr	r0, [sp, #16]
 8005ac2:	f7ff f9d1 	bl	8004e68 <quorem>
 8005ac6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005aca:	f805 8b01 	strb.w	r8, [r5], #1
 8005ace:	9a02      	ldr	r2, [sp, #8]
 8005ad0:	eba5 030b 	sub.w	r3, r5, fp
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	ddb0      	ble.n	8005a3a <_dtoa_r+0xaba>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	220a      	movs	r2, #10
 8005adc:	9904      	ldr	r1, [sp, #16]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 f888 	bl	8005bf4 <__multadd>
 8005ae4:	9004      	str	r0, [sp, #16]
 8005ae6:	e7ea      	b.n	8005abe <_dtoa_r+0xb3e>
 8005ae8:	08006658 	.word	0x08006658
 8005aec:	0800667c 	.word	0x0800667c

08005af0 <__locale_ctype_ptr_l>:
 8005af0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005af4:	4770      	bx	lr
	...

08005af8 <_localeconv_r>:
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <_localeconv_r+0x14>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a18      	ldr	r0, [r3, #32]
 8005afe:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <_localeconv_r+0x18>)
 8005b00:	2800      	cmp	r0, #0
 8005b02:	bf08      	it	eq
 8005b04:	4618      	moveq	r0, r3
 8005b06:	30f0      	adds	r0, #240	; 0xf0
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000014 	.word	0x20000014
 8005b10:	20000078 	.word	0x20000078

08005b14 <malloc>:
 8005b14:	4b02      	ldr	r3, [pc, #8]	; (8005b20 <malloc+0xc>)
 8005b16:	4601      	mov	r1, r0
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	f000 bb57 	b.w	80061cc <_malloc_r>
 8005b1e:	bf00      	nop
 8005b20:	20000014 	.word	0x20000014

08005b24 <__ascii_mbtowc>:
 8005b24:	b082      	sub	sp, #8
 8005b26:	b901      	cbnz	r1, 8005b2a <__ascii_mbtowc+0x6>
 8005b28:	a901      	add	r1, sp, #4
 8005b2a:	b142      	cbz	r2, 8005b3e <__ascii_mbtowc+0x1a>
 8005b2c:	b14b      	cbz	r3, 8005b42 <__ascii_mbtowc+0x1e>
 8005b2e:	7813      	ldrb	r3, [r2, #0]
 8005b30:	600b      	str	r3, [r1, #0]
 8005b32:	7812      	ldrb	r2, [r2, #0]
 8005b34:	1c10      	adds	r0, r2, #0
 8005b36:	bf18      	it	ne
 8005b38:	2001      	movne	r0, #1
 8005b3a:	b002      	add	sp, #8
 8005b3c:	4770      	bx	lr
 8005b3e:	4610      	mov	r0, r2
 8005b40:	e7fb      	b.n	8005b3a <__ascii_mbtowc+0x16>
 8005b42:	f06f 0001 	mvn.w	r0, #1
 8005b46:	e7f8      	b.n	8005b3a <__ascii_mbtowc+0x16>

08005b48 <memcpy>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	1e43      	subs	r3, r0, #1
 8005b4c:	440a      	add	r2, r1
 8005b4e:	4291      	cmp	r1, r2
 8005b50:	d100      	bne.n	8005b54 <memcpy+0xc>
 8005b52:	bd10      	pop	{r4, pc}
 8005b54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5c:	e7f7      	b.n	8005b4e <memcpy+0x6>

08005b5e <_Balloc>:
 8005b5e:	b570      	push	{r4, r5, r6, lr}
 8005b60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b62:	4604      	mov	r4, r0
 8005b64:	460e      	mov	r6, r1
 8005b66:	b93d      	cbnz	r5, 8005b78 <_Balloc+0x1a>
 8005b68:	2010      	movs	r0, #16
 8005b6a:	f7ff ffd3 	bl	8005b14 <malloc>
 8005b6e:	6260      	str	r0, [r4, #36]	; 0x24
 8005b70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b74:	6005      	str	r5, [r0, #0]
 8005b76:	60c5      	str	r5, [r0, #12]
 8005b78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b7a:	68eb      	ldr	r3, [r5, #12]
 8005b7c:	b183      	cbz	r3, 8005ba0 <_Balloc+0x42>
 8005b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b86:	b9b8      	cbnz	r0, 8005bb8 <_Balloc+0x5a>
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f506 	lsl.w	r5, r1, r6
 8005b8e:	1d6a      	adds	r2, r5, #5
 8005b90:	0092      	lsls	r2, r2, #2
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 fabe 	bl	8006114 <_calloc_r>
 8005b98:	b160      	cbz	r0, 8005bb4 <_Balloc+0x56>
 8005b9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b9e:	e00e      	b.n	8005bbe <_Balloc+0x60>
 8005ba0:	2221      	movs	r2, #33	; 0x21
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fab5 	bl	8006114 <_calloc_r>
 8005baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bac:	60e8      	str	r0, [r5, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e4      	bne.n	8005b7e <_Balloc+0x20>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	6802      	ldr	r2, [r0, #0]
 8005bba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bc4:	e7f7      	b.n	8005bb6 <_Balloc+0x58>

08005bc6 <_Bfree>:
 8005bc6:	b570      	push	{r4, r5, r6, lr}
 8005bc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460d      	mov	r5, r1
 8005bce:	b93c      	cbnz	r4, 8005be0 <_Bfree+0x1a>
 8005bd0:	2010      	movs	r0, #16
 8005bd2:	f7ff ff9f 	bl	8005b14 <malloc>
 8005bd6:	6270      	str	r0, [r6, #36]	; 0x24
 8005bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bdc:	6004      	str	r4, [r0, #0]
 8005bde:	60c4      	str	r4, [r0, #12]
 8005be0:	b13d      	cbz	r5, 8005bf2 <_Bfree+0x2c>
 8005be2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005be4:	686a      	ldr	r2, [r5, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bec:	6029      	str	r1, [r5, #0]
 8005bee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}

08005bf4 <__multadd>:
 8005bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf8:	690d      	ldr	r5, [r1, #16]
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	f101 0c14 	add.w	ip, r1, #20
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8dc 0000 	ldr.w	r0, [ip]
 8005c0a:	b281      	uxth	r1, r0
 8005c0c:	fb02 7101 	mla	r1, r2, r1, r7
 8005c10:	0c0f      	lsrs	r7, r1, #16
 8005c12:	0c00      	lsrs	r0, r0, #16
 8005c14:	fb02 7000 	mla	r0, r2, r0, r7
 8005c18:	b289      	uxth	r1, r1
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c20:	429d      	cmp	r5, r3
 8005c22:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c26:	f84c 1b04 	str.w	r1, [ip], #4
 8005c2a:	dcec      	bgt.n	8005c06 <__multadd+0x12>
 8005c2c:	b1d7      	cbz	r7, 8005c64 <__multadd+0x70>
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dc12      	bgt.n	8005c5a <__multadd+0x66>
 8005c34:	6861      	ldr	r1, [r4, #4]
 8005c36:	4630      	mov	r0, r6
 8005c38:	3101      	adds	r1, #1
 8005c3a:	f7ff ff90 	bl	8005b5e <_Balloc>
 8005c3e:	6922      	ldr	r2, [r4, #16]
 8005c40:	3202      	adds	r2, #2
 8005c42:	f104 010c 	add.w	r1, r4, #12
 8005c46:	4680      	mov	r8, r0
 8005c48:	0092      	lsls	r2, r2, #2
 8005c4a:	300c      	adds	r0, #12
 8005c4c:	f7ff ff7c 	bl	8005b48 <memcpy>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff ffb7 	bl	8005bc6 <_Bfree>
 8005c58:	4644      	mov	r4, r8
 8005c5a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c5e:	3501      	adds	r5, #1
 8005c60:	615f      	str	r7, [r3, #20]
 8005c62:	6125      	str	r5, [r4, #16]
 8005c64:	4620      	mov	r0, r4
 8005c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c6a <__hi0bits>:
 8005c6a:	0c02      	lsrs	r2, r0, #16
 8005c6c:	0412      	lsls	r2, r2, #16
 8005c6e:	4603      	mov	r3, r0
 8005c70:	b9b2      	cbnz	r2, 8005ca0 <__hi0bits+0x36>
 8005c72:	0403      	lsls	r3, r0, #16
 8005c74:	2010      	movs	r0, #16
 8005c76:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c7a:	bf04      	itt	eq
 8005c7c:	021b      	lsleq	r3, r3, #8
 8005c7e:	3008      	addeq	r0, #8
 8005c80:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c84:	bf04      	itt	eq
 8005c86:	011b      	lsleq	r3, r3, #4
 8005c88:	3004      	addeq	r0, #4
 8005c8a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c8e:	bf04      	itt	eq
 8005c90:	009b      	lsleq	r3, r3, #2
 8005c92:	3002      	addeq	r0, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	db06      	blt.n	8005ca6 <__hi0bits+0x3c>
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	d503      	bpl.n	8005ca4 <__hi0bits+0x3a>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	4770      	bx	lr
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e7e8      	b.n	8005c76 <__hi0bits+0xc>
 8005ca4:	2020      	movs	r0, #32
 8005ca6:	4770      	bx	lr

08005ca8 <__lo0bits>:
 8005ca8:	6803      	ldr	r3, [r0, #0]
 8005caa:	f013 0207 	ands.w	r2, r3, #7
 8005cae:	4601      	mov	r1, r0
 8005cb0:	d00b      	beq.n	8005cca <__lo0bits+0x22>
 8005cb2:	07da      	lsls	r2, r3, #31
 8005cb4:	d423      	bmi.n	8005cfe <__lo0bits+0x56>
 8005cb6:	0798      	lsls	r0, r3, #30
 8005cb8:	bf49      	itett	mi
 8005cba:	085b      	lsrmi	r3, r3, #1
 8005cbc:	089b      	lsrpl	r3, r3, #2
 8005cbe:	2001      	movmi	r0, #1
 8005cc0:	600b      	strmi	r3, [r1, #0]
 8005cc2:	bf5c      	itt	pl
 8005cc4:	600b      	strpl	r3, [r1, #0]
 8005cc6:	2002      	movpl	r0, #2
 8005cc8:	4770      	bx	lr
 8005cca:	b298      	uxth	r0, r3
 8005ccc:	b9a8      	cbnz	r0, 8005cfa <__lo0bits+0x52>
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	2010      	movs	r0, #16
 8005cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cd6:	bf04      	itt	eq
 8005cd8:	0a1b      	lsreq	r3, r3, #8
 8005cda:	3008      	addeq	r0, #8
 8005cdc:	071a      	lsls	r2, r3, #28
 8005cde:	bf04      	itt	eq
 8005ce0:	091b      	lsreq	r3, r3, #4
 8005ce2:	3004      	addeq	r0, #4
 8005ce4:	079a      	lsls	r2, r3, #30
 8005ce6:	bf04      	itt	eq
 8005ce8:	089b      	lsreq	r3, r3, #2
 8005cea:	3002      	addeq	r0, #2
 8005cec:	07da      	lsls	r2, r3, #31
 8005cee:	d402      	bmi.n	8005cf6 <__lo0bits+0x4e>
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	d006      	beq.n	8005d02 <__lo0bits+0x5a>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	600b      	str	r3, [r1, #0]
 8005cf8:	4770      	bx	lr
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	e7e9      	b.n	8005cd2 <__lo0bits+0x2a>
 8005cfe:	2000      	movs	r0, #0
 8005d00:	4770      	bx	lr
 8005d02:	2020      	movs	r0, #32
 8005d04:	4770      	bx	lr

08005d06 <__i2b>:
 8005d06:	b510      	push	{r4, lr}
 8005d08:	460c      	mov	r4, r1
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	f7ff ff27 	bl	8005b5e <_Balloc>
 8005d10:	2201      	movs	r2, #1
 8005d12:	6144      	str	r4, [r0, #20]
 8005d14:	6102      	str	r2, [r0, #16]
 8005d16:	bd10      	pop	{r4, pc}

08005d18 <__multiply>:
 8005d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	4614      	mov	r4, r2
 8005d1e:	690a      	ldr	r2, [r1, #16]
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	bfb8      	it	lt
 8005d26:	460b      	movlt	r3, r1
 8005d28:	4688      	mov	r8, r1
 8005d2a:	bfbc      	itt	lt
 8005d2c:	46a0      	movlt	r8, r4
 8005d2e:	461c      	movlt	r4, r3
 8005d30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d40:	eb07 0609 	add.w	r6, r7, r9
 8005d44:	42b3      	cmp	r3, r6
 8005d46:	bfb8      	it	lt
 8005d48:	3101      	addlt	r1, #1
 8005d4a:	f7ff ff08 	bl	8005b5e <_Balloc>
 8005d4e:	f100 0514 	add.w	r5, r0, #20
 8005d52:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005d56:	462b      	mov	r3, r5
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4573      	cmp	r3, lr
 8005d5c:	d316      	bcc.n	8005d8c <__multiply+0x74>
 8005d5e:	f104 0214 	add.w	r2, r4, #20
 8005d62:	f108 0114 	add.w	r1, r8, #20
 8005d66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	9b00      	ldr	r3, [sp, #0]
 8005d72:	9201      	str	r2, [sp, #4]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d80c      	bhi.n	8005d92 <__multiply+0x7a>
 8005d78:	2e00      	cmp	r6, #0
 8005d7a:	dd03      	ble.n	8005d84 <__multiply+0x6c>
 8005d7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d05d      	beq.n	8005e40 <__multiply+0x128>
 8005d84:	6106      	str	r6, [r0, #16]
 8005d86:	b003      	add	sp, #12
 8005d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8c:	f843 2b04 	str.w	r2, [r3], #4
 8005d90:	e7e3      	b.n	8005d5a <__multiply+0x42>
 8005d92:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d96:	f1bb 0f00 	cmp.w	fp, #0
 8005d9a:	d023      	beq.n	8005de4 <__multiply+0xcc>
 8005d9c:	4689      	mov	r9, r1
 8005d9e:	46ac      	mov	ip, r5
 8005da0:	f04f 0800 	mov.w	r8, #0
 8005da4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005da8:	f8dc a000 	ldr.w	sl, [ip]
 8005dac:	b2a3      	uxth	r3, r4
 8005dae:	fa1f fa8a 	uxth.w	sl, sl
 8005db2:	fb0b a303 	mla	r3, fp, r3, sl
 8005db6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005dba:	f8dc 4000 	ldr.w	r4, [ip]
 8005dbe:	4443      	add	r3, r8
 8005dc0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005dc4:	fb0b 840a 	mla	r4, fp, sl, r8
 8005dc8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005dcc:	46e2      	mov	sl, ip
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005dd4:	454f      	cmp	r7, r9
 8005dd6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005dda:	f84a 3b04 	str.w	r3, [sl], #4
 8005dde:	d82b      	bhi.n	8005e38 <__multiply+0x120>
 8005de0:	f8cc 8004 	str.w	r8, [ip, #4]
 8005de4:	9b01      	ldr	r3, [sp, #4]
 8005de6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005dea:	3204      	adds	r2, #4
 8005dec:	f1ba 0f00 	cmp.w	sl, #0
 8005df0:	d020      	beq.n	8005e34 <__multiply+0x11c>
 8005df2:	682b      	ldr	r3, [r5, #0]
 8005df4:	4689      	mov	r9, r1
 8005df6:	46a8      	mov	r8, r5
 8005df8:	f04f 0b00 	mov.w	fp, #0
 8005dfc:	f8b9 c000 	ldrh.w	ip, [r9]
 8005e00:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005e04:	fb0a 440c 	mla	r4, sl, ip, r4
 8005e08:	445c      	add	r4, fp
 8005e0a:	46c4      	mov	ip, r8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e12:	f84c 3b04 	str.w	r3, [ip], #4
 8005e16:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e1a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	fb0a b303 	mla	r3, sl, r3, fp
 8005e24:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e28:	454f      	cmp	r7, r9
 8005e2a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e2e:	d805      	bhi.n	8005e3c <__multiply+0x124>
 8005e30:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e34:	3504      	adds	r5, #4
 8005e36:	e79b      	b.n	8005d70 <__multiply+0x58>
 8005e38:	46d4      	mov	ip, sl
 8005e3a:	e7b3      	b.n	8005da4 <__multiply+0x8c>
 8005e3c:	46e0      	mov	r8, ip
 8005e3e:	e7dd      	b.n	8005dfc <__multiply+0xe4>
 8005e40:	3e01      	subs	r6, #1
 8005e42:	e799      	b.n	8005d78 <__multiply+0x60>

08005e44 <__pow5mult>:
 8005e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e48:	4615      	mov	r5, r2
 8005e4a:	f012 0203 	ands.w	r2, r2, #3
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	d007      	beq.n	8005e64 <__pow5mult+0x20>
 8005e54:	3a01      	subs	r2, #1
 8005e56:	4c21      	ldr	r4, [pc, #132]	; (8005edc <__pow5mult+0x98>)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e5e:	f7ff fec9 	bl	8005bf4 <__multadd>
 8005e62:	4607      	mov	r7, r0
 8005e64:	10ad      	asrs	r5, r5, #2
 8005e66:	d035      	beq.n	8005ed4 <__pow5mult+0x90>
 8005e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e6a:	b93c      	cbnz	r4, 8005e7c <__pow5mult+0x38>
 8005e6c:	2010      	movs	r0, #16
 8005e6e:	f7ff fe51 	bl	8005b14 <malloc>
 8005e72:	6270      	str	r0, [r6, #36]	; 0x24
 8005e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e78:	6004      	str	r4, [r0, #0]
 8005e7a:	60c4      	str	r4, [r0, #12]
 8005e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e84:	b94c      	cbnz	r4, 8005e9a <__pow5mult+0x56>
 8005e86:	f240 2171 	movw	r1, #625	; 0x271
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7ff ff3b 	bl	8005d06 <__i2b>
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e96:	4604      	mov	r4, r0
 8005e98:	6003      	str	r3, [r0, #0]
 8005e9a:	f04f 0800 	mov.w	r8, #0
 8005e9e:	07eb      	lsls	r3, r5, #31
 8005ea0:	d50a      	bpl.n	8005eb8 <__pow5mult+0x74>
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7ff ff36 	bl	8005d18 <__multiply>
 8005eac:	4639      	mov	r1, r7
 8005eae:	4681      	mov	r9, r0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7ff fe88 	bl	8005bc6 <_Bfree>
 8005eb6:	464f      	mov	r7, r9
 8005eb8:	106d      	asrs	r5, r5, #1
 8005eba:	d00b      	beq.n	8005ed4 <__pow5mult+0x90>
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	b938      	cbnz	r0, 8005ed0 <__pow5mult+0x8c>
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7ff ff27 	bl	8005d18 <__multiply>
 8005eca:	6020      	str	r0, [r4, #0]
 8005ecc:	f8c0 8000 	str.w	r8, [r0]
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	e7e4      	b.n	8005e9e <__pow5mult+0x5a>
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eda:	bf00      	nop
 8005edc:	08006788 	.word	0x08006788

08005ee0 <__lshift>:
 8005ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	6849      	ldr	r1, [r1, #4]
 8005eee:	eb0a 0903 	add.w	r9, sl, r3
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	4616      	mov	r6, r2
 8005ef8:	f109 0501 	add.w	r5, r9, #1
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	db32      	blt.n	8005f66 <__lshift+0x86>
 8005f00:	4638      	mov	r0, r7
 8005f02:	f7ff fe2c 	bl	8005b5e <_Balloc>
 8005f06:	2300      	movs	r3, #0
 8005f08:	4680      	mov	r8, r0
 8005f0a:	f100 0114 	add.w	r1, r0, #20
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4553      	cmp	r3, sl
 8005f12:	db2b      	blt.n	8005f6c <__lshift+0x8c>
 8005f14:	6920      	ldr	r0, [r4, #16]
 8005f16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f1a:	f104 0314 	add.w	r3, r4, #20
 8005f1e:	f016 021f 	ands.w	r2, r6, #31
 8005f22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f2a:	d025      	beq.n	8005f78 <__lshift+0x98>
 8005f2c:	f1c2 0e20 	rsb	lr, r2, #32
 8005f30:	2000      	movs	r0, #0
 8005f32:	681e      	ldr	r6, [r3, #0]
 8005f34:	468a      	mov	sl, r1
 8005f36:	4096      	lsls	r6, r2
 8005f38:	4330      	orrs	r0, r6
 8005f3a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005f42:	459c      	cmp	ip, r3
 8005f44:	fa20 f00e 	lsr.w	r0, r0, lr
 8005f48:	d814      	bhi.n	8005f74 <__lshift+0x94>
 8005f4a:	6048      	str	r0, [r1, #4]
 8005f4c:	b108      	cbz	r0, 8005f52 <__lshift+0x72>
 8005f4e:	f109 0502 	add.w	r5, r9, #2
 8005f52:	3d01      	subs	r5, #1
 8005f54:	4638      	mov	r0, r7
 8005f56:	f8c8 5010 	str.w	r5, [r8, #16]
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	f7ff fe33 	bl	8005bc6 <_Bfree>
 8005f60:	4640      	mov	r0, r8
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	3101      	adds	r1, #1
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	e7c7      	b.n	8005efc <__lshift+0x1c>
 8005f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f70:	3301      	adds	r3, #1
 8005f72:	e7cd      	b.n	8005f10 <__lshift+0x30>
 8005f74:	4651      	mov	r1, sl
 8005f76:	e7dc      	b.n	8005f32 <__lshift+0x52>
 8005f78:	3904      	subs	r1, #4
 8005f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f82:	459c      	cmp	ip, r3
 8005f84:	d8f9      	bhi.n	8005f7a <__lshift+0x9a>
 8005f86:	e7e4      	b.n	8005f52 <__lshift+0x72>

08005f88 <__mcmp>:
 8005f88:	6903      	ldr	r3, [r0, #16]
 8005f8a:	690a      	ldr	r2, [r1, #16]
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	b530      	push	{r4, r5, lr}
 8005f90:	d10c      	bne.n	8005fac <__mcmp+0x24>
 8005f92:	0092      	lsls	r2, r2, #2
 8005f94:	3014      	adds	r0, #20
 8005f96:	3114      	adds	r1, #20
 8005f98:	1884      	adds	r4, r0, r2
 8005f9a:	4411      	add	r1, r2
 8005f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fa4:	4295      	cmp	r5, r2
 8005fa6:	d003      	beq.n	8005fb0 <__mcmp+0x28>
 8005fa8:	d305      	bcc.n	8005fb6 <__mcmp+0x2e>
 8005faa:	2301      	movs	r3, #1
 8005fac:	4618      	mov	r0, r3
 8005fae:	bd30      	pop	{r4, r5, pc}
 8005fb0:	42a0      	cmp	r0, r4
 8005fb2:	d3f3      	bcc.n	8005f9c <__mcmp+0x14>
 8005fb4:	e7fa      	b.n	8005fac <__mcmp+0x24>
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	e7f7      	b.n	8005fac <__mcmp+0x24>

08005fbc <__mdiff>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	460d      	mov	r5, r1
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	4614      	mov	r4, r2
 8005fca:	f7ff ffdd 	bl	8005f88 <__mcmp>
 8005fce:	1e06      	subs	r6, r0, #0
 8005fd0:	d108      	bne.n	8005fe4 <__mdiff+0x28>
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	f7ff fdc2 	bl	8005b5e <_Balloc>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe4:	bfa4      	itt	ge
 8005fe6:	4623      	movge	r3, r4
 8005fe8:	462c      	movge	r4, r5
 8005fea:	4638      	mov	r0, r7
 8005fec:	6861      	ldr	r1, [r4, #4]
 8005fee:	bfa6      	itte	ge
 8005ff0:	461d      	movge	r5, r3
 8005ff2:	2600      	movge	r6, #0
 8005ff4:	2601      	movlt	r6, #1
 8005ff6:	f7ff fdb2 	bl	8005b5e <_Balloc>
 8005ffa:	692b      	ldr	r3, [r5, #16]
 8005ffc:	60c6      	str	r6, [r0, #12]
 8005ffe:	6926      	ldr	r6, [r4, #16]
 8006000:	f105 0914 	add.w	r9, r5, #20
 8006004:	f104 0214 	add.w	r2, r4, #20
 8006008:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800600c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006010:	f100 0514 	add.w	r5, r0, #20
 8006014:	f04f 0e00 	mov.w	lr, #0
 8006018:	f852 ab04 	ldr.w	sl, [r2], #4
 800601c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006020:	fa1e f18a 	uxtah	r1, lr, sl
 8006024:	b2a3      	uxth	r3, r4
 8006026:	1ac9      	subs	r1, r1, r3
 8006028:	0c23      	lsrs	r3, r4, #16
 800602a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800602e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006032:	b289      	uxth	r1, r1
 8006034:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006038:	45c8      	cmp	r8, r9
 800603a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800603e:	4694      	mov	ip, r2
 8006040:	f845 3b04 	str.w	r3, [r5], #4
 8006044:	d8e8      	bhi.n	8006018 <__mdiff+0x5c>
 8006046:	45bc      	cmp	ip, r7
 8006048:	d304      	bcc.n	8006054 <__mdiff+0x98>
 800604a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800604e:	b183      	cbz	r3, 8006072 <__mdiff+0xb6>
 8006050:	6106      	str	r6, [r0, #16]
 8006052:	e7c5      	b.n	8005fe0 <__mdiff+0x24>
 8006054:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006058:	fa1e f381 	uxtah	r3, lr, r1
 800605c:	141a      	asrs	r2, r3, #16
 800605e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006062:	b29b      	uxth	r3, r3
 8006064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006068:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800606c:	f845 3b04 	str.w	r3, [r5], #4
 8006070:	e7e9      	b.n	8006046 <__mdiff+0x8a>
 8006072:	3e01      	subs	r6, #1
 8006074:	e7e9      	b.n	800604a <__mdiff+0x8e>

08006076 <__d2b>:
 8006076:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800607a:	460e      	mov	r6, r1
 800607c:	2101      	movs	r1, #1
 800607e:	ec59 8b10 	vmov	r8, r9, d0
 8006082:	4615      	mov	r5, r2
 8006084:	f7ff fd6b 	bl	8005b5e <_Balloc>
 8006088:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800608c:	4607      	mov	r7, r0
 800608e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006092:	bb34      	cbnz	r4, 80060e2 <__d2b+0x6c>
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	f1b8 0300 	subs.w	r3, r8, #0
 800609a:	d027      	beq.n	80060ec <__d2b+0x76>
 800609c:	a802      	add	r0, sp, #8
 800609e:	f840 3d08 	str.w	r3, [r0, #-8]!
 80060a2:	f7ff fe01 	bl	8005ca8 <__lo0bits>
 80060a6:	9900      	ldr	r1, [sp, #0]
 80060a8:	b1f0      	cbz	r0, 80060e8 <__d2b+0x72>
 80060aa:	9a01      	ldr	r2, [sp, #4]
 80060ac:	f1c0 0320 	rsb	r3, r0, #32
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	430b      	orrs	r3, r1
 80060b6:	40c2      	lsrs	r2, r0
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	9201      	str	r2, [sp, #4]
 80060bc:	9b01      	ldr	r3, [sp, #4]
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf14      	ite	ne
 80060c4:	2102      	movne	r1, #2
 80060c6:	2101      	moveq	r1, #1
 80060c8:	6139      	str	r1, [r7, #16]
 80060ca:	b1c4      	cbz	r4, 80060fe <__d2b+0x88>
 80060cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80060d0:	4404      	add	r4, r0
 80060d2:	6034      	str	r4, [r6, #0]
 80060d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060d8:	6028      	str	r0, [r5, #0]
 80060da:	4638      	mov	r0, r7
 80060dc:	b003      	add	sp, #12
 80060de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e6:	e7d5      	b.n	8006094 <__d2b+0x1e>
 80060e8:	6179      	str	r1, [r7, #20]
 80060ea:	e7e7      	b.n	80060bc <__d2b+0x46>
 80060ec:	a801      	add	r0, sp, #4
 80060ee:	f7ff fddb 	bl	8005ca8 <__lo0bits>
 80060f2:	9b01      	ldr	r3, [sp, #4]
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	2101      	movs	r1, #1
 80060f8:	6139      	str	r1, [r7, #16]
 80060fa:	3020      	adds	r0, #32
 80060fc:	e7e5      	b.n	80060ca <__d2b+0x54>
 80060fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006102:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006106:	6030      	str	r0, [r6, #0]
 8006108:	6918      	ldr	r0, [r3, #16]
 800610a:	f7ff fdae 	bl	8005c6a <__hi0bits>
 800610e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006112:	e7e1      	b.n	80060d8 <__d2b+0x62>

08006114 <_calloc_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	fb02 f401 	mul.w	r4, r2, r1
 800611a:	4621      	mov	r1, r4
 800611c:	f000 f856 	bl	80061cc <_malloc_r>
 8006120:	4605      	mov	r5, r0
 8006122:	b118      	cbz	r0, 800612c <_calloc_r+0x18>
 8006124:	4622      	mov	r2, r4
 8006126:	2100      	movs	r1, #0
 8006128:	f7fe f988 	bl	800443c <memset>
 800612c:	4628      	mov	r0, r5
 800612e:	bd38      	pop	{r3, r4, r5, pc}

08006130 <_free_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4605      	mov	r5, r0
 8006134:	2900      	cmp	r1, #0
 8006136:	d045      	beq.n	80061c4 <_free_r+0x94>
 8006138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613c:	1f0c      	subs	r4, r1, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfb8      	it	lt
 8006142:	18e4      	addlt	r4, r4, r3
 8006144:	f000 fa24 	bl	8006590 <__malloc_lock>
 8006148:	4a1f      	ldr	r2, [pc, #124]	; (80061c8 <_free_r+0x98>)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	4610      	mov	r0, r2
 800614e:	b933      	cbnz	r3, 800615e <_free_r+0x2e>
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	6014      	str	r4, [r2, #0]
 8006154:	4628      	mov	r0, r5
 8006156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800615a:	f000 ba1a 	b.w	8006592 <__malloc_unlock>
 800615e:	42a3      	cmp	r3, r4
 8006160:	d90c      	bls.n	800617c <_free_r+0x4c>
 8006162:	6821      	ldr	r1, [r4, #0]
 8006164:	1862      	adds	r2, r4, r1
 8006166:	4293      	cmp	r3, r2
 8006168:	bf04      	itt	eq
 800616a:	681a      	ldreq	r2, [r3, #0]
 800616c:	685b      	ldreq	r3, [r3, #4]
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	bf04      	itt	eq
 8006172:	1852      	addeq	r2, r2, r1
 8006174:	6022      	streq	r2, [r4, #0]
 8006176:	6004      	str	r4, [r0, #0]
 8006178:	e7ec      	b.n	8006154 <_free_r+0x24>
 800617a:	4613      	mov	r3, r2
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	b10a      	cbz	r2, 8006184 <_free_r+0x54>
 8006180:	42a2      	cmp	r2, r4
 8006182:	d9fa      	bls.n	800617a <_free_r+0x4a>
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	1858      	adds	r0, r3, r1
 8006188:	42a0      	cmp	r0, r4
 800618a:	d10b      	bne.n	80061a4 <_free_r+0x74>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	4401      	add	r1, r0
 8006190:	1858      	adds	r0, r3, r1
 8006192:	4282      	cmp	r2, r0
 8006194:	6019      	str	r1, [r3, #0]
 8006196:	d1dd      	bne.n	8006154 <_free_r+0x24>
 8006198:	6810      	ldr	r0, [r2, #0]
 800619a:	6852      	ldr	r2, [r2, #4]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	4401      	add	r1, r0
 80061a0:	6019      	str	r1, [r3, #0]
 80061a2:	e7d7      	b.n	8006154 <_free_r+0x24>
 80061a4:	d902      	bls.n	80061ac <_free_r+0x7c>
 80061a6:	230c      	movs	r3, #12
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	e7d3      	b.n	8006154 <_free_r+0x24>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	1821      	adds	r1, r4, r0
 80061b0:	428a      	cmp	r2, r1
 80061b2:	bf04      	itt	eq
 80061b4:	6811      	ldreq	r1, [r2, #0]
 80061b6:	6852      	ldreq	r2, [r2, #4]
 80061b8:	6062      	str	r2, [r4, #4]
 80061ba:	bf04      	itt	eq
 80061bc:	1809      	addeq	r1, r1, r0
 80061be:	6021      	streq	r1, [r4, #0]
 80061c0:	605c      	str	r4, [r3, #4]
 80061c2:	e7c7      	b.n	8006154 <_free_r+0x24>
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	bf00      	nop
 80061c8:	200002c8 	.word	0x200002c8

080061cc <_malloc_r>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	1ccd      	adds	r5, r1, #3
 80061d0:	f025 0503 	bic.w	r5, r5, #3
 80061d4:	3508      	adds	r5, #8
 80061d6:	2d0c      	cmp	r5, #12
 80061d8:	bf38      	it	cc
 80061da:	250c      	movcc	r5, #12
 80061dc:	2d00      	cmp	r5, #0
 80061de:	4606      	mov	r6, r0
 80061e0:	db01      	blt.n	80061e6 <_malloc_r+0x1a>
 80061e2:	42a9      	cmp	r1, r5
 80061e4:	d903      	bls.n	80061ee <_malloc_r+0x22>
 80061e6:	230c      	movs	r3, #12
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	2000      	movs	r0, #0
 80061ec:	bd70      	pop	{r4, r5, r6, pc}
 80061ee:	f000 f9cf 	bl	8006590 <__malloc_lock>
 80061f2:	4a21      	ldr	r2, [pc, #132]	; (8006278 <_malloc_r+0xac>)
 80061f4:	6814      	ldr	r4, [r2, #0]
 80061f6:	4621      	mov	r1, r4
 80061f8:	b991      	cbnz	r1, 8006220 <_malloc_r+0x54>
 80061fa:	4c20      	ldr	r4, [pc, #128]	; (800627c <_malloc_r+0xb0>)
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	b91b      	cbnz	r3, 8006208 <_malloc_r+0x3c>
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f98f 	bl	8006524 <_sbrk_r>
 8006206:	6020      	str	r0, [r4, #0]
 8006208:	4629      	mov	r1, r5
 800620a:	4630      	mov	r0, r6
 800620c:	f000 f98a 	bl	8006524 <_sbrk_r>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d124      	bne.n	800625e <_malloc_r+0x92>
 8006214:	230c      	movs	r3, #12
 8006216:	6033      	str	r3, [r6, #0]
 8006218:	4630      	mov	r0, r6
 800621a:	f000 f9ba 	bl	8006592 <__malloc_unlock>
 800621e:	e7e4      	b.n	80061ea <_malloc_r+0x1e>
 8006220:	680b      	ldr	r3, [r1, #0]
 8006222:	1b5b      	subs	r3, r3, r5
 8006224:	d418      	bmi.n	8006258 <_malloc_r+0x8c>
 8006226:	2b0b      	cmp	r3, #11
 8006228:	d90f      	bls.n	800624a <_malloc_r+0x7e>
 800622a:	600b      	str	r3, [r1, #0]
 800622c:	50cd      	str	r5, [r1, r3]
 800622e:	18cc      	adds	r4, r1, r3
 8006230:	4630      	mov	r0, r6
 8006232:	f000 f9ae 	bl	8006592 <__malloc_unlock>
 8006236:	f104 000b 	add.w	r0, r4, #11
 800623a:	1d23      	adds	r3, r4, #4
 800623c:	f020 0007 	bic.w	r0, r0, #7
 8006240:	1ac3      	subs	r3, r0, r3
 8006242:	d0d3      	beq.n	80061ec <_malloc_r+0x20>
 8006244:	425a      	negs	r2, r3
 8006246:	50e2      	str	r2, [r4, r3]
 8006248:	e7d0      	b.n	80061ec <_malloc_r+0x20>
 800624a:	428c      	cmp	r4, r1
 800624c:	684b      	ldr	r3, [r1, #4]
 800624e:	bf16      	itet	ne
 8006250:	6063      	strne	r3, [r4, #4]
 8006252:	6013      	streq	r3, [r2, #0]
 8006254:	460c      	movne	r4, r1
 8006256:	e7eb      	b.n	8006230 <_malloc_r+0x64>
 8006258:	460c      	mov	r4, r1
 800625a:	6849      	ldr	r1, [r1, #4]
 800625c:	e7cc      	b.n	80061f8 <_malloc_r+0x2c>
 800625e:	1cc4      	adds	r4, r0, #3
 8006260:	f024 0403 	bic.w	r4, r4, #3
 8006264:	42a0      	cmp	r0, r4
 8006266:	d005      	beq.n	8006274 <_malloc_r+0xa8>
 8006268:	1a21      	subs	r1, r4, r0
 800626a:	4630      	mov	r0, r6
 800626c:	f000 f95a 	bl	8006524 <_sbrk_r>
 8006270:	3001      	adds	r0, #1
 8006272:	d0cf      	beq.n	8006214 <_malloc_r+0x48>
 8006274:	6025      	str	r5, [r4, #0]
 8006276:	e7db      	b.n	8006230 <_malloc_r+0x64>
 8006278:	200002c8 	.word	0x200002c8
 800627c:	200002cc 	.word	0x200002cc

08006280 <__ssputs_r>:
 8006280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	688e      	ldr	r6, [r1, #8]
 8006286:	429e      	cmp	r6, r3
 8006288:	4682      	mov	sl, r0
 800628a:	460c      	mov	r4, r1
 800628c:	4690      	mov	r8, r2
 800628e:	4699      	mov	r9, r3
 8006290:	d837      	bhi.n	8006302 <__ssputs_r+0x82>
 8006292:	898a      	ldrh	r2, [r1, #12]
 8006294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006298:	d031      	beq.n	80062fe <__ssputs_r+0x7e>
 800629a:	6825      	ldr	r5, [r4, #0]
 800629c:	6909      	ldr	r1, [r1, #16]
 800629e:	1a6f      	subs	r7, r5, r1
 80062a0:	6965      	ldr	r5, [r4, #20]
 80062a2:	2302      	movs	r3, #2
 80062a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80062ac:	f109 0301 	add.w	r3, r9, #1
 80062b0:	443b      	add	r3, r7
 80062b2:	429d      	cmp	r5, r3
 80062b4:	bf38      	it	cc
 80062b6:	461d      	movcc	r5, r3
 80062b8:	0553      	lsls	r3, r2, #21
 80062ba:	d530      	bpl.n	800631e <__ssputs_r+0x9e>
 80062bc:	4629      	mov	r1, r5
 80062be:	f7ff ff85 	bl	80061cc <_malloc_r>
 80062c2:	4606      	mov	r6, r0
 80062c4:	b950      	cbnz	r0, 80062dc <__ssputs_r+0x5c>
 80062c6:	230c      	movs	r3, #12
 80062c8:	f8ca 3000 	str.w	r3, [sl]
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d2:	81a3      	strh	r3, [r4, #12]
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	463a      	mov	r2, r7
 80062de:	6921      	ldr	r1, [r4, #16]
 80062e0:	f7ff fc32 	bl	8005b48 <memcpy>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	6126      	str	r6, [r4, #16]
 80062f2:	6165      	str	r5, [r4, #20]
 80062f4:	443e      	add	r6, r7
 80062f6:	1bed      	subs	r5, r5, r7
 80062f8:	6026      	str	r6, [r4, #0]
 80062fa:	60a5      	str	r5, [r4, #8]
 80062fc:	464e      	mov	r6, r9
 80062fe:	454e      	cmp	r6, r9
 8006300:	d900      	bls.n	8006304 <__ssputs_r+0x84>
 8006302:	464e      	mov	r6, r9
 8006304:	4632      	mov	r2, r6
 8006306:	4641      	mov	r1, r8
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	f000 f928 	bl	800655e <memmove>
 800630e:	68a3      	ldr	r3, [r4, #8]
 8006310:	1b9b      	subs	r3, r3, r6
 8006312:	60a3      	str	r3, [r4, #8]
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	441e      	add	r6, r3
 8006318:	6026      	str	r6, [r4, #0]
 800631a:	2000      	movs	r0, #0
 800631c:	e7dc      	b.n	80062d8 <__ssputs_r+0x58>
 800631e:	462a      	mov	r2, r5
 8006320:	f000 f938 	bl	8006594 <_realloc_r>
 8006324:	4606      	mov	r6, r0
 8006326:	2800      	cmp	r0, #0
 8006328:	d1e2      	bne.n	80062f0 <__ssputs_r+0x70>
 800632a:	6921      	ldr	r1, [r4, #16]
 800632c:	4650      	mov	r0, sl
 800632e:	f7ff feff 	bl	8006130 <_free_r>
 8006332:	e7c8      	b.n	80062c6 <__ssputs_r+0x46>

08006334 <_svfiprintf_r>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	461d      	mov	r5, r3
 800633a:	898b      	ldrh	r3, [r1, #12]
 800633c:	061f      	lsls	r7, r3, #24
 800633e:	b09d      	sub	sp, #116	; 0x74
 8006340:	4680      	mov	r8, r0
 8006342:	460c      	mov	r4, r1
 8006344:	4616      	mov	r6, r2
 8006346:	d50f      	bpl.n	8006368 <_svfiprintf_r+0x34>
 8006348:	690b      	ldr	r3, [r1, #16]
 800634a:	b96b      	cbnz	r3, 8006368 <_svfiprintf_r+0x34>
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	f7ff ff3d 	bl	80061cc <_malloc_r>
 8006352:	6020      	str	r0, [r4, #0]
 8006354:	6120      	str	r0, [r4, #16]
 8006356:	b928      	cbnz	r0, 8006364 <_svfiprintf_r+0x30>
 8006358:	230c      	movs	r3, #12
 800635a:	f8c8 3000 	str.w	r3, [r8]
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	e0c8      	b.n	80064f6 <_svfiprintf_r+0x1c2>
 8006364:	2340      	movs	r3, #64	; 0x40
 8006366:	6163      	str	r3, [r4, #20]
 8006368:	2300      	movs	r3, #0
 800636a:	9309      	str	r3, [sp, #36]	; 0x24
 800636c:	2320      	movs	r3, #32
 800636e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006372:	2330      	movs	r3, #48	; 0x30
 8006374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006378:	9503      	str	r5, [sp, #12]
 800637a:	f04f 0b01 	mov.w	fp, #1
 800637e:	4637      	mov	r7, r6
 8006380:	463d      	mov	r5, r7
 8006382:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006386:	b10b      	cbz	r3, 800638c <_svfiprintf_r+0x58>
 8006388:	2b25      	cmp	r3, #37	; 0x25
 800638a:	d13e      	bne.n	800640a <_svfiprintf_r+0xd6>
 800638c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006390:	d00b      	beq.n	80063aa <_svfiprintf_r+0x76>
 8006392:	4653      	mov	r3, sl
 8006394:	4632      	mov	r2, r6
 8006396:	4621      	mov	r1, r4
 8006398:	4640      	mov	r0, r8
 800639a:	f7ff ff71 	bl	8006280 <__ssputs_r>
 800639e:	3001      	adds	r0, #1
 80063a0:	f000 80a4 	beq.w	80064ec <_svfiprintf_r+0x1b8>
 80063a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a6:	4453      	add	r3, sl
 80063a8:	9309      	str	r3, [sp, #36]	; 0x24
 80063aa:	783b      	ldrb	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 809d 	beq.w	80064ec <_svfiprintf_r+0x1b8>
 80063b2:	2300      	movs	r3, #0
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063bc:	9304      	str	r3, [sp, #16]
 80063be:	9307      	str	r3, [sp, #28]
 80063c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c4:	931a      	str	r3, [sp, #104]	; 0x68
 80063c6:	462f      	mov	r7, r5
 80063c8:	2205      	movs	r2, #5
 80063ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80063ce:	4850      	ldr	r0, [pc, #320]	; (8006510 <_svfiprintf_r+0x1dc>)
 80063d0:	f7f9 ff0e 	bl	80001f0 <memchr>
 80063d4:	9b04      	ldr	r3, [sp, #16]
 80063d6:	b9d0      	cbnz	r0, 800640e <_svfiprintf_r+0xda>
 80063d8:	06d9      	lsls	r1, r3, #27
 80063da:	bf44      	itt	mi
 80063dc:	2220      	movmi	r2, #32
 80063de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063e2:	071a      	lsls	r2, r3, #28
 80063e4:	bf44      	itt	mi
 80063e6:	222b      	movmi	r2, #43	; 0x2b
 80063e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063ec:	782a      	ldrb	r2, [r5, #0]
 80063ee:	2a2a      	cmp	r2, #42	; 0x2a
 80063f0:	d015      	beq.n	800641e <_svfiprintf_r+0xea>
 80063f2:	9a07      	ldr	r2, [sp, #28]
 80063f4:	462f      	mov	r7, r5
 80063f6:	2000      	movs	r0, #0
 80063f8:	250a      	movs	r5, #10
 80063fa:	4639      	mov	r1, r7
 80063fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006400:	3b30      	subs	r3, #48	; 0x30
 8006402:	2b09      	cmp	r3, #9
 8006404:	d94d      	bls.n	80064a2 <_svfiprintf_r+0x16e>
 8006406:	b1b8      	cbz	r0, 8006438 <_svfiprintf_r+0x104>
 8006408:	e00f      	b.n	800642a <_svfiprintf_r+0xf6>
 800640a:	462f      	mov	r7, r5
 800640c:	e7b8      	b.n	8006380 <_svfiprintf_r+0x4c>
 800640e:	4a40      	ldr	r2, [pc, #256]	; (8006510 <_svfiprintf_r+0x1dc>)
 8006410:	1a80      	subs	r0, r0, r2
 8006412:	fa0b f000 	lsl.w	r0, fp, r0
 8006416:	4318      	orrs	r0, r3
 8006418:	9004      	str	r0, [sp, #16]
 800641a:	463d      	mov	r5, r7
 800641c:	e7d3      	b.n	80063c6 <_svfiprintf_r+0x92>
 800641e:	9a03      	ldr	r2, [sp, #12]
 8006420:	1d11      	adds	r1, r2, #4
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	9103      	str	r1, [sp, #12]
 8006426:	2a00      	cmp	r2, #0
 8006428:	db01      	blt.n	800642e <_svfiprintf_r+0xfa>
 800642a:	9207      	str	r2, [sp, #28]
 800642c:	e004      	b.n	8006438 <_svfiprintf_r+0x104>
 800642e:	4252      	negs	r2, r2
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	9207      	str	r2, [sp, #28]
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	783b      	ldrb	r3, [r7, #0]
 800643a:	2b2e      	cmp	r3, #46	; 0x2e
 800643c:	d10c      	bne.n	8006458 <_svfiprintf_r+0x124>
 800643e:	787b      	ldrb	r3, [r7, #1]
 8006440:	2b2a      	cmp	r3, #42	; 0x2a
 8006442:	d133      	bne.n	80064ac <_svfiprintf_r+0x178>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	9203      	str	r2, [sp, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfb8      	it	lt
 8006450:	f04f 33ff 	movlt.w	r3, #4294967295
 8006454:	3702      	adds	r7, #2
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	4d2e      	ldr	r5, [pc, #184]	; (8006514 <_svfiprintf_r+0x1e0>)
 800645a:	7839      	ldrb	r1, [r7, #0]
 800645c:	2203      	movs	r2, #3
 800645e:	4628      	mov	r0, r5
 8006460:	f7f9 fec6 	bl	80001f0 <memchr>
 8006464:	b138      	cbz	r0, 8006476 <_svfiprintf_r+0x142>
 8006466:	2340      	movs	r3, #64	; 0x40
 8006468:	1b40      	subs	r0, r0, r5
 800646a:	fa03 f000 	lsl.w	r0, r3, r0
 800646e:	9b04      	ldr	r3, [sp, #16]
 8006470:	4303      	orrs	r3, r0
 8006472:	3701      	adds	r7, #1
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	7839      	ldrb	r1, [r7, #0]
 8006478:	4827      	ldr	r0, [pc, #156]	; (8006518 <_svfiprintf_r+0x1e4>)
 800647a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800647e:	2206      	movs	r2, #6
 8006480:	1c7e      	adds	r6, r7, #1
 8006482:	f7f9 feb5 	bl	80001f0 <memchr>
 8006486:	2800      	cmp	r0, #0
 8006488:	d038      	beq.n	80064fc <_svfiprintf_r+0x1c8>
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <_svfiprintf_r+0x1e8>)
 800648c:	bb13      	cbnz	r3, 80064d4 <_svfiprintf_r+0x1a0>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	3307      	adds	r3, #7
 8006492:	f023 0307 	bic.w	r3, r3, #7
 8006496:	3308      	adds	r3, #8
 8006498:	9303      	str	r3, [sp, #12]
 800649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649c:	444b      	add	r3, r9
 800649e:	9309      	str	r3, [sp, #36]	; 0x24
 80064a0:	e76d      	b.n	800637e <_svfiprintf_r+0x4a>
 80064a2:	fb05 3202 	mla	r2, r5, r2, r3
 80064a6:	2001      	movs	r0, #1
 80064a8:	460f      	mov	r7, r1
 80064aa:	e7a6      	b.n	80063fa <_svfiprintf_r+0xc6>
 80064ac:	2300      	movs	r3, #0
 80064ae:	3701      	adds	r7, #1
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	4619      	mov	r1, r3
 80064b4:	250a      	movs	r5, #10
 80064b6:	4638      	mov	r0, r7
 80064b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064bc:	3a30      	subs	r2, #48	; 0x30
 80064be:	2a09      	cmp	r2, #9
 80064c0:	d903      	bls.n	80064ca <_svfiprintf_r+0x196>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0c8      	beq.n	8006458 <_svfiprintf_r+0x124>
 80064c6:	9105      	str	r1, [sp, #20]
 80064c8:	e7c6      	b.n	8006458 <_svfiprintf_r+0x124>
 80064ca:	fb05 2101 	mla	r1, r5, r1, r2
 80064ce:	2301      	movs	r3, #1
 80064d0:	4607      	mov	r7, r0
 80064d2:	e7f0      	b.n	80064b6 <_svfiprintf_r+0x182>
 80064d4:	ab03      	add	r3, sp, #12
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	4622      	mov	r2, r4
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <_svfiprintf_r+0x1ec>)
 80064dc:	a904      	add	r1, sp, #16
 80064de:	4640      	mov	r0, r8
 80064e0:	f7fe f848 	bl	8004574 <_printf_float>
 80064e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064e8:	4681      	mov	r9, r0
 80064ea:	d1d6      	bne.n	800649a <_svfiprintf_r+0x166>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	065b      	lsls	r3, r3, #25
 80064f0:	f53f af35 	bmi.w	800635e <_svfiprintf_r+0x2a>
 80064f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064f6:	b01d      	add	sp, #116	; 0x74
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	ab03      	add	r3, sp, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4622      	mov	r2, r4
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <_svfiprintf_r+0x1ec>)
 8006504:	a904      	add	r1, sp, #16
 8006506:	4640      	mov	r0, r8
 8006508:	f7fe faea 	bl	8004ae0 <_printf_i>
 800650c:	e7ea      	b.n	80064e4 <_svfiprintf_r+0x1b0>
 800650e:	bf00      	nop
 8006510:	08006794 	.word	0x08006794
 8006514:	0800679a 	.word	0x0800679a
 8006518:	0800679e 	.word	0x0800679e
 800651c:	08004575 	.word	0x08004575
 8006520:	08006281 	.word	0x08006281

08006524 <_sbrk_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4c06      	ldr	r4, [pc, #24]	; (8006540 <_sbrk_r+0x1c>)
 8006528:	2300      	movs	r3, #0
 800652a:	4605      	mov	r5, r0
 800652c:	4608      	mov	r0, r1
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	f7fb fafe 	bl	8001b30 <_sbrk>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_sbrk_r+0x1a>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	b103      	cbz	r3, 800653e <_sbrk_r+0x1a>
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	2000036c 	.word	0x2000036c

08006544 <__ascii_wctomb>:
 8006544:	b149      	cbz	r1, 800655a <__ascii_wctomb+0x16>
 8006546:	2aff      	cmp	r2, #255	; 0xff
 8006548:	bf85      	ittet	hi
 800654a:	238a      	movhi	r3, #138	; 0x8a
 800654c:	6003      	strhi	r3, [r0, #0]
 800654e:	700a      	strbls	r2, [r1, #0]
 8006550:	f04f 30ff 	movhi.w	r0, #4294967295
 8006554:	bf98      	it	ls
 8006556:	2001      	movls	r0, #1
 8006558:	4770      	bx	lr
 800655a:	4608      	mov	r0, r1
 800655c:	4770      	bx	lr

0800655e <memmove>:
 800655e:	4288      	cmp	r0, r1
 8006560:	b510      	push	{r4, lr}
 8006562:	eb01 0302 	add.w	r3, r1, r2
 8006566:	d807      	bhi.n	8006578 <memmove+0x1a>
 8006568:	1e42      	subs	r2, r0, #1
 800656a:	4299      	cmp	r1, r3
 800656c:	d00a      	beq.n	8006584 <memmove+0x26>
 800656e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006572:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006576:	e7f8      	b.n	800656a <memmove+0xc>
 8006578:	4283      	cmp	r3, r0
 800657a:	d9f5      	bls.n	8006568 <memmove+0xa>
 800657c:	1881      	adds	r1, r0, r2
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	42d3      	cmn	r3, r2
 8006582:	d100      	bne.n	8006586 <memmove+0x28>
 8006584:	bd10      	pop	{r4, pc}
 8006586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800658a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800658e:	e7f7      	b.n	8006580 <memmove+0x22>

08006590 <__malloc_lock>:
 8006590:	4770      	bx	lr

08006592 <__malloc_unlock>:
 8006592:	4770      	bx	lr

08006594 <_realloc_r>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	4607      	mov	r7, r0
 8006598:	4614      	mov	r4, r2
 800659a:	460e      	mov	r6, r1
 800659c:	b921      	cbnz	r1, 80065a8 <_realloc_r+0x14>
 800659e:	4611      	mov	r1, r2
 80065a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065a4:	f7ff be12 	b.w	80061cc <_malloc_r>
 80065a8:	b922      	cbnz	r2, 80065b4 <_realloc_r+0x20>
 80065aa:	f7ff fdc1 	bl	8006130 <_free_r>
 80065ae:	4625      	mov	r5, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b4:	f000 f814 	bl	80065e0 <_malloc_usable_size_r>
 80065b8:	42a0      	cmp	r0, r4
 80065ba:	d20f      	bcs.n	80065dc <_realloc_r+0x48>
 80065bc:	4621      	mov	r1, r4
 80065be:	4638      	mov	r0, r7
 80065c0:	f7ff fe04 	bl	80061cc <_malloc_r>
 80065c4:	4605      	mov	r5, r0
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d0f2      	beq.n	80065b0 <_realloc_r+0x1c>
 80065ca:	4631      	mov	r1, r6
 80065cc:	4622      	mov	r2, r4
 80065ce:	f7ff fabb 	bl	8005b48 <memcpy>
 80065d2:	4631      	mov	r1, r6
 80065d4:	4638      	mov	r0, r7
 80065d6:	f7ff fdab 	bl	8006130 <_free_r>
 80065da:	e7e9      	b.n	80065b0 <_realloc_r+0x1c>
 80065dc:	4635      	mov	r5, r6
 80065de:	e7e7      	b.n	80065b0 <_realloc_r+0x1c>

080065e0 <_malloc_usable_size_r>:
 80065e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e4:	1f18      	subs	r0, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bfbc      	itt	lt
 80065ea:	580b      	ldrlt	r3, [r1, r0]
 80065ec:	18c0      	addlt	r0, r0, r3
 80065ee:	4770      	bx	lr

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
