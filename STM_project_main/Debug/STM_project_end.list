
STM_project_end.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a020  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800a1f0  0800a1f0  0001a1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a490  0800a490  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a498  0800a498  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a498  0800a498  0001a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a49c  0800a49c  0001a49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001e4  0800a684  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800a684  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156ab  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b30  00000000  00000000  000358bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  000383f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  00039890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024b6c  00000000  00000000  0003ac00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101f5  00000000  00000000  0005f76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e028e  00000000  00000000  0006f961  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014fbef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f0  00000000  00000000  0014fc6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1d8 	.word	0x0800a1d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800a1d8 	.word	0x0800a1d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <NRF24_init>:


////--------------------------------------------------
//
void NRF24_init()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	CE_OFF;
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2110      	movs	r1, #16
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <NRF24_init+0x84>)
 8000f92:	f002 fc67 	bl	8003864 <HAL_GPIO_WritePin>
	delay_micro(10300);
 8000f96:	f642 003c 	movw	r0, #10300	; 0x283c
 8000f9a:	f000 f83d 	bl	8001018 <delay_micro>

	NRF24_WriteReg(CONFIG, (uint8_t)0X0C); // mask, CRC, enable(off), TX
 8000f9e:	210c      	movs	r1, #12
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f883 	bl	80010ac <NRF24_WriteReg>
	NRF24_WriteReg(EN_AA, (uint8_t)0X01); // Enable auto acknowledgement data pipe 0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f000 f87f 	bl	80010ac <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, (uint8_t)0X01); // Enable data pipe 0.
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f000 f87b 	bl	80010ac <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, (uint8_t)0X01); // '01' - 3 bytes RX/TX Address field width
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f877 	bl	80010ac <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, (uint8_t)0X0F); // ‘1111’ – Up to 15 Re-Transmit on fail of AA
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	2004      	movs	r0, #4
 8000fc2:	f000 f873 	bl	80010ac <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, (uint8_t)0X64); // Sets the frequency channel nRF24L01 operates on 2500Mgc
 8000fc6:	2164      	movs	r1, #100	; 0x64
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f000 f86f 	bl	80010ac <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, (uint8_t)0X26); // 2Mbps, 0dBm Setup, LNA gain; olde 0X0F
 8000fce:	2126      	movs	r1, #38	; 0x26
 8000fd0:	2006      	movs	r0, #6
 8000fd2:	f000 f86b 	bl	80010ac <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, (uint8_t)0X70); // reset interupt
 8000fd6:	2170      	movs	r1, #112	; 0x70
 8000fd8:	2007      	movs	r0, #7
 8000fda:	f000 f867 	bl	80010ac <NRF24_WriteReg>

	NRF24_Write_Buf(RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // Receive address data pipe 0.
 8000fde:	2203      	movs	r2, #3
 8000fe0:	490b      	ldr	r1, [pc, #44]	; (8001010 <NRF24_init+0x88>)
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f000 f8ba 	bl	800115c <NRF24_Write_Buf>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH); // Transmit address.
 8000fe8:	2203      	movs	r2, #3
 8000fea:	490a      	ldr	r1, [pc, #40]	; (8001014 <NRF24_init+0x8c>)
 8000fec:	2010      	movs	r0, #16
 8000fee:	f000 f8b5 	bl	800115c <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, (uint8_t)RX_PLOAD_WIDTH); // number of data byte arived 6
 8000ff2:	211b      	movs	r1, #27
 8000ff4:	2011      	movs	r0, #17
 8000ff6:	f000 f859 	bl	80010ac <NRF24_WriteReg>


	NRF24_PWR_UP_ON();
 8000ffa:	f000 f965 	bl	80012c8 <NRF24_PWR_UP_ON>
	delay_micro(1500);
 8000ffe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001002:	f000 f809 	bl	8001018 <delay_micro>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020800 	.word	0x40020800
 8001010:	20000004 	.word	0x20000004
 8001014:	20000000 	.word	0x20000000

08001018 <delay_micro>:


////--------------------------------------------------
//
void delay_micro(volatile uint32_t num)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	num *= SYSTEM_CLOCK / 1000000;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	22b4      	movs	r2, #180	; 0xb4
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	607b      	str	r3, [r7, #4]

	while (num--);
 800102a:	bf00      	nop
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1fa      	bne.n	800102c <delay_micro+0x14>
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <NRF24_ReadReg>:


////--------------------------------------------------
//
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd = 0XFF;
 8001052:	23ff      	movs	r3, #255	; 0xff
 8001054:	73bb      	strb	r3, [r7, #14]

  CS_ON;
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <NRF24_ReadReg+0x60>)
 800105c:	f002 fc02 	bl	8003864 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8001060:	f107 020f 	add.w	r2, r7, #15
 8001064:	1df9      	adds	r1, r7, #7
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <NRF24_ReadReg+0x64>)
 8001070:	f005 f9d3 	bl	800641a <HAL_SPI_TransmitReceive>

  if (addr!=STATUS)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b07      	cmp	r3, #7
 8001078:	d00a      	beq.n	8001090 <NRF24_ReadReg+0x4c>
    HAL_SPI_TransmitReceive(&hspi1, &cmd, &dt, 1, 1000);
 800107a:	f107 020f 	add.w	r2, r7, #15
 800107e:	f107 010e 	add.w	r1, r7, #14
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <NRF24_ReadReg+0x64>)
 800108c:	f005 f9c5 	bl	800641a <HAL_SPI_TransmitReceive>

  CS_OFF;
 8001090:	2201      	movs	r2, #1
 8001092:	2120      	movs	r1, #32
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <NRF24_ReadReg+0x60>)
 8001096:	f002 fbe5 	bl	8003864 <HAL_GPIO_WritePin>

  return dt;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020800 	.word	0x40020800
 80010a8:	200003e8 	.word	0x200003e8

080010ac <NRF24_WriteReg>:


////------------------------------------------------
//
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f043 0320 	orr.w	r3, r3, #32
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 80010c6:	2200      	movs	r2, #0
 80010c8:	2120      	movs	r1, #32
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <NRF24_WriteReg+0x54>)
 80010cc:	f002 fbca 	bl	8003864 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80010d0:	1df9      	adds	r1, r7, #7
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	2201      	movs	r2, #1
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <NRF24_WriteReg+0x58>)
 80010da:	f004 ff61 	bl	8005fa0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &dt, 1, 1000);
 80010de:	1db9      	adds	r1, r7, #6
 80010e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e4:	2201      	movs	r2, #1
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <NRF24_WriteReg+0x58>)
 80010e8:	f004 ff5a 	bl	8005fa0 <HAL_SPI_Transmit>

  CS_OFF;
 80010ec:	2201      	movs	r2, #1
 80010ee:	2120      	movs	r1, #32
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <NRF24_WriteReg+0x54>)
 80010f2:	f002 fbb7 	bl	8003864 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020800 	.word	0x40020800
 8001104:	200003e8 	.word	0x200003e8

08001108 <NRF24_Read_Buf>:


////------------------------------------------------
//
void NRF24_Read_Buf(uint8_t addr, uint8_t *pBuf, uint8_t bytes)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8001118:	2200      	movs	r2, #0
 800111a:	2120      	movs	r1, #32
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <NRF24_Read_Buf+0x4c>)
 800111e:	f002 fba1 	bl	8003864 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001122:	1df9      	adds	r1, r7, #7
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	2201      	movs	r2, #1
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <NRF24_Read_Buf+0x50>)
 800112c:	f004 ff38 	bl	8005fa0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, pBuf, bytes, 1000);
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	b29a      	uxth	r2, r3
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <NRF24_Read_Buf+0x50>)
 800113c:	f005 f864 	bl	8006208 <HAL_SPI_Receive>

  CS_OFF;
 8001140:	2201      	movs	r2, #1
 8001142:	2120      	movs	r1, #32
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <NRF24_Read_Buf+0x4c>)
 8001146:	f002 fb8d 	bl	8003864 <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020800 	.word	0x40020800
 8001158:	200003e8 	.word	0x200003e8

0800115c <NRF24_Write_Buf>:


////------------------------------------------------
//
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f043 0320 	orr.w	r3, r3, #32
 8001172:	b2db      	uxtb	r3, r3
 8001174:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <NRF24_Write_Buf+0x54>)
 800117c:	f002 fb72 	bl	8003864 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001180:	1df9      	adds	r1, r7, #7
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	2201      	movs	r2, #1
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <NRF24_Write_Buf+0x58>)
 800118a:	f004 ff09 	bl	8005fa0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, pBuf, bytes, 1000);
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	b29a      	uxth	r2, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <NRF24_Write_Buf+0x58>)
 800119a:	f004 ff01 	bl	8005fa0 <HAL_SPI_Transmit>

  CS_OFF;
 800119e:	2201      	movs	r2, #1
 80011a0:	2120      	movs	r1, #32
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <NRF24_Write_Buf+0x54>)
 80011a4:	f002 fb5e 	bl	8003864 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40020800 	.word	0x40020800
 80011b4:	200003e8 	.word	0x200003e8

080011b8 <NRF24_FlushRX>:


////------------------------------------------------
//
void NRF24_FlushRX(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  uint8_t dt = (uint8_t)FLUSH_RX;
 80011be:	23e2      	movs	r3, #226	; 0xe2
 80011c0:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <NRF24_FlushRX+0x34>)
 80011c8:	f002 fb4c 	bl	8003864 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &dt, 1, 1000);
 80011cc:	1df9      	adds	r1, r7, #7
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	2201      	movs	r2, #1
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <NRF24_FlushRX+0x38>)
 80011d6:	f004 fee3 	bl	8005fa0 <HAL_SPI_Transmit>

  CS_OFF;
 80011da:	2201      	movs	r2, #1
 80011dc:	2120      	movs	r1, #32
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <NRF24_FlushRX+0x34>)
 80011e0:	f002 fb40 	bl	8003864 <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40020800 	.word	0x40020800
 80011f0:	200003e8 	.word	0x200003e8

080011f4 <NRF24_FlushTX>:


////------------------------------------------------
//
void NRF24_FlushTX(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  uint8_t dt = (uint8_t)FLUSH_TX;
 80011fa:	23e1      	movs	r3, #225	; 0xe1
 80011fc:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 80011fe:	2200      	movs	r2, #0
 8001200:	2120      	movs	r1, #32
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <NRF24_FlushTX+0x34>)
 8001204:	f002 fb2e 	bl	8003864 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &dt, 1, 1000);
 8001208:	1df9      	adds	r1, r7, #7
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	2201      	movs	r2, #1
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <NRF24_FlushTX+0x38>)
 8001212:	f004 fec5 	bl	8005fa0 <HAL_SPI_Transmit>

  CS_OFF;
 8001216:	2201      	movs	r2, #1
 8001218:	2120      	movs	r1, #32
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <NRF24_FlushTX+0x34>)
 800121c:	f002 fb22 	bl	8003864 <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020800 	.word	0x40020800
 800122c:	200003e8 	.word	0x200003e8

08001230 <NRF24_RX_Mode>:


////------------------------------------------------
//
void NRF24_RX_Mode(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <NRF24_RX_Mode+0x48>)
 8001240:	f002 fb10 	bl	8003864 <HAL_GPIO_WritePin>

  regval = NRF24_ReadReg(CONFIG);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff fefd 	bl	8001044 <NRF24_ReadReg>
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  regval |= (1UL<<PRIM_RX); // RX_mode
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4619      	mov	r1, r3
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff ff26 	bl	80010ac <NRF24_WriteReg>

  CS_OFF;
 8001260:	2201      	movs	r2, #1
 8001262:	2120      	movs	r1, #32
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <NRF24_RX_Mode+0x48>)
 8001266:	f002 fafd 	bl	8003864 <HAL_GPIO_WritePin>

  NRF24_FlushRX();
 800126a:	f7ff ffa5 	bl	80011b8 <NRF24_FlushRX>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40020800 	.word	0x40020800

0800127c <NRF24_TX_Mode>:


////------------------------------------------------
//
void NRF24_TX_Mode(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <NRF24_TX_Mode+0x48>)
 800128c:	f002 faea 	bl	8003864 <HAL_GPIO_WritePin>

  regval = NRF24_ReadReg(CONFIG);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fed7 	bl	8001044 <NRF24_ReadReg>
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  regval &= ~(1UL<<PRIM_RX); // TX_mode
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4619      	mov	r1, r3
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ff00 	bl	80010ac <NRF24_WriteReg>

  CS_OFF;
 80012ac:	2201      	movs	r2, #1
 80012ae:	2120      	movs	r1, #32
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <NRF24_TX_Mode+0x48>)
 80012b2:	f002 fad7 	bl	8003864 <HAL_GPIO_WritePin>

  NRF24_FlushTX();
 80012b6:	f7ff ff9d 	bl	80011f4 <NRF24_FlushTX>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020800 	.word	0x40020800

080012c8 <NRF24_PWR_UP_ON>:


////------------------------------------------------
//
void NRF24_PWR_UP_ON(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]

  CS_ON;
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <NRF24_PWR_UP_ON+0x44>)
 80012d8:	f002 fac4 	bl	8003864 <HAL_GPIO_WritePin>

  regval = NRF24_ReadReg(CONFIG);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff feb1 	bl	8001044 <NRF24_ReadReg>
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  regval |= (1UL<<PWR_UP); // ON
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4619      	mov	r1, r3
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff feda 	bl	80010ac <NRF24_WriteReg>

  CS_OFF;
 80012f8:	2201      	movs	r2, #1
 80012fa:	2120      	movs	r1, #32
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <NRF24_PWR_UP_ON+0x44>)
 80012fe:	f002 fab1 	bl	8003864 <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020800 	.word	0x40020800

08001310 <NRF24_Transmit_base>:


////------------------------------------------------
//
void NRF24_Transmit_base(uint8_t *pBuf, uint8_t bytes)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	uint8_t w_tx_payload = (uint8_t)W_TX_PAYLOAD;
 800131c:	23a0      	movs	r3, #160	; 0xa0
 800131e:	73fb      	strb	r3, [r7, #15]

	CE_OFF;
 8001320:	2200      	movs	r2, #0
 8001322:	2110      	movs	r1, #16
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <NRF24_Transmit_base+0x5c>)
 8001326:	f002 fa9d 	bl	8003864 <HAL_GPIO_WritePin>
	delay_micro(300);
 800132a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800132e:	f7ff fe73 	bl	8001018 <delay_micro>

	NRF24_TX_Mode();
 8001332:	f7ff ffa3 	bl	800127c <NRF24_TX_Mode>

	NRF24_Write_Buf(w_tx_payload, pBuf, bytes);
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff0d 	bl	800115c <NRF24_Write_Buf>

	NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 8001342:	2007      	movs	r0, #7
 8001344:	f7ff fe7e 	bl	8001044 <NRF24_ReadReg>
 8001348:	4603      	mov	r3, r0
 800134a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	2007      	movs	r0, #7
 8001354:	f7ff feaa 	bl	80010ac <NRF24_WriteReg>

	CE_ON;
 8001358:	2201      	movs	r2, #1
 800135a:	2110      	movs	r1, #16
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <NRF24_Transmit_base+0x5c>)
 800135e:	f002 fa81 	bl	8003864 <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40020800 	.word	0x40020800

08001370 <NRF24_Receive_base>:


////------------------------------------------------
//
void NRF24_Receive_base()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	CE_OFF;
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <NRF24_Receive_base+0x40>)
 800137a:	f002 fa73 	bl	8003864 <HAL_GPIO_WritePin>
	delay_micro(300);
 800137e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001382:	f7ff fe49 	bl	8001018 <delay_micro>

	NRF24_RX_Mode();
 8001386:	f7ff ff53 	bl	8001230 <NRF24_RX_Mode>

	NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 800138a:	2007      	movs	r0, #7
 800138c:	f7ff fe5a 	bl	8001044 <NRF24_ReadReg>
 8001390:	4603      	mov	r3, r0
 8001392:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4619      	mov	r1, r3
 800139a:	2007      	movs	r0, #7
 800139c:	f7ff fe86 	bl	80010ac <NRF24_WriteReg>

	CE_ON;
 80013a0:	2201      	movs	r2, #1
 80013a2:	2110      	movs	r1, #16
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <NRF24_Receive_base+0x40>)
 80013a6:	f002 fa5d 	bl	8003864 <HAL_GPIO_WritePin>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40020800 	.word	0x40020800

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013f4:	b0ad      	sub	sp, #180	; 0xb4
 80013f6:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f001 f9fc 	bl	80027f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 fa36 	bl	800186c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f000 fc84 	bl	8001d0c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001404:	f000 faca 	bl	800199c <MX_ADC1_Init>
  MX_DAC_Init();
 8001408:	f000 fb1a 	bl	8001a40 <MX_DAC_Init>
  MX_I2C1_Init();
 800140c:	f000 fb42 	bl	8001a94 <MX_I2C1_Init>
  MX_RTC_Init();
 8001410:	f000 fb6e 	bl	8001af0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001414:	f000 fbce 	bl	8001bb4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001418:	f000 fc02 	bl	8001c20 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fc4c 	bl	8001cb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8001420:	4b59      	ldr	r3, [pc, #356]	; (8001588 <main+0x198>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a58      	ldr	r2, [pc, #352]	; (8001588 <main+0x198>)
 8001426:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 800142a:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ (USART2_IRQn);
 800142c:	2026      	movs	r0, #38	; 0x26
 800142e:	f7ff ffc1 	bl	80013b4 <__NVIC_EnableIRQ>
  NRF24_init();
 8001432:	f7ff fda9 	bl	8000f88 <NRF24_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  init_timer(3, 10);
 8001436:	210a      	movs	r1, #10
 8001438:	2003      	movs	r0, #3
 800143a:	f000 fddf 	bl	8001ffc <init_timer>
  rtc_set(20, 12, 1, 1, 12, 0, 0);
 800143e:	2300      	movs	r3, #0
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2300      	movs	r3, #0
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	230c      	movs	r3, #12
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2201      	movs	r2, #1
 800144e:	210c      	movs	r1, #12
 8001450:	2014      	movs	r0, #20
 8001452:	f000 fd91 	bl	8001f78 <rtc_set>
  NRF24_Receive_base();
 8001456:	f7ff ff8b 	bl	8001370 <NRF24_Receive_base>

  while (1)
  {

	  if (uart_flag)
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <main+0x19c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 80e9 	beq.w	8001636 <main+0x246>
	  {
		  char array[10] = {0};
 8001464:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	811a      	strh	r2, [r3, #8]
		  uint8_t temp_buf[64];
		  uint32_t array_index = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	677b      	str	r3, [r7, #116]	; 0x74
		  uint32_t num_array_index = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	673b      	str	r3, [r7, #112]	; 0x70
		  uart_flag = 0;
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <main+0x19c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]

		  memcpy(temp_buf, uart_receve, 64);
 800147e:	4b44      	ldr	r3, [pc, #272]	; (8001590 <main+0x1a0>)
 8001480:	f107 041c 	add.w	r4, r7, #28
 8001484:	461d      	mov	r5, r3
 8001486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001492:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		  if (temp_buf[0] == 'u')
 800149a:	7f3b      	ldrb	r3, [r7, #28]
 800149c:	2b75      	cmp	r3, #117	; 0x75
 800149e:	d103      	bne.n	80014a8 <main+0xb8>
		  {
			  com_flag = 1;
 80014a0:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <main+0x1a4>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e0c6      	b.n	8001636 <main+0x246>
		  }
		  else if (temp_buf[0] == 'n')
 80014a8:	7f3b      	ldrb	r3, [r7, #28]
 80014aa:	2b6e      	cmp	r3, #110	; 0x6e
 80014ac:	d103      	bne.n	80014b6 <main+0xc6>
		  {
			  com_flag = 0;
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <main+0x1a4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e0bf      	b.n	8001636 <main+0x246>
		  }
		  else if (temp_buf[0] == 'a')
 80014b6:	7f3b      	ldrb	r3, [r7, #28]
 80014b8:	2b61      	cmp	r3, #97	; 0x61
 80014ba:	d14c      	bne.n	8001556 <main+0x166>
		  {
			  buf_nrf_transmit[0] = temp_buf[0];
 80014bc:	7f3a      	ldrb	r2, [r7, #28]
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <main+0x1a8>)
 80014c0:	701a      	strb	r2, [r3, #0]

			  for (uint32_t i = 1; temp_buf[i] != '\0'; i++)
 80014c2:	2301      	movs	r3, #1
 80014c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014c6:	e028      	b.n	800151a <main+0x12a>
			  {
				  if (temp_buf[i] != ':')
 80014c8:	f107 021c 	add.w	r2, r7, #28
 80014cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b3a      	cmp	r3, #58	; 0x3a
 80014d4:	d00e      	beq.n	80014f4 <main+0x104>
				  {
					  array[array_index] = temp_buf[i];
 80014d6:	f107 021c 	add.w	r2, r7, #28
 80014da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014dc:	4413      	add	r3, r2
 80014de:	7819      	ldrb	r1, [r3, #0]
 80014e0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80014e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
					  array_index++;
 80014ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ee:	3301      	adds	r3, #1
 80014f0:	677b      	str	r3, [r7, #116]	; 0x74
 80014f2:	e00f      	b.n	8001514 <main+0x124>
				  }
				  else
				  {
					  array[array_index] = '\0';
 80014f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80014f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014fa:	4413      	add	r3, r2
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
					  *((uint32_t*)(buf_nrf_transmit + 1)) = atoi(array);
 8001500:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001504:	4618      	mov	r0, r3
 8001506:	f006 fd5d 	bl	8007fc4 <atoi>
 800150a:	4602      	mov	r2, r0
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <main+0x1ac>)
 800150e:	601a      	str	r2, [r3, #0]
					  array_index = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	677b      	str	r3, [r7, #116]	; 0x74
			  for (uint32_t i = 1; temp_buf[i] != '\0'; i++)
 8001514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001516:	3301      	adds	r3, #1
 8001518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800151a:	f107 021c 	add.w	r2, r7, #28
 800151e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1cf      	bne.n	80014c8 <main+0xd8>
				  }
			  }

			  array[array_index] = '\0';
 8001528:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800152c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800152e:	4413      	add	r3, r2
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
			  *((uint32_t*)(buf_nrf_transmit + 5)) = atoi(array);
 8001534:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001538:	4618      	mov	r0, r3
 800153a:	f006 fd43 	bl	8007fc4 <atoi>
 800153e:	4602      	mov	r2, r0
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <main+0x1b0>)
 8001542:	601a      	str	r2, [r3, #0]

			  init_timer(*((uint32_t*)(buf_nrf_transmit + 1)), *((uint32_t*)(buf_nrf_transmit + 5)));
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <main+0x1ac>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <main+0x1b0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f000 fd54 	bl	8001ffc <init_timer>
 8001554:	e06f      	b.n	8001636 <main+0x246>
		  }
		  else
		  {
			  for (uint32_t i = 0; temp_buf[i] != '\0'; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	66bb      	str	r3, [r7, #104]	; 0x68
 800155a:	e03d      	b.n	80015d8 <main+0x1e8>
			  {
				  if (temp_buf[i] != ':')
 800155c:	f107 021c 	add.w	r2, r7, #28
 8001560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b3a      	cmp	r3, #58	; 0x3a
 8001568:	d01c      	beq.n	80015a4 <main+0x1b4>
				  {
					  array[array_index] = temp_buf[i];
 800156a:	f107 021c 	add.w	r2, r7, #28
 800156e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001570:	4413      	add	r3, r2
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800157a:	4413      	add	r3, r2
 800157c:	460a      	mov	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
					  array_index++;
 8001580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001582:	3301      	adds	r3, #1
 8001584:	677b      	str	r3, [r7, #116]	; 0x74
 8001586:	e024      	b.n	80015d2 <main+0x1e2>
 8001588:	40004400 	.word	0x40004400
 800158c:	20000284 	.word	0x20000284
 8001590:	20000204 	.word	0x20000204
 8001594:	200002b4 	.word	0x200002b4
 8001598:	200002b8 	.word	0x200002b8
 800159c:	200002b9 	.word	0x200002b9
 80015a0:	200002bd 	.word	0x200002bd
				  }
				  else
				  {
					  array[array_index] = '\0';
 80015a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015aa:	4413      	add	r3, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
					  buf_nrf_transmit[num_array_index] = atoi(array);
 80015b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 fd05 	bl	8007fc4 <atoi>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b2d9      	uxtb	r1, r3
 80015be:	4a9b      	ldr	r2, [pc, #620]	; (800182c <main+0x43c>)
 80015c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015c2:	4413      	add	r3, r2
 80015c4:	460a      	mov	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
					  num_array_index++;
 80015c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ca:	3301      	adds	r3, #1
 80015cc:	673b      	str	r3, [r7, #112]	; 0x70
					  array_index = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	677b      	str	r3, [r7, #116]	; 0x74
			  for (uint32_t i = 0; temp_buf[i] != '\0'; i++)
 80015d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015d4:	3301      	adds	r3, #1
 80015d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80015d8:	f107 021c 	add.w	r2, r7, #28
 80015dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ba      	bne.n	800155c <main+0x16c>
				  }
			  }

			  array[array_index] = '\0';
 80015e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ec:	4413      	add	r3, r2
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
			  buf_nrf_transmit[num_array_index] = atoi(array);
 80015f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 fce4 	bl	8007fc4 <atoi>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b2d9      	uxtb	r1, r3
 8001600:	4a8a      	ldr	r2, [pc, #552]	; (800182c <main+0x43c>)
 8001602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001604:	4413      	add	r3, r2
 8001606:	460a      	mov	r2, r1
 8001608:	701a      	strb	r2, [r3, #0]

			  rtc_set(buf_nrf_transmit[0], buf_nrf_transmit[1], buf_nrf_transmit[2], buf_nrf_transmit[3],
 800160a:	4b88      	ldr	r3, [pc, #544]	; (800182c <main+0x43c>)
 800160c:	7818      	ldrb	r0, [r3, #0]
 800160e:	4b87      	ldr	r3, [pc, #540]	; (800182c <main+0x43c>)
 8001610:	785c      	ldrb	r4, [r3, #1]
 8001612:	4b86      	ldr	r3, [pc, #536]	; (800182c <main+0x43c>)
 8001614:	789d      	ldrb	r5, [r3, #2]
 8001616:	4b85      	ldr	r3, [pc, #532]	; (800182c <main+0x43c>)
 8001618:	78de      	ldrb	r6, [r3, #3]
 800161a:	4b84      	ldr	r3, [pc, #528]	; (800182c <main+0x43c>)
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	4a83      	ldr	r2, [pc, #524]	; (800182c <main+0x43c>)
 8001620:	7952      	ldrb	r2, [r2, #5]
 8001622:	4982      	ldr	r1, [pc, #520]	; (800182c <main+0x43c>)
 8001624:	7989      	ldrb	r1, [r1, #6]
 8001626:	9102      	str	r1, [sp, #8]
 8001628:	9201      	str	r2, [sp, #4]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4633      	mov	r3, r6
 800162e:	462a      	mov	r2, r5
 8001630:	4621      	mov	r1, r4
 8001632:	f000 fca1 	bl	8001f78 <rtc_set>
		  }

	  }


	  if (timer_flag)
 8001636:	4b7e      	ldr	r3, [pc, #504]	; (8001830 <main+0x440>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <main+0x258>
	  {
		  timer_flag = 0;
 800163e:	4b7c      	ldr	r3, [pc, #496]	; (8001830 <main+0x440>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
		  step_timer();
 8001644:	f000 fd28 	bl	8002098 <step_timer>
	  }

	  if (step_flag)
 8001648:	4b7a      	ldr	r3, [pc, #488]	; (8001834 <main+0x444>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d05c      	beq.n	800170a <main+0x31a>
	  {
		  step_flag = 0;
 8001650:	4b78      	ldr	r3, [pc, #480]	; (8001834 <main+0x444>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]

		  prepare_transmission_data();
 8001656:	f000 fda5 	bl	80021a4 <prepare_transmission_data>

		  if (com_flag)
 800165a:	4b77      	ldr	r3, [pc, #476]	; (8001838 <main+0x448>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d04f      	beq.n	8001702 <main+0x312>
		  {
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 8001662:	4b72      	ldr	r3, [pc, #456]	; (800182c <main+0x43c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff8e 	bl	8000588 <__aeabi_f2d>
 800166c:	4680      	mov	r8, r0
 800166e:	4689      	mov	r9, r1
 8001670:	4b72      	ldr	r3, [pc, #456]	; (800183c <main+0x44c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff87 	bl	8000588 <__aeabi_f2d>
 800167a:	4604      	mov	r4, r0
 800167c:	460d      	mov	r5, r1
			  				  *((float*)(buf_nrf_transmit + 8)), buf_nrf_transmit[12], buf_nrf_transmit[13], buf_nrf_transmit[14],
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <main+0x450>)
 8001680:	681b      	ldr	r3, [r3, #0]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff80 	bl	8000588 <__aeabi_f2d>
			  				  *((float*)(buf_nrf_transmit + 8)), buf_nrf_transmit[12], buf_nrf_transmit[13], buf_nrf_transmit[14],
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <main+0x43c>)
 800168a:	7b1b      	ldrb	r3, [r3, #12]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 800168c:	461e      	mov	r6, r3
			  				  *((float*)(buf_nrf_transmit + 8)), buf_nrf_transmit[12], buf_nrf_transmit[13], buf_nrf_transmit[14],
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <main+0x43c>)
 8001690:	7b5b      	ldrb	r3, [r3, #13]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 8001692:	617b      	str	r3, [r7, #20]
			  				  *((float*)(buf_nrf_transmit + 8)), buf_nrf_transmit[12], buf_nrf_transmit[13], buf_nrf_transmit[14],
 8001694:	4b65      	ldr	r3, [pc, #404]	; (800182c <main+0x43c>)
 8001696:	7b9b      	ldrb	r3, [r3, #14]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 8001698:	613b      	str	r3, [r7, #16]
							  buf_nrf_transmit[15], buf_nrf_transmit[16], buf_nrf_transmit[17], buf_nrf_transmit[18],
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <main+0x43c>)
 800169c:	7bdb      	ldrb	r3, [r3, #15]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 800169e:	60fb      	str	r3, [r7, #12]
							  buf_nrf_transmit[15], buf_nrf_transmit[16], buf_nrf_transmit[17], buf_nrf_transmit[18],
 80016a0:	4b62      	ldr	r3, [pc, #392]	; (800182c <main+0x43c>)
 80016a2:	7c1b      	ldrb	r3, [r3, #16]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 80016a4:	60bb      	str	r3, [r7, #8]
							  buf_nrf_transmit[15], buf_nrf_transmit[16], buf_nrf_transmit[17], buf_nrf_transmit[18],
 80016a6:	4b61      	ldr	r3, [pc, #388]	; (800182c <main+0x43c>)
 80016a8:	7c5b      	ldrb	r3, [r3, #17]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 80016aa:	607b      	str	r3, [r7, #4]
							  buf_nrf_transmit[15], buf_nrf_transmit[16], buf_nrf_transmit[17], buf_nrf_transmit[18],
 80016ac:	4b5f      	ldr	r3, [pc, #380]	; (800182c <main+0x43c>)
 80016ae:	7c9b      	ldrb	r3, [r3, #18]
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 80016b0:	603b      	str	r3, [r7, #0]
							  *((uint32_t*)(buf_nrf_transmit + 19)), *((uint32_t*)(buf_nrf_transmit + 23)));
 80016b2:	4b64      	ldr	r3, [pc, #400]	; (8001844 <main+0x454>)
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 80016b4:	681a      	ldr	r2, [r3, #0]
							  *((uint32_t*)(buf_nrf_transmit + 19)), *((uint32_t*)(buf_nrf_transmit + 23)));
 80016b6:	4b64      	ldr	r3, [pc, #400]	; (8001848 <main+0x458>)
			  sprintf((char*)uart_transmit, ";%f:%f:%f:%d:%d:%d:%d:%d:%d:%d:%lu:%lu;", *((float*)buf_nrf_transmit), *((float*)(buf_nrf_transmit + 4)),
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	930c      	str	r3, [sp, #48]	; 0x30
 80016bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	920a      	str	r2, [sp, #40]	; 0x28
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	9209      	str	r2, [sp, #36]	; 0x24
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	9208      	str	r2, [sp, #32]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	9207      	str	r2, [sp, #28]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	9206      	str	r2, [sp, #24]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	9305      	str	r3, [sp, #20]
 80016d6:	9604      	str	r6, [sp, #16]
 80016d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016dc:	e9cd 4500 	strd	r4, r5, [sp]
 80016e0:	4642      	mov	r2, r8
 80016e2:	464b      	mov	r3, r9
 80016e4:	4959      	ldr	r1, [pc, #356]	; (800184c <main+0x45c>)
 80016e6:	485a      	ldr	r0, [pc, #360]	; (8001850 <main+0x460>)
 80016e8:	f007 f8fe 	bl	80088e8 <siprintf>
			  		  HAL_UART_Transmit(&huart2, uart_transmit, strlen((char*)uart_transmit), 100);
 80016ec:	4858      	ldr	r0, [pc, #352]	; (8001850 <main+0x460>)
 80016ee:	f7fe fd8f 	bl	8000210 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	2364      	movs	r3, #100	; 0x64
 80016f8:	4955      	ldr	r1, [pc, #340]	; (8001850 <main+0x460>)
 80016fa:	4856      	ldr	r0, [pc, #344]	; (8001854 <main+0x464>)
 80016fc:	f005 fdc3 	bl	8007286 <HAL_UART_Transmit>
 8001700:	e003      	b.n	800170a <main+0x31a>
		  }
		  else
		  {
			  NRF24_Transmit_base(buf_nrf_transmit, 27);
 8001702:	211b      	movs	r1, #27
 8001704:	4849      	ldr	r0, [pc, #292]	; (800182c <main+0x43c>)
 8001706:	f7ff fe03 	bl	8001310 <NRF24_Transmit_base>
		  }
	  }

	  if (NRF24_IRQ)
 800170a:	4b53      	ldr	r3, [pc, #332]	; (8001858 <main+0x468>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d050      	beq.n	80017b4 <main+0x3c4>
	  {
		  uint8_t r_rx_payload = (uint8_t)R_RX_PAYLOAD;
 8001712:	2361      	movs	r3, #97	; 0x61
 8001714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  uint8_t temp_status = NRF24_ReadReg((uint8_t)STATUS);
 8001718:	2007      	movs	r0, #7
 800171a:	f7ff fc93 	bl	8001044 <NRF24_ReadReg>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

		  NRF24_IRQ = 0;
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <main+0x468>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

		  if (temp_status & (1UL << RX_DR))
 800172a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d017      	beq.n	8001766 <main+0x376>
		  {
			  NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 8001736:	2007      	movs	r0, #7
 8001738:	f7ff fc84 	bl	8001044 <NRF24_ReadReg>
 800173c:	4603      	mov	r3, r0
 800173e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	2007      	movs	r0, #7
 8001748:	f7ff fcb0 	bl	80010ac <NRF24_WriteReg>
			  NRF24_Read_Buf(r_rx_payload, buf_nrf_receive, 27);
 800174c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001750:	221b      	movs	r2, #27
 8001752:	4942      	ldr	r1, [pc, #264]	; (800185c <main+0x46c>)
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fcd7 	bl	8001108 <NRF24_Read_Buf>
			  NRF24_Receive_base();
 800175a:	f7ff fe09 	bl	8001370 <NRF24_Receive_base>

			  nrf_receive_flag = 1;
 800175e:	4b40      	ldr	r3, [pc, #256]	; (8001860 <main+0x470>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e026      	b.n	80017b4 <main+0x3c4>
		  }
		  else if (temp_status & (1UL << TX_DS))
 8001766:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00d      	beq.n	800178e <main+0x39e>
		  {
			  NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 8001772:	2007      	movs	r0, #7
 8001774:	f7ff fc66 	bl	8001044 <NRF24_ReadReg>
 8001778:	4603      	mov	r3, r0
 800177a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	2007      	movs	r0, #7
 8001784:	f7ff fc92 	bl	80010ac <NRF24_WriteReg>
			  NRF24_Receive_base();
 8001788:	f7ff fdf2 	bl	8001370 <NRF24_Receive_base>
 800178c:	e012      	b.n	80017b4 <main+0x3c4>
		  }
		  else if (temp_status & (1UL << MAX_RT))
 800178e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00c      	beq.n	80017b4 <main+0x3c4>
		  {
			  NRF24_WriteReg(STATUS, NRF24_ReadReg((uint8_t)STATUS) | 0x70); // clear interupt
 800179a:	2007      	movs	r0, #7
 800179c:	f7ff fc52 	bl	8001044 <NRF24_ReadReg>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	2007      	movs	r0, #7
 80017ac:	f7ff fc7e 	bl	80010ac <NRF24_WriteReg>
			  NRF24_Receive_base();
 80017b0:	f7ff fdde 	bl	8001370 <NRF24_Receive_base>
		  }
	  }


	  if (nrf_receive_flag)
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <main+0x470>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f43f ae4e 	beq.w	800145a <main+0x6a>
	  {
		  nrf_receive_flag = 0;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <main+0x470>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]

		  if (buf_nrf_receive[0] == 'a')
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <main+0x46c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b61      	cmp	r3, #97	; 0x61
 80017ca:	d108      	bne.n	80017de <main+0x3ee>
		  {
			  init_timer(*((uint32_t*)(buf_nrf_receive + 1)), *((uint32_t*)(buf_nrf_receive + 5)));
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <main+0x474>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <main+0x478>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f000 fc10 	bl	8001ffc <init_timer>
 80017dc:	e63d      	b.n	800145a <main+0x6a>
		  }
		  else if (buf_nrf_receive[0] == 'u')
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <main+0x46c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b75      	cmp	r3, #117	; 0x75
 80017e4:	d103      	bne.n	80017ee <main+0x3fe>
		  {
			  com_flag = 1;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <main+0x448>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e635      	b.n	800145a <main+0x6a>
		  }
		  else if (buf_nrf_receive[0] == 'n')
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <main+0x46c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b6e      	cmp	r3, #110	; 0x6e
 80017f4:	d103      	bne.n	80017fe <main+0x40e>
		  {
			  com_flag = 0;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <main+0x448>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e62d      	b.n	800145a <main+0x6a>
		  }
		  else
		  {
			  rtc_set(buf_nrf_receive[0], buf_nrf_receive[1], buf_nrf_receive[2], buf_nrf_receive[3],
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <main+0x46c>)
 8001800:	7818      	ldrb	r0, [r3, #0]
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <main+0x46c>)
 8001804:	785c      	ldrb	r4, [r3, #1]
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <main+0x46c>)
 8001808:	789d      	ldrb	r5, [r3, #2]
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <main+0x46c>)
 800180c:	78de      	ldrb	r6, [r3, #3]
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <main+0x46c>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <main+0x46c>)
 8001814:	7952      	ldrb	r2, [r2, #5]
 8001816:	4911      	ldr	r1, [pc, #68]	; (800185c <main+0x46c>)
 8001818:	7989      	ldrb	r1, [r1, #6]
 800181a:	9102      	str	r1, [sp, #8]
 800181c:	9201      	str	r2, [sp, #4]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	4633      	mov	r3, r6
 8001822:	462a      	mov	r2, r5
 8001824:	4621      	mov	r1, r4
 8001826:	f000 fba7 	bl	8001f78 <rtc_set>
	  if (uart_flag)
 800182a:	e616      	b.n	800145a <main+0x6a>
 800182c:	200002b8 	.word	0x200002b8
 8001830:	20000285 	.word	0x20000285
 8001834:	200002b5 	.word	0x200002b5
 8001838:	200002b4 	.word	0x200002b4
 800183c:	200002bc 	.word	0x200002bc
 8001840:	200002c0 	.word	0x200002c0
 8001844:	200002cb 	.word	0x200002cb
 8001848:	200002cf 	.word	0x200002cf
 800184c:	0800a1f0 	.word	0x0800a1f0
 8001850:	20000244 	.word	0x20000244
 8001854:	20000480 	.word	0x20000480
 8001858:	20000200 	.word	0x20000200
 800185c:	200002d4 	.word	0x200002d4
 8001860:	200002b6 	.word	0x200002b6
 8001864:	200002d5 	.word	0x200002d5
 8001868:	200002d9 	.word	0x200002d9

0800186c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0ac      	sub	sp, #176	; 0xb0
 8001870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001876:	2234      	movs	r2, #52	; 0x34
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f006 fbd0 	bl	8008020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	225c      	movs	r2, #92	; 0x5c
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f006 fbc1 	bl	8008020 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <SystemClock_Config+0x128>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <SystemClock_Config+0x128>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <SystemClock_Config+0x128>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <SystemClock_Config+0x12c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a35      	ldr	r2, [pc, #212]	; (8001998 <SystemClock_Config+0x12c>)
 80018c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <SystemClock_Config+0x12c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018d6:	230a      	movs	r3, #10
 80018d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e0:	2301      	movs	r3, #1
 80018e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e6:	2310      	movs	r3, #16
 80018e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018ec:	2301      	movs	r3, #1
 80018ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018fe:	2308      	movs	r3, #8
 8001900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001904:	23b4      	movs	r3, #180	; 0xb4
 8001906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fd4d 	bl	80053c0 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800192c:	f000 fc92 	bl	8002254 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001930:	f002 ff60 	bl	80047f4 <HAL_PWREx_EnableOverDrive>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800193a:	f000 fc8b 	bl	8002254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193e:	230f      	movs	r3, #15
 8001940:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001942:	2302      	movs	r3, #2
 8001944:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800194a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800194e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001950:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001954:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001956:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800195a:	2105      	movs	r1, #5
 800195c:	4618      	mov	r0, r3
 800195e:	f002 ff99 	bl	8004894 <HAL_RCC_ClockConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001968:	f000 fc74 	bl	8002254 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800196c:	2320      	movs	r3, #32
 800196e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4618      	mov	r0, r3
 800197c:	f003 f8a4 	bl	8004ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001986:	f000 fc65 	bl	8002254 <Error_Handler>
  }
}
 800198a:	bf00      	nop
 800198c:	37b0      	adds	r7, #176	; 0xb0
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <MX_ADC1_Init+0x9c>)
 80019b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <MX_ADC1_Init+0xa0>)
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019fc:	f000 ff8e 	bl	800291c <HAL_ADC_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a06:	f000 fc25 	bl	8002254 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_ADC1_Init+0x98>)
 8001a1c:	f001 f91a 	bl	8002c54 <HAL_ADC_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a26:	f000 fc15 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000354 	.word	0x20000354
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	0f000001 	.word	0x0f000001

08001a40 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_DAC_Init+0x4c>)
 8001a50:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <MX_DAC_Init+0x50>)
 8001a52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_DAC_Init+0x4c>)
 8001a56:	f001 fc3c 	bl	80032d2 <HAL_DAC_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a60:	f000 fbf8 	bl	8002254 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_DAC_Init+0x4c>)
 8001a74:	f001 fcd0 	bl	8003418 <HAL_DAC_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a7e:	f000 fbe9 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000039c 	.word	0x2000039c
 8001a90:	40007400 	.word	0x40007400

08001a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <MX_I2C1_Init+0x54>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa0:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_I2C1_Init+0x58>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ad2:	f001 ff05 	bl	80038e0 <HAL_I2C_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001adc:	f000 fbba 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000300 	.word	0x20000300
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	000186a0 	.word	0x000186a0

08001af0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	__HAL_RCC_RTC_ENABLE();
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <MX_RTC_Init+0xb8>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <MX_RTC_Init+0xc0>)
 8001b12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b1c:	227f      	movs	r2, #127	; 0x7f
 8001b1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b38:	481c      	ldr	r0, [pc, #112]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b3a:	f003 fe9b 	bl	8005874 <HAL_RTC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001b44:	f000 fb86 	bl	8002254 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	4812      	ldr	r0, [pc, #72]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b64:	f003 ff17 	bl	8005996 <HAL_RTC_SetTime>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001b6e:	f000 fb71 	bl	8002254 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b72:	2301      	movs	r3, #1
 8001b74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001b76:	2301      	movs	r3, #1
 8001b78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <MX_RTC_Init+0xbc>)
 8001b8a:	f004 f81f 	bl	8005bcc <HAL_RTC_SetDate>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001b94:	f000 fb5e 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  __HAL_RCC_RTC_ENABLE();
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <MX_RTC_Init+0xb8>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	42470e3c 	.word	0x42470e3c
 8001bac:	200003c4 	.word	0x200003c4
 8001bb0:	40002800 	.word	0x40002800

08001bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <MX_SPI1_Init+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001be8:	2210      	movs	r2, #16
 8001bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001c00:	220a      	movs	r2, #10
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001c06:	f004 f967 	bl	8005ed8 <HAL_SPI_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c10:	f000 fb20 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200003e8 	.word	0x200003e8
 8001c1c:	40013000 	.word	0x40013000

08001c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c46:	222d      	movs	r2, #45	; 0x2d
 8001c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c66:	f004 fe8b 	bl	8006980 <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c70:	f000 faf0 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c82:	f004 ffff 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c8c:	f000 fae2 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c9e:	f005 fa15 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ca8:	f000 fad4 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000440 	.word	0x20000440

08001cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_USART2_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	f005 fa7c 	bl	80071ec <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 faab 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000480 	.word	0x20000480
 8001d08:	40004400 	.word	0x40004400

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_GPIO_Init+0xc0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2130      	movs	r1, #48	; 0x30
 8001d7a:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <MX_GPIO_Init+0xc4>)
 8001d7c:	f001 fd72 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001d80:	2330      	movs	r3, #48	; 0x30
 8001d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <MX_GPIO_Init+0xc4>)
 8001d98:	f001 fbd2 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_GPIO_Init+0xc8>)
 8001da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <MX_GPIO_Init+0xcc>)
 8001db0:	f001 fbc6 	bl	8003540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2106      	movs	r1, #6
 8001db8:	2006      	movs	r0, #6
 8001dba:	f001 fa54 	bl	8003266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dbe:	2006      	movs	r0, #6
 8001dc0:	f001 fa6d 	bl	800329e <HAL_NVIC_EnableIRQ>

}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	10210000 	.word	0x10210000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	00000000 	.word	0x00000000

08001de0 <read_temp_humi>:

/* USER CODE BEGIN 4 */
void read_temp_humi()
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af02      	add	r7, sp, #8
	uint8_t buf[4] = {0};
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]

	buf[0] = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c1, 0x50, buf, 1, HAL_MAX_DELAY);
 8001dee:	1d3a      	adds	r2, r7, #4
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	2150      	movs	r1, #80	; 0x50
 8001dfa:	4835      	ldr	r0, [pc, #212]	; (8001ed0 <read_temp_humi+0xf0>)
 8001dfc:	f001 fea8 	bl	8003b50 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x50, buf, 4, HAL_MAX_DELAY);
 8001e00:	1d3a      	adds	r2, r7, #4
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2304      	movs	r3, #4
 8001e0a:	2150      	movs	r1, #80	; 0x50
 8001e0c:	4830      	ldr	r0, [pc, #192]	; (8001ed0 <read_temp_humi+0xf0>)
 8001e0e:	f001 ff9d 	bl	8003d4c <HAL_I2C_Master_Receive>

    humidity = (float)(((buf[0] & 0x3F ) << 8) + buf[1]) / 16384.0 * 100.0;
 8001e12:	793b      	ldrb	r3, [r7, #4]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001e1a:	797a      	ldrb	r2, [r7, #5]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e26:	ee17 0a90 	vmov	r0, s15
 8001e2a:	f7fe fbad 	bl	8000588 <__aeabi_f2d>
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <read_temp_humi+0xf4>)
 8001e34:	f7fe fd2a 	bl	800088c <__aeabi_ddiv>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	4621      	mov	r1, r4
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <read_temp_humi+0xf8>)
 8001e46:	f7fe fbf7 	bl	8000638 <__aeabi_dmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4621      	mov	r1, r4
 8001e52:	f7fe fec9 	bl	8000be8 <__aeabi_d2f>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <read_temp_humi+0xfc>)
 8001e5a:	601a      	str	r2, [r3, #0]
    temperature = (float)((unsigned)(buf[2]  * 64) + (unsigned)(buf[3] >> 2 )) / 16384.0 * 165.0 - 40.0;
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	019b      	lsls	r3, r3, #6
 8001e60:	461a      	mov	r2, r3
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e72:	ee17 0a90 	vmov	r0, s15
 8001e76:	f7fe fb87 	bl	8000588 <__aeabi_f2d>
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <read_temp_humi+0xf4>)
 8001e80:	f7fe fd04 	bl	800088c <__aeabi_ddiv>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	a30e      	add	r3, pc, #56	; (adr r3, 8001ec8 <read_temp_humi+0xe8>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fbd1 	bl	8000638 <__aeabi_dmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <read_temp_humi+0x100>)
 8001ea4:	f7fe fa10 	bl	80002c8 <__aeabi_dsub>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	460c      	mov	r4, r1
 8001eac:	4618      	mov	r0, r3
 8001eae:	4621      	mov	r1, r4
 8001eb0:	f7fe fe9a 	bl	8000be8 <__aeabi_d2f>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <read_temp_humi+0x104>)
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	4064a000 	.word	0x4064a000
 8001ed0:	20000300 	.word	0x20000300
 8001ed4:	40d00000 	.word	0x40d00000
 8001ed8:	40590000 	.word	0x40590000
 8001edc:	200002b0 	.word	0x200002b0
 8001ee0:	40440000 	.word	0x40440000
 8001ee4:	200002ac 	.word	0x200002ac

08001ee8 <read_adc>:


float read_adc()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	uint32_t temp = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
	float ret = 0;
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	603b      	str	r3, [r7, #0]
	i++;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <read_adc+0x80>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <read_adc+0x80>)
 8001f02:	701a      	strb	r2, [r3, #0]

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i*15);
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <read_adc+0x80>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	4815      	ldr	r0, [pc, #84]	; (8001f6c <read_adc+0x84>)
 8001f16:	f001 facc 	bl	80034b2 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <read_adc+0x84>)
 8001f1e:	f001 f9fa 	bl	8003316 <HAL_DAC_Start>

    HAL_ADC_Start(&hadc1);
 8001f22:	4813      	ldr	r0, [pc, #76]	; (8001f70 <read_adc+0x88>)
 8001f24:	f000 fd3e 	bl	80029a4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	4810      	ldr	r0, [pc, #64]	; (8001f70 <read_adc+0x88>)
 8001f2e:	f000 fdff 	bl	8002b30 <HAL_ADC_PollForConversion>
    temp = HAL_ADC_GetValue(&hadc1);
 8001f32:	480f      	ldr	r0, [pc, #60]	; (8001f70 <read_adc+0x88>)
 8001f34:	f000 fe80 	bl	8002c38 <HAL_ADC_GetValue>
 8001f38:	6078      	str	r0, [r7, #4]
    HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	480b      	ldr	r0, [pc, #44]	; (8001f6c <read_adc+0x84>)
 8001f3e:	f001 fa50 	bl	80033e2 <HAL_DAC_Stop>

    ret = (3.3f / 4095) * temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001f74 <read_adc+0x8c>
 8001f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f54:	edc7 7a00 	vstr	s15, [r7]

    return ret;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	ee07 3a90 	vmov	s15, r3
}
 8001f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200002ef 	.word	0x200002ef
 8001f6c:	2000039c 	.word	0x2000039c
 8001f70:	20000354 	.word	0x20000354
 8001f74:	3a534067 	.word	0x3a534067

08001f78 <rtc_set>:

void rtc_set(
        uint8_t year, uint8_t month, uint8_t day, uint8_t week_day,
        uint8_t hour, uint8_t min, uint8_t sec
        )
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4604      	mov	r4, r0
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71bb      	strb	r3, [r7, #6]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	717b      	strb	r3, [r7, #5]
 8001f92:	4613      	mov	r3, r2
 8001f94:	713b      	strb	r3, [r7, #4]
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    memset(&time, 0, sizeof(time));
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	2214      	movs	r2, #20
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f006 f83e 	bl	8008020 <memset>
    memset(&date, 0, sizeof(date));
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	2204      	movs	r2, #4
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f006 f837 	bl	8008020 <memset>

    date.WeekDay = week_day;
 8001fb2:	793b      	ldrb	r3, [r7, #4]
 8001fb4:	723b      	strb	r3, [r7, #8]
    date.Year = year;
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	72fb      	strb	r3, [r7, #11]
    date.Month = month;
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	727b      	strb	r3, [r7, #9]
    date.Date = day;
 8001fbe:	797b      	ldrb	r3, [r7, #5]
 8001fc0:	72bb      	strb	r3, [r7, #10]

    HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <rtc_set+0x80>)
 8001fcc:	f003 fdfe 	bl	8005bcc <HAL_RTC_SetDate>

    time.Hours = hour;
 8001fd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fd4:	733b      	strb	r3, [r7, #12]
    time.Minutes = min;
 8001fd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fda:	737b      	strb	r3, [r7, #13]
    time.Seconds = sec;
 8001fdc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001fe0:	73bb      	strb	r3, [r7, #14]

    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <rtc_set+0x80>)
 8001fec:	f003 fcd3 	bl	8005996 <HAL_RTC_SetTime>
}
 8001ff0:	bf00      	nop
 8001ff2:	3724      	adds	r7, #36	; 0x24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	200003c4 	.word	0x200003c4

08001ffc <init_timer>:


void init_timer(uint32_t sec, uint32_t aver)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	uint32_t micro_sec = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
	average = aver;
 800200a:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <init_timer+0x78>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6013      	str	r3, [r2, #0]
	seconds = sec;
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <init_timer+0x7c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Stop_IT(&htim2);
 8002016:	4819      	ldr	r0, [pc, #100]	; (800207c <init_timer+0x80>)
 8002018:	f004 fd01 	bl	8006a1e <HAL_TIM_Base_Stop_IT>
	timer_flag = 0;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <init_timer+0x84>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
	timer_counter = 0;
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <init_timer+0x88>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
	humi_sum = 0;
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <init_timer+0x8c>)
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
	temp_sum = 0;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <init_timer+0x90>)
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
	adc_sum = 0;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <init_timer+0x94>)
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

	micro_sec = (1000000 * seconds) / average;
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <init_timer+0x7c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <init_timer+0x98>)
 8002046:	fb02 f203 	mul.w	r2, r2, r3
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <init_timer+0x78>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	60fb      	str	r3, [r7, #12]
	TIM2->CNT = micro_sec;
 8002054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->ARR = micro_sec;
 800205c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	62d3      	str	r3, [r2, #44]	; 0x2c

	HAL_TIM_Base_Start_IT(&htim2);
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <init_timer+0x80>)
 8002066:	f004 fcb6 	bl	80069d6 <HAL_TIM_Base_Start_IT>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000290 	.word	0x20000290
 8002078:	2000028c 	.word	0x2000028c
 800207c:	20000440 	.word	0x20000440
 8002080:	20000285 	.word	0x20000285
 8002084:	20000288 	.word	0x20000288
 8002088:	20000294 	.word	0x20000294
 800208c:	20000298 	.word	0x20000298
 8002090:	2000029c 	.word	0x2000029c
 8002094:	000f4240 	.word	0x000f4240

08002098 <step_timer>:



void step_timer()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	read_temp_humi();
 800209c:	f7ff fea0 	bl	8001de0 <read_temp_humi>
	humi_sum += humidity;
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <step_timer+0xe0>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	4b35      	ldr	r3, [pc, #212]	; (800217c <step_timer+0xe4>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <step_timer+0xe0>)
 80020b2:	edc3 7a00 	vstr	s15, [r3]
	temp_sum += temperature;
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <step_timer+0xe8>)
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <step_timer+0xec>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <step_timer+0xe8>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	adc_sum += read_adc();
 80020cc:	f7ff ff0c 	bl	8001ee8 <read_adc>
 80020d0:	eeb0 7a40 	vmov.f32	s14, s0
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <step_timer+0xf0>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <step_timer+0xf0>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]

	timer_counter++;
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <step_timer+0xf4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a28      	ldr	r2, [pc, #160]	; (800218c <step_timer+0xf4>)
 80020ec:	6013      	str	r3, [r2, #0]

	if (timer_counter == average)
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <step_timer+0xf4>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b27      	ldr	r3, [pc, #156]	; (8002190 <step_timer+0xf8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d13b      	bne.n	8002172 <step_timer+0xda>
	{
		humi = humi_sum / average;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <step_timer+0xe0>)
 80020fc:	edd3 6a00 	vldr	s13, [r3]
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <step_timer+0xf8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800210c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <step_timer+0xfc>)
 8002112:	edc3 7a00 	vstr	s15, [r3]
		temp = temp_sum / average;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <step_timer+0xe8>)
 8002118:	edd3 6a00 	vldr	s13, [r3]
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <step_timer+0xf8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <step_timer+0x100>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
		adc = adc_sum / average;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <step_timer+0xf0>)
 8002134:	edd3 6a00 	vldr	s13, [r3]
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <step_timer+0xf8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <step_timer+0x104>)
 800214a:	edc3 7a00 	vstr	s15, [r3]

		humi_sum = 0;
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <step_timer+0xe0>)
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
		temp_sum = 0;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <step_timer+0xe8>)
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
		adc_sum = 0;
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <step_timer+0xf0>)
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
		timer_counter = 0;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <step_timer+0xf4>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
		step_flag = 1;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <step_timer+0x108>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
	}
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000294 	.word	0x20000294
 800217c:	200002b0 	.word	0x200002b0
 8002180:	20000298 	.word	0x20000298
 8002184:	200002ac 	.word	0x200002ac
 8002188:	2000029c 	.word	0x2000029c
 800218c:	20000288 	.word	0x20000288
 8002190:	20000290 	.word	0x20000290
 8002194:	200002a0 	.word	0x200002a0
 8002198:	200002a4 	.word	0x200002a4
 800219c:	200002a8 	.word	0x200002a8
 80021a0:	200002b5 	.word	0x200002b5

080021a4 <prepare_transmission_data>:


void prepare_transmission_data()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80021a8:	2200      	movs	r2, #0
 80021aa:	491d      	ldr	r1, [pc, #116]	; (8002220 <prepare_transmission_data+0x7c>)
 80021ac:	481d      	ldr	r0, [pc, #116]	; (8002224 <prepare_transmission_data+0x80>)
 80021ae:	f003 fcaf 	bl	8005b10 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80021b2:	2200      	movs	r2, #0
 80021b4:	491c      	ldr	r1, [pc, #112]	; (8002228 <prepare_transmission_data+0x84>)
 80021b6:	481b      	ldr	r0, [pc, #108]	; (8002224 <prepare_transmission_data+0x80>)
 80021b8:	f003 fdaf 	bl	8005d1a <HAL_RTC_GetDate>

	*((float*)buf_nrf_transmit) = humi;
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <prepare_transmission_data+0x88>)
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <prepare_transmission_data+0x8c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6013      	str	r3, [r2, #0]
	*((float*)(buf_nrf_transmit + 4)) = temp;
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <prepare_transmission_data+0x90>)
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <prepare_transmission_data+0x94>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6013      	str	r3, [r2, #0]
	*((float*)(buf_nrf_transmit + 8)) = adc;
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <prepare_transmission_data+0x98>)
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <prepare_transmission_data+0x9c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6013      	str	r3, [r2, #0]
	buf_nrf_transmit[12] = rtc_date.Year;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <prepare_transmission_data+0x84>)
 80021d6:	78da      	ldrb	r2, [r3, #3]
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <prepare_transmission_data+0x88>)
 80021da:	731a      	strb	r2, [r3, #12]
	buf_nrf_transmit[13] = rtc_date.Month;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <prepare_transmission_data+0x84>)
 80021de:	785a      	ldrb	r2, [r3, #1]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <prepare_transmission_data+0x88>)
 80021e2:	735a      	strb	r2, [r3, #13]
	buf_nrf_transmit[14] = rtc_date.Date;
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <prepare_transmission_data+0x84>)
 80021e6:	789a      	ldrb	r2, [r3, #2]
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <prepare_transmission_data+0x88>)
 80021ea:	739a      	strb	r2, [r3, #14]
	buf_nrf_transmit[15] = rtc_date.WeekDay;
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <prepare_transmission_data+0x84>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <prepare_transmission_data+0x88>)
 80021f2:	73da      	strb	r2, [r3, #15]
	buf_nrf_transmit[16] = rtc_time.Hours;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <prepare_transmission_data+0x7c>)
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <prepare_transmission_data+0x88>)
 80021fa:	741a      	strb	r2, [r3, #16]
	buf_nrf_transmit[17] = rtc_time.Minutes;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <prepare_transmission_data+0x7c>)
 80021fe:	785a      	ldrb	r2, [r3, #1]
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <prepare_transmission_data+0x88>)
 8002202:	745a      	strb	r2, [r3, #17]
	buf_nrf_transmit[18] = rtc_time.Seconds;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <prepare_transmission_data+0x7c>)
 8002206:	789a      	ldrb	r2, [r3, #2]
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <prepare_transmission_data+0x88>)
 800220a:	749a      	strb	r2, [r3, #18]
	*((uint32_t*)(buf_nrf_transmit + 19)) = seconds;
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <prepare_transmission_data+0xa0>)
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <prepare_transmission_data+0xa4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6013      	str	r3, [r2, #0]
	*((uint32_t*)(buf_nrf_transmit + 23)) = average;
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <prepare_transmission_data+0xa8>)
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <prepare_transmission_data+0xac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6013      	str	r3, [r2, #0]

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200003b0 	.word	0x200003b0
 8002224:	200003c4 	.word	0x200003c4
 8002228:	200003e4 	.word	0x200003e4
 800222c:	200002b8 	.word	0x200002b8
 8002230:	200002a0 	.word	0x200002a0
 8002234:	200002bc 	.word	0x200002bc
 8002238:	200002a4 	.word	0x200002a4
 800223c:	200002c0 	.word	0x200002c0
 8002240:	200002a8 	.word	0x200002a8
 8002244:	200002cb 	.word	0x200002cb
 8002248:	2000028c 	.word	0x2000028c
 800224c:	200002cf 	.word	0x200002cf
 8002250:	20000290 	.word	0x20000290

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		HAL_Delay(1000);
 8002258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800225c:	f000 fb3c 	bl	80028d8 <HAL_Delay>
 8002260:	e7fa      	b.n	8002258 <Error_Handler+0x4>
	...

08002264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_MspInit+0x4c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_MspInit+0x4c>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_MspInit+0x4c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_MspInit+0x4c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_MspInit+0x4c>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_ADC_MspInit+0x7c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d127      	bne.n	8002326 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_ADC_MspInit+0x80>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002312:	2303      	movs	r3, #3
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_ADC_MspInit+0x84>)
 8002322:	f001 f90d 	bl	8003540 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40012000 	.word	0x40012000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <HAL_DAC_MspInit+0x7c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d127      	bne.n	80023ae <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_DAC_MspInit+0x80>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <HAL_DAC_MspInit+0x80>)
 8002368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_DAC_MspInit+0x80>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_DAC_MspInit+0x80>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_DAC_MspInit+0x80>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_DAC_MspInit+0x80>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002396:	2310      	movs	r3, #16
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239a:	2303      	movs	r3, #3
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <HAL_DAC_MspInit+0x84>)
 80023aa:	f001 f8c9 	bl	8003540 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40007400 	.word	0x40007400
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020000 	.word	0x40020000

080023c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_I2C_MspInit+0x84>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d12c      	bne.n	8002440 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_I2C_MspInit+0x88>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_I2C_MspInit+0x88>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_I2C_MspInit+0x88>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002408:	2312      	movs	r3, #18
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240c:	2301      	movs	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002414:	2304      	movs	r3, #4
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	480c      	ldr	r0, [pc, #48]	; (8002450 <HAL_I2C_MspInit+0x8c>)
 8002420:	f001 f88e 	bl	8003540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_I2C_MspInit+0x88>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_I2C_MspInit+0x88>)
 800242e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002432:	6413      	str	r3, [r2, #64]	; 0x40
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_I2C_MspInit+0x88>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40005400 	.word	0x40005400
 800244c:	40023800 	.word	0x40023800
 8002450:	40020400 	.word	0x40020400

08002454 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a05      	ldr	r2, [pc, #20]	; (8002478 <HAL_RTC_MspInit+0x24>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d102      	bne.n	800246c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RTC_MspInit+0x28>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40002800 	.word	0x40002800
 800247c:	42470e3c 	.word	0x42470e3c

08002480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_SPI_MspInit+0x84>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12b      	bne.n	80024fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_SPI_MspInit+0x88>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_SPI_MspInit+0x88>)
 80024ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_SPI_MspInit+0x88>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_SPI_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_SPI_MspInit+0x88>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_SPI_MspInit+0x88>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024da:	23e0      	movs	r3, #224	; 0xe0
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ea:	2305      	movs	r3, #5
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <HAL_SPI_MspInit+0x8c>)
 80024f6:	f001 f823 	bl	8003540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	; 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40013000 	.word	0x40013000
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000

08002510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d115      	bne.n	800254e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_TIM_Base_MspInit+0x48>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <HAL_TIM_Base_MspInit+0x48>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_TIM_Base_MspInit+0x48>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2107      	movs	r1, #7
 8002542:	201c      	movs	r0, #28
 8002544:	f000 fe8f 	bl	8003266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002548:	201c      	movs	r0, #28
 800254a:	f000 fea8 	bl	800329e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0x94>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d133      	bne.n	80025e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_UART_MspInit+0x98>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_UART_MspInit+0x98>)
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_UART_MspInit+0x98>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_UART_MspInit+0x98>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_UART_MspInit+0x98>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_UART_MspInit+0x98>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025b6:	230c      	movs	r3, #12
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025c6:	2307      	movs	r3, #7
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4809      	ldr	r0, [pc, #36]	; (80025f8 <HAL_UART_MspInit+0x9c>)
 80025d2:	f000 ffb5 	bl	8003540 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2108      	movs	r1, #8
 80025da:	2026      	movs	r0, #38	; 0x26
 80025dc:	f000 fe43 	bl	8003266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025e0:	2026      	movs	r0, #38	; 0x26
 80025e2:	f000 fe5c 	bl	800329e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40004400 	.word	0x40004400
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020000 	.word	0x40020000

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <HardFault_Handler+0x4>

08002610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <MemManage_Handler+0x4>

08002616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <UsageFault_Handler+0x4>

08002622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002650:	f000 f922 	bl	8002898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}

08002658 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	NRF24_IRQ = 1;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <EXTI0_IRQHandler+0x14>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002662:	2001      	movs	r0, #1
 8002664:	f001 f918 	bl	8003898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000200 	.word	0x20000200

08002670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	timer_flag = 1;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <TIM2_IRQHandler+0x14>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800267a:	4803      	ldr	r0, [pc, #12]	; (8002688 <TIM2_IRQHandler+0x18>)
 800267c:	f004 f9fa 	bl	8006a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000285 	.word	0x20000285
 8002688:	20000440 	.word	0x20000440

0800268c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	static uint32_t index = 0;

	if ((USART2->SR & USART_SR_RXNE) != 0)
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <USART2_IRQHandler+0x68>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d026      	beq.n	80026ea <USART2_IRQHandler+0x5e>
	{
		if (USART2->DR == '\n' || USART2->DR == '\r' || USART2->DR == '\0')
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <USART2_IRQHandler+0x68>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b0a      	cmp	r3, #10
 80026a2:	d007      	beq.n	80026b4 <USART2_IRQHandler+0x28>
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <USART2_IRQHandler+0x68>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b0d      	cmp	r3, #13
 80026aa:	d003      	beq.n	80026b4 <USART2_IRQHandler+0x28>
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <USART2_IRQHandler+0x68>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <USART2_IRQHandler+0x40>
		{
			uart_receve[index] = '\0';
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <USART2_IRQHandler+0x6c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a10      	ldr	r2, [pc, #64]	; (80026fc <USART2_IRQHandler+0x70>)
 80026ba:	2100      	movs	r1, #0
 80026bc:	54d1      	strb	r1, [r2, r3]
			index = 0;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <USART2_IRQHandler+0x6c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
			uart_flag = 1;
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <USART2_IRQHandler+0x74>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e00e      	b.n	80026ea <USART2_IRQHandler+0x5e>
		}
		else
		{
			uart_receve[index] = USART2->DR;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <USART2_IRQHandler+0x68>)
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <USART2_IRQHandler+0x6c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b2d1      	uxtb	r1, r2
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <USART2_IRQHandler+0x70>)
 80026d8:	54d1      	strb	r1, [r2, r3]
			index++;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <USART2_IRQHandler+0x6c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <USART2_IRQHandler+0x6c>)
 80026e2:	6013      	str	r3, [r2, #0]
			uart_flag = 0;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <USART2_IRQHandler+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
		}

	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <USART2_IRQHandler+0x78>)
 80026ec:	f004 fe64 	bl	80073b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40004400 	.word	0x40004400
 80026f8:	200002f0 	.word	0x200002f0
 80026fc:	20000204 	.word	0x20000204
 8002700:	20000284 	.word	0x20000284
 8002704:	20000480 	.word	0x20000480

08002708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <_sbrk+0x5c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <_sbrk+0x60>)
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_sbrk+0x64>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <_sbrk+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d207      	bcs.n	8002748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002738:	f005 fc48 	bl	8007fcc <__errno>
 800273c:	4602      	mov	r2, r0
 800273e:	230c      	movs	r3, #12
 8002740:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e009      	b.n	800275c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <_sbrk+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20020000 	.word	0x20020000
 8002768:	00000400 	.word	0x00000400
 800276c:	200002f4 	.word	0x200002f4
 8002770:	200004c8 	.word	0x200004c8

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <SystemInit+0x28>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <SystemInit+0x28>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <SystemInit+0x28>)
 800278a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800278e:	609a      	str	r2, [r3, #8]
#endif
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027a6:	e003      	b.n	80027b0 <LoopCopyDataInit>

080027a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027ae:	3104      	adds	r1, #4

080027b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027b8:	d3f6      	bcc.n	80027a8 <CopyDataInit>
  ldr  r2, =_sbss
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027bc:	e002      	b.n	80027c4 <LoopFillZerobss>

080027be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027c0:	f842 3b04 	str.w	r3, [r2], #4

080027c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027c8:	d3f9      	bcc.n	80027be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ca:	f7ff ffd3 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ce:	f005 fc03 	bl	8007fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d2:	f7fe fe0d 	bl	80013f0 <main>
  bx  lr    
 80027d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027dc:	0800a4a0 	.word	0x0800a4a0
  ldr  r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027e4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80027e8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80027ec:	200004c8 	.word	0x200004c8

080027f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC_IRQHandler>
	...

080027f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <HAL_Init+0x40>)
 80027fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_Init+0x40>)
 800280a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a07      	ldr	r2, [pc, #28]	; (8002834 <HAL_Init+0x40>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281c:	2003      	movs	r0, #3
 800281e:	f000 fd17 	bl	8003250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002822:	2000      	movs	r0, #0
 8002824:	f000 f808 	bl	8002838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002828:	f7ff fd1c 	bl	8002264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00

08002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x54>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x58>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fd2f 	bl	80032ba <HAL_SYSTICK_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00e      	b.n	8002884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d80a      	bhi.n	8002882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286c:	2200      	movs	r2, #0
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f000 fcf7 	bl	8003266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_InitTick+0x5c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000008 	.word	0x20000008
 8002890:	20000010 	.word	0x20000010
 8002894:	2000000c 	.word	0x2000000c

08002898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x20>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x24>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_IncTick+0x24>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000010 	.word	0x20000010
 80028bc:	200004c0 	.word	0x200004c0

080028c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_GetTick+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	200004c0 	.word	0x200004c0

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff ffee 	bl	80028c0 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_Delay+0x40>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffde 	bl	80028c0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000010 	.word	0x20000010

0800291c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e033      	b.n	800299a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fcba 	bl	80022b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002962:	f023 0302 	bic.w	r3, r3, #2
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 faa2 	bl	8002eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
 800298a:	e001      	b.n	8002990 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Start+0x1a>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e0a5      	b.n	8002b0a <HAL_ADC_Start+0x166>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d018      	beq.n	8002a06 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_ADC_Start+0x174>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_ADC_Start+0x178>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0c9a      	lsrs	r2, r3, #18
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029f8:	e002      	b.n	8002a00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f9      	bne.n	80029fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d179      	bne.n	8002b08 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	d106      	bne.n	8002a62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f023 0206 	bic.w	r2, r3, #6
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_ADC_Start+0x17c>)
 8002a72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12a      	bne.n	8002ae0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <HAL_ADC_Start+0x180>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d015      	beq.n	8002ac0 <HAL_ADC_Start+0x11c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_ADC_Start+0x184>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d105      	bne.n	8002aaa <HAL_ADC_Start+0x106>
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_ADC_Start+0x17c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_ADC_Start+0x188>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d129      	bne.n	8002b08 <HAL_ADC_Start+0x164>
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_ADC_Start+0x17c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d823      	bhi.n	8002b08 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11c      	bne.n	8002b08 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	e013      	b.n	8002b08 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <HAL_ADC_Start+0x180>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10e      	bne.n	8002b08 <HAL_ADC_Start+0x164>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b06:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	40012300 	.word	0x40012300
 8002b24:	40012000 	.word	0x40012000
 8002b28:	40012100 	.word	0x40012100
 8002b2c:	40012200 	.word	0x40012200

08002b30 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	d113      	bne.n	8002b76 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5c:	d10b      	bne.n	8002b76 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e05c      	b.n	8002c30 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b76:	f7ff fea3 	bl	80028c0 <HAL_GetTick>
 8002b7a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b7c:	e01a      	b.n	8002bb4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d016      	beq.n	8002bb4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_ADC_PollForConversion+0x6c>
 8002b8c:	f7ff fe98 	bl	80028c0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d20b      	bcs.n	8002bb4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e03d      	b.n	8002c30 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d1dd      	bne.n	8002b7e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0212 	mvn.w	r2, #18
 8002bca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d123      	bne.n	8002c2e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11f      	bne.n	8002c2e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d111      	bne.n	8002c2e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x1c>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e113      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x244>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	d925      	bls.n	8002ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68d9      	ldr	r1, [r3, #12]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	3b1e      	subs	r3, #30
 8002c96:	2207      	movs	r2, #7
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43da      	mvns	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68d9      	ldr	r1, [r3, #12]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	4603      	mov	r3, r0
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4403      	add	r3, r0
 8002cbe:	3b1e      	subs	r3, #30
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	e022      	b.n	8002d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6919      	ldr	r1, [r3, #16]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	400a      	ands	r2, r1
 8002cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6919      	ldr	r1, [r3, #16]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4403      	add	r3, r0
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d824      	bhi.n	8002d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	3b05      	subs	r3, #5
 8002d2c:	221f      	movs	r2, #31
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	400a      	ands	r2, r1
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	3b05      	subs	r3, #5
 8002d56:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34
 8002d62:	e04c      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d824      	bhi.n	8002db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b23      	subs	r3, #35	; 0x23
 8002d7e:	221f      	movs	r2, #31
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43da      	mvns	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	3b23      	subs	r3, #35	; 0x23
 8002da8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
 8002db4:	e023      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b41      	subs	r3, #65	; 0x41
 8002dc8:	221f      	movs	r2, #31
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4618      	mov	r0, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	3b41      	subs	r3, #65	; 0x41
 8002df2:	fa00 f203 	lsl.w	r2, r0, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_ADC_ConfigChannel+0x250>)
 8002e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <HAL_ADC_ConfigChannel+0x254>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10f      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1d8>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b12      	cmp	r3, #18
 8002e12:	d10b      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_ADC_ConfigChannel+0x254>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d12b      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x23a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x1f4>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b11      	cmp	r3, #17
 8002e46:	d122      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_ADC_ConfigChannel+0x258>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d111      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <HAL_ADC_ConfigChannel+0x260>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0c9a      	lsrs	r2, r3, #18
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e80:	e002      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f9      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40012300 	.word	0x40012300
 8002ea8:	40012000 	.word	0x40012000
 8002eac:	10000012 	.word	0x10000012
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	431bde83 	.word	0x431bde83

08002eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec0:	4b79      	ldr	r3, [pc, #484]	; (80030a8 <ADC_Init+0x1f0>)
 8002ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	021a      	lsls	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6899      	ldr	r1, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	4a58      	ldr	r2, [pc, #352]	; (80030ac <ADC_Init+0x1f4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6899      	ldr	r1, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	e00f      	b.n	8002fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0202 	bic.w	r2, r2, #2
 8002fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6899      	ldr	r1, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7e1b      	ldrb	r3, [r3, #24]
 8002fd0:	005a      	lsls	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	3b01      	subs	r3, #1
 8003010:	035a      	lsls	r2, r3, #13
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	e007      	b.n	800302c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	3b01      	subs	r3, #1
 8003048:	051a      	lsls	r2, r3, #20
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6899      	ldr	r1, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800306e:	025a      	lsls	r2, r3, #9
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	029a      	lsls	r2, r3, #10
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012300 	.word	0x40012300
 80030ac:	0f000001 	.word	0x0f000001

080030b0 <__NVIC_SetPriorityGrouping>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <__NVIC_SetPriorityGrouping+0x44>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030cc:	4013      	ands	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e2:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <__NVIC_SetPriorityGrouping+0x44>)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	60d3      	str	r3, [r2, #12]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_GetPriorityGrouping>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <__NVIC_GetPriorityGrouping+0x18>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	f003 0307 	and.w	r3, r3, #7
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_EnableIRQ>:
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	2b00      	cmp	r3, #0
 8003124:	db0b      	blt.n	800313e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	4907      	ldr	r1, [pc, #28]	; (800314c <__NVIC_EnableIRQ+0x38>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2001      	movs	r0, #1
 8003136:	fa00 f202 	lsl.w	r2, r0, r2
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000e100 	.word	0xe000e100

08003150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	2b00      	cmp	r3, #0
 8003162:	db0a      	blt.n	800317a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	490c      	ldr	r1, [pc, #48]	; (800319c <__NVIC_SetPriority+0x4c>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	440b      	add	r3, r1
 8003174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003178:	e00a      	b.n	8003190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <__NVIC_SetPriority+0x50>)
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3b04      	subs	r3, #4
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	440b      	add	r3, r1
 800318e:	761a      	strb	r2, [r3, #24]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000e100 	.word	0xe000e100
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f1c3 0307 	rsb	r3, r3, #7
 80031be:	2b04      	cmp	r3, #4
 80031c0:	bf28      	it	cs
 80031c2:	2304      	movcs	r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d902      	bls.n	80031d4 <NVIC_EncodePriority+0x30>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3b03      	subs	r3, #3
 80031d2:	e000      	b.n	80031d6 <NVIC_EncodePriority+0x32>
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	401a      	ands	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	43d9      	mvns	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	4313      	orrs	r3, r2
         );
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3724      	adds	r7, #36	; 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800321c:	d301      	bcc.n	8003222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321e:	2301      	movs	r3, #1
 8003220:	e00f      	b.n	8003242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <SysTick_Config+0x40>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322a:	210f      	movs	r1, #15
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	f7ff ff8e 	bl	8003150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <SysTick_Config+0x40>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <SysTick_Config+0x40>)
 800323c:	2207      	movs	r2, #7
 800323e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000e010 	.word	0xe000e010

08003250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ff29 	bl	80030b0 <__NVIC_SetPriorityGrouping>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003278:	f7ff ff3e 	bl	80030f8 <__NVIC_GetPriorityGrouping>
 800327c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f7ff ff8e 	bl	80031a4 <NVIC_EncodePriority>
 8003288:	4602      	mov	r2, r0
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff5d 	bl	8003150 <__NVIC_SetPriority>
}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff31 	bl	8003114 <__NVIC_EnableIRQ>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffa2 	bl	800320c <SysTick_Config>
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e014      	b.n	800330e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	791b      	ldrb	r3, [r3, #4]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff f821 	bl	800233c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	795b      	ldrb	r3, [r3, #5]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_DAC_Start+0x1e>
 8003330:	2302      	movs	r3, #2
 8003332:	e050      	b.n	80033d6 <HAL_DAC_Start+0xc0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	2201      	movs	r2, #1
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	409a      	lsls	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11a      	bne.n	8003390 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003370:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b04      	cmp	r3, #4
 8003376:	d127      	bne.n	80033c8 <HAL_DAC_Start+0xb2>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b38      	cmp	r3, #56	; 0x38
 800337c:	d124      	bne.n	80033c8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	e01b      	b.n	80033c8 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800339a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80033a6:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ae:	d10b      	bne.n	80033c8 <HAL_DAC_Start+0xb2>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80033b6:	d107      	bne.n	80033c8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0202 	orr.w	r2, r2, #2
 80033c6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	400a      	ands	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	795b      	ldrb	r3, [r3, #5]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_DAC_ConfigChannel+0x20>
 8003434:	2302      	movs	r3, #2
 8003436:	e036      	b.n	80034a6 <HAL_DAC_ConfigChannel+0x8e>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2202      	movs	r2, #2
 8003442:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800344c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	22c0      	movs	r2, #192	; 0xc0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	400a      	ands	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80034b2:	b480      	push	{r7}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	3308      	adds	r3, #8
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e004      	b.n	80034e6 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	3314      	adds	r3, #20
 80034e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	461a      	mov	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d004      	beq.n	800351a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e00c      	b.n	8003534 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2205      	movs	r2, #5
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003540:	b480      	push	{r7}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	e165      	b.n	8003828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800355c:	2201      	movs	r2, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	429a      	cmp	r2, r3
 8003576:	f040 8154 	bne.w	8003822 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d00b      	beq.n	800359a <HAL_GPIO_Init+0x5a>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800358e:	2b11      	cmp	r3, #17
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b12      	cmp	r3, #18
 8003598:	d130      	bne.n	80035fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	2203      	movs	r2, #3
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0xfc>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b12      	cmp	r3, #18
 800363a:	d123      	bne.n	8003684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	08da      	lsrs	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3208      	adds	r2, #8
 8003644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	220f      	movs	r2, #15
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	08da      	lsrs	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3208      	adds	r2, #8
 800367e:	69b9      	ldr	r1, [r7, #24]
 8003680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0203 	and.w	r2, r3, #3
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80ae 	beq.w	8003822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <HAL_GPIO_Init+0x2fc>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <HAL_GPIO_Init+0x2fc>)
 80036d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d4:	6453      	str	r3, [r2, #68]	; 0x44
 80036d6:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_GPIO_Init+0x2fc>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036e2:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_GPIO_Init+0x300>)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3302      	adds	r3, #2
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4e      	ldr	r2, [pc, #312]	; (8003844 <HAL_GPIO_Init+0x304>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d025      	beq.n	800375a <HAL_GPIO_Init+0x21a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <HAL_GPIO_Init+0x308>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01f      	beq.n	8003756 <HAL_GPIO_Init+0x216>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_GPIO_Init+0x30c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d019      	beq.n	8003752 <HAL_GPIO_Init+0x212>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_GPIO_Init+0x310>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_GPIO_Init+0x20e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4a      	ldr	r2, [pc, #296]	; (8003854 <HAL_GPIO_Init+0x314>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00d      	beq.n	800374a <HAL_GPIO_Init+0x20a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a49      	ldr	r2, [pc, #292]	; (8003858 <HAL_GPIO_Init+0x318>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <HAL_GPIO_Init+0x206>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a48      	ldr	r2, [pc, #288]	; (800385c <HAL_GPIO_Init+0x31c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <HAL_GPIO_Init+0x202>
 800373e:	2306      	movs	r3, #6
 8003740:	e00c      	b.n	800375c <HAL_GPIO_Init+0x21c>
 8003742:	2307      	movs	r3, #7
 8003744:	e00a      	b.n	800375c <HAL_GPIO_Init+0x21c>
 8003746:	2305      	movs	r3, #5
 8003748:	e008      	b.n	800375c <HAL_GPIO_Init+0x21c>
 800374a:	2304      	movs	r3, #4
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x21c>
 800374e:	2303      	movs	r3, #3
 8003750:	e004      	b.n	800375c <HAL_GPIO_Init+0x21c>
 8003752:	2302      	movs	r3, #2
 8003754:	e002      	b.n	800375c <HAL_GPIO_Init+0x21c>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_GPIO_Init+0x21c>
 800375a:	2300      	movs	r3, #0
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	f002 0203 	and.w	r2, r2, #3
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	4093      	lsls	r3, r2
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376c:	4934      	ldr	r1, [pc, #208]	; (8003840 <HAL_GPIO_Init+0x300>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377a:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_GPIO_Init+0x320>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800379e:	4a30      	ldr	r2, [pc, #192]	; (8003860 <HAL_GPIO_Init+0x320>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_GPIO_Init+0x320>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c8:	4a25      	ldr	r2, [pc, #148]	; (8003860 <HAL_GPIO_Init+0x320>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_GPIO_Init+0x320>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_GPIO_Init+0x320>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_GPIO_Init+0x320>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_GPIO_Init+0x320>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	f67f ae96 	bls.w	800355c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003830:	bf00      	nop
 8003832:	3724      	adds	r7, #36	; 0x24
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40023800 	.word	0x40023800
 8003840:	40013800 	.word	0x40013800
 8003844:	40020000 	.word	0x40020000
 8003848:	40020400 	.word	0x40020400
 800384c:	40020800 	.word	0x40020800
 8003850:	40020c00 	.word	0x40020c00
 8003854:	40021000 	.word	0x40021000
 8003858:	40021400 	.word	0x40021400
 800385c:	40021800 	.word	0x40021800
 8003860:	40013c00 	.word	0x40013c00

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003880:	e003      	b.n	800388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f806 	bl	80038c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40013c00 	.word	0x40013c00

080038c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e11f      	b.n	8003b32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fe fd5c 	bl	80023c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003944:	f001 f898 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 8003948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4a7b      	ldr	r2, [pc, #492]	; (8003b3c <HAL_I2C_Init+0x25c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d807      	bhi.n	8003964 <HAL_I2C_Init+0x84>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a7a      	ldr	r2, [pc, #488]	; (8003b40 <HAL_I2C_Init+0x260>)
 8003958:	4293      	cmp	r3, r2
 800395a:	bf94      	ite	ls
 800395c:	2301      	movls	r3, #1
 800395e:	2300      	movhi	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e006      	b.n	8003972 <HAL_I2C_Init+0x92>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <HAL_I2C_Init+0x264>)
 8003968:	4293      	cmp	r3, r2
 800396a:	bf94      	ite	ls
 800396c:	2301      	movls	r3, #1
 800396e:	2300      	movhi	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0db      	b.n	8003b32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a72      	ldr	r2, [pc, #456]	; (8003b48 <HAL_I2C_Init+0x268>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0c9b      	lsrs	r3, r3, #18
 8003984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a64      	ldr	r2, [pc, #400]	; (8003b3c <HAL_I2C_Init+0x25c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d802      	bhi.n	80039b4 <HAL_I2C_Init+0xd4>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3301      	adds	r3, #1
 80039b2:	e009      	b.n	80039c8 <HAL_I2C_Init+0xe8>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	4a63      	ldr	r2, [pc, #396]	; (8003b4c <HAL_I2C_Init+0x26c>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	099b      	lsrs	r3, r3, #6
 80039c6:	3301      	adds	r3, #1
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4956      	ldr	r1, [pc, #344]	; (8003b3c <HAL_I2C_Init+0x25c>)
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d80d      	bhi.n	8003a04 <HAL_I2C_Init+0x124>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e59      	subs	r1, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	bf38      	it	cc
 8003a00:	2304      	movcc	r3, #4
 8003a02:	e04f      	b.n	8003aa4 <HAL_I2C_Init+0x1c4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d111      	bne.n	8003a30 <HAL_I2C_Init+0x150>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e012      	b.n	8003a56 <HAL_I2C_Init+0x176>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e58      	subs	r0, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	0099      	lsls	r1, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Init+0x17e>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e022      	b.n	8003aa4 <HAL_I2C_Init+0x1c4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <HAL_I2C_Init+0x1a4>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e58      	subs	r0, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	440b      	add	r3, r1
 8003a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	e00f      	b.n	8003aa4 <HAL_I2C_Init+0x1c4>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e58      	subs	r0, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6809      	ldr	r1, [r1, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6911      	ldr	r1, [r2, #16]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	000186a0 	.word	0x000186a0
 8003b40:	001e847f 	.word	0x001e847f
 8003b44:	003d08ff 	.word	0x003d08ff
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	10624dd3 	.word	0x10624dd3

08003b50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	817b      	strh	r3, [r7, #10]
 8003b60:	4613      	mov	r3, r2
 8003b62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7fe feac 	bl	80028c0 <HAL_GetTick>
 8003b68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	f040 80e0 	bne.w	8003d38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2319      	movs	r3, #25
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4970      	ldr	r1, [pc, #448]	; (8003d44 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fc58 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0d3      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2C_Master_Transmit+0x50>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e0cc      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d007      	beq.n	8003bc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2221      	movs	r2, #33	; 0x21
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2210      	movs	r2, #16
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	893a      	ldrh	r2, [r7, #8]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a50      	ldr	r2, [pc, #320]	; (8003d48 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fac2 	bl	8004198 <I2C_MasterRequestWrite>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e08d      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c34:	e066      	b.n	8003d04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	6a39      	ldr	r1, [r7, #32]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fcd2 	bl	80045e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d107      	bne.n	8003c5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06b      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_I2C_Master_Transmit+0x188>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	6a39      	ldr	r1, [r7, #32]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fcc2 	bl	8004666 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e01a      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d194      	bne.n	8003c36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	00100002 	.word	0x00100002
 8003d48:	ffff0000 	.word	0xffff0000

08003d4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08c      	sub	sp, #48	; 0x30
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	461a      	mov	r2, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	817b      	strh	r3, [r7, #10]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7fe fdae 	bl	80028c0 <HAL_GetTick>
 8003d64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 820b 	bne.w	800418a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	497c      	ldr	r1, [pc, #496]	; (8003f70 <HAL_I2C_Master_Receive+0x224>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fb5a 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e1fe      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_I2C_Master_Receive+0x50>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e1f7      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d007      	beq.n	8003dc2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2222      	movs	r2, #34	; 0x22
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2210      	movs	r2, #16
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	893a      	ldrh	r2, [r7, #8]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a5c      	ldr	r2, [pc, #368]	; (8003f74 <HAL_I2C_Master_Receive+0x228>)
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e04:	8979      	ldrh	r1, [r7, #10]
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fa46 	bl	800429c <I2C_MasterRequestRead>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e1b8      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d113      	bne.n	8003e4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e18c      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d11b      	bne.n	8003e8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e16c      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d11b      	bne.n	8003eca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	e14c      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ef0:	e138      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	f200 80f1 	bhi.w	80040de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d123      	bne.n	8003f4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fbed 	bl	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e139      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4a:	e10b      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d14e      	bne.n	8003ff2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4906      	ldr	r1, [pc, #24]	; (8003f78 <HAL_I2C_Master_Receive+0x22c>)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fa6a 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e10e      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
 8003f6e:	bf00      	nop
 8003f70:	00100002 	.word	0x00100002
 8003f74:	ffff0000 	.word	0xffff0000
 8003f78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff0:	e0b8      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4966      	ldr	r1, [pc, #408]	; (8004194 <HAL_I2C_Master_Receive+0x448>)
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa1b 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0bf      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2200      	movs	r2, #0
 8004056:	494f      	ldr	r1, [pc, #316]	; (8004194 <HAL_I2C_Master_Receive+0x448>)
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f9ed 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e091      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040dc:	e042      	b.n	8004164 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fb00 	bl	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e04c      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d118      	bne.n	8004164 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	f47f aec2 	bne.w	8003ef2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	00010004 	.word	0x00010004

08004198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	460b      	mov	r3, r1
 80041a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d006      	beq.n	80041c2 <I2C_MasterRequestWrite+0x2a>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d003      	beq.n	80041c2 <I2C_MasterRequestWrite+0x2a>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c0:	d108      	bne.n	80041d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e00b      	b.n	80041ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	2b12      	cmp	r3, #18
 80041da:	d107      	bne.n	80041ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f91d 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00d      	beq.n	8004220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004212:	d103      	bne.n	800421c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e035      	b.n	800428c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004228:	d108      	bne.n	800423c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	e01b      	b.n	8004274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800423c:	897b      	ldrh	r3, [r7, #10]
 800423e:	11db      	asrs	r3, r3, #7
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0306 	and.w	r3, r3, #6
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f063 030f 	orn	r3, r3, #15
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	490e      	ldr	r1, [pc, #56]	; (8004294 <I2C_MasterRequestWrite+0xfc>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f943 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e010      	b.n	800428c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4907      	ldr	r1, [pc, #28]	; (8004298 <I2C_MasterRequestWrite+0x100>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f933 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	00010008 	.word	0x00010008
 8004298:	00010002 	.word	0x00010002

0800429c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	460b      	mov	r3, r1
 80042aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d006      	beq.n	80042d6 <I2C_MasterRequestRead+0x3a>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d003      	beq.n	80042d6 <I2C_MasterRequestRead+0x3a>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d4:	d108      	bne.n	80042e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e00b      	b.n	8004300 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	2b11      	cmp	r3, #17
 80042ee:	d107      	bne.n	8004300 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f893 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004326:	d103      	bne.n	8004330 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e079      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800433c:	d108      	bne.n	8004350 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800433e:	897b      	ldrh	r3, [r7, #10]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	611a      	str	r2, [r3, #16]
 800434e:	e05f      	b.n	8004410 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004350:	897b      	ldrh	r3, [r7, #10]
 8004352:	11db      	asrs	r3, r3, #7
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0306 	and.w	r3, r3, #6
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f063 030f 	orn	r3, r3, #15
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4930      	ldr	r1, [pc, #192]	; (8004430 <I2C_MasterRequestRead+0x194>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8b9 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e054      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800437e:	897b      	ldrh	r3, [r7, #10]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4929      	ldr	r1, [pc, #164]	; (8004434 <I2C_MasterRequestRead+0x198>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8a9 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e044      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f831 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	d103      	bne.n	80043f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e017      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	11db      	asrs	r3, r3, #7
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 0306 	and.w	r3, r3, #6
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f063 030e 	orn	r3, r3, #14
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4907      	ldr	r1, [pc, #28]	; (8004434 <I2C_MasterRequestRead+0x198>)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f865 	bl	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00010008 	.word	0x00010008
 8004434:	00010002 	.word	0x00010002

08004438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004448:	e025      	b.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d021      	beq.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004452:	f7fe fa35 	bl	80028c0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d302      	bcc.n	8004468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d116      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e023      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10d      	bne.n	80044bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	e00c      	b.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	43da      	mvns	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4013      	ands	r3, r2
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d0b6      	beq.n	800444a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f4:	e051      	b.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004504:	d123      	bne.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800451e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e046      	b.n	80045dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d021      	beq.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe f9b3 	bl	80028c0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d116      	bne.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e020      	b.n	80045dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10c      	bne.n	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	43da      	mvns	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e00b      	b.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	43da      	mvns	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4013      	ands	r3, r2
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d18d      	bne.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f0:	e02d      	b.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f8ce 	bl	8004794 <I2C_IsAcknowledgeFailed>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e02d      	b.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d021      	beq.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fe f959 	bl	80028c0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d116      	bne.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e007      	b.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d1ca      	bne.n	80045f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004672:	e02d      	b.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f88d 	bl	8004794 <I2C_IsAcknowledgeFailed>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e02d      	b.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d021      	beq.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468c:	f7fe f918 	bl	80028c0 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d116      	bne.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e007      	b.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d1ca      	bne.n	8004674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f4:	e042      	b.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b10      	cmp	r3, #16
 8004702:	d119      	bne.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0210 	mvn.w	r2, #16
 800470c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e029      	b.n	800478c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004738:	f7fe f8c2 	bl	80028c0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e007      	b.n	800478c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d1b5      	bne.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047aa:	d11b      	bne.n	80047e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f043 0204 	orr.w	r2, r3, #4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4b20      	ldr	r3, [pc, #128]	; (8004884 <HAL_PWREx_EnableOverDrive+0x90>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <HAL_PWREx_EnableOverDrive+0x90>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480c:	6413      	str	r3, [r2, #64]	; 0x40
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_PWREx_EnableOverDrive+0x90>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_PWREx_EnableOverDrive+0x94>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004820:	f7fe f84e 	bl	80028c0 <HAL_GetTick>
 8004824:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004826:	e009      	b.n	800483c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004828:	f7fe f84a 	bl	80028c0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004836:	d901      	bls.n	800483c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e01f      	b.n	800487c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <HAL_PWREx_EnableOverDrive+0x98>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004848:	d1ee      	bne.n	8004828 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004850:	f7fe f836 	bl	80028c0 <HAL_GetTick>
 8004854:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004856:	e009      	b.n	800486c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004858:	f7fe f832 	bl	80028c0 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004866:	d901      	bls.n	800486c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e007      	b.n	800487c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_PWREx_EnableOverDrive+0x98>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004878:	d1ee      	bne.n	8004858 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800
 8004888:	420e0040 	.word	0x420e0040
 800488c:	40007000 	.word	0x40007000
 8004890:	420e0044 	.word	0x420e0044

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cc      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d90c      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0b8      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490c:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	494d      	ldr	r1, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d044      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d119      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d003      	beq.n	8004952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	2b03      	cmp	r3, #3
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e067      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4934      	ldr	r1, [pc, #208]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004984:	f7fd ff9c 	bl	80028c0 <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498c:	f7fd ff98 	bl	80028c0 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e04f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 020c 	and.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1eb      	bne.n	800498c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b4:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20c      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e032      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4916      	ldr	r1, [pc, #88]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1a:	f000 fb7f 	bl	800511c <HAL_RCC_GetSysClockFreq>
 8004a1e:	4601      	mov	r1, r0
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	5cd3      	ldrb	r3, [r2, r3]
 8004a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fd fefc 	bl	8002838 <HAL_InitTick>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023c00 	.word	0x40023c00
 8004a50:	40023800 	.word	0x40023800
 8004a54:	0800a218 	.word	0x0800a218
 8004a58:	20000008 	.word	0x20000008
 8004a5c:	2000000c 	.word	0x2000000c

08004a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000008 	.word	0x20000008

08004a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a7c:	f7ff fff0 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004a80:	4601      	mov	r1, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8e:	5cd3      	ldrb	r3, [r2, r3]
 8004a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	0800a228 	.word	0x0800a228

08004aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa4:	f7ff ffdc 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4601      	mov	r1, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0b5b      	lsrs	r3, r3, #13
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4a03      	ldr	r2, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
 8004ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	0800a228 	.word	0x0800a228

08004ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d010      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004b00:	4b6f      	ldr	r3, [pc, #444]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b06:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	496c      	ldr	r1, [pc, #432]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004b2e:	4b64      	ldr	r3, [pc, #400]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b34:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	4960      	ldr	r1, [pc, #384]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d017      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b5c:	4b58      	ldr	r3, [pc, #352]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	4955      	ldr	r1, [pc, #340]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d101      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d017      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b98:	4b49      	ldr	r3, [pc, #292]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	4946      	ldr	r1, [pc, #280]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 808a 	beq.w	8004cea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	4b39      	ldr	r3, [pc, #228]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a38      	ldr	r2, [pc, #224]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40
 8004be6:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bf2:	4b34      	ldr	r3, [pc, #208]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a33      	ldr	r2, [pc, #204]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bfe:	f7fd fe5f 	bl	80028c0 <HAL_GetTick>
 8004c02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fd fe5b 	bl	80028c0 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e278      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c18:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02f      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d028      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c42:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c58:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c5e:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d114      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fe29 	bl	80028c0 <HAL_GetTick>
 8004c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fd fe25 	bl	80028c0 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e240      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ee      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca0:	d114      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb6:	4902      	ldr	r1, [pc, #8]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]
 8004cbc:	e00c      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	42470e40 	.word	0x42470e40
 8004ccc:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a49      	ldr	r2, [pc, #292]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004cd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cd6:	6093      	str	r3, [r2, #8]
 8004cd8:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce4:	4944      	ldr	r1, [pc, #272]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004cfc:	4b3f      	ldr	r3, [pc, #252]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004cfe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004d0c:	4b3a      	ldr	r3, [pc, #232]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	4937      	ldr	r1, [pc, #220]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d2e:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d34:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	492e      	ldr	r1, [pc, #184]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d011      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d56:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	4926      	ldr	r1, [pc, #152]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004d70:	2301      	movs	r3, #1
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004d80:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	491a      	ldr	r1, [pc, #104]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	4911      	ldr	r1, [pc, #68]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd4:	f040 80ff 	bne.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dde:	f7fd fd6f 	bl	80028c0 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de4:	e00e      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004de6:	f7fd fd6b 	bl	80028c0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d907      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e188      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	424711e0 	.word	0x424711e0
 8004e00:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e04:	4b7e      	ldr	r3, [pc, #504]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ea      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d028      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d124      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004e38:	4b71      	ldr	r3, [pc, #452]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	0c1b      	lsrs	r3, r3, #16
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	3301      	adds	r3, #1
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e4a:	4b6d      	ldr	r3, [pc, #436]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e50:	0e1b      	lsrs	r3, r3, #24
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	431a      	orrs	r2, r3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	071b      	lsls	r3, r3, #28
 8004e7a:	4961      	ldr	r1, [pc, #388]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d035      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eac:	d130      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004eae:	4b54      	ldr	r3, [pc, #336]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ec0:	4b4f      	ldr	r3, [pc, #316]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec6:	0f1b      	lsrs	r3, r3, #28
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	019b      	lsls	r3, r3, #6
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	431a      	orrs	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	071b      	lsls	r3, r3, #28
 8004ef0:	4943      	ldr	r1, [pc, #268]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ef8:	4b41      	ldr	r3, [pc, #260]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efe:	f023 021f 	bic.w	r2, r3, #31
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	493d      	ldr	r1, [pc, #244]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d029      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f24:	d124      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f38:	4b31      	ldr	r3, [pc, #196]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3e:	0f1b      	lsrs	r3, r3, #28
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	019b      	lsls	r3, r3, #6
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	061b      	lsls	r3, r3, #24
 8004f62:	431a      	orrs	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	071b      	lsls	r3, r3, #28
 8004f68:	4925      	ldr	r1, [pc, #148]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d016      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	4917      	ldr	r1, [pc, #92]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd fc86 	bl	80028c0 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fb8:	f7fd fc82 	bl	80028c0 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e09f      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 8095 	bne.w	8005108 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fde:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fd fc6c 	bl	80028c0 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fea:	e00f      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fec:	f7fd fc68 	bl	80028c0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d908      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e085      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
 8005004:	42470068 	.word	0x42470068
 8005008:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800500c:	4b41      	ldr	r3, [pc, #260]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005018:	d0e8      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02b      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	2b00      	cmp	r3, #0
 8005040:	d127      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	3301      	adds	r3, #1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	019b      	lsls	r3, r3, #6
 800505e:	431a      	orrs	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	3b01      	subs	r3, #1
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	061b      	lsls	r3, r3, #24
 8005070:	4928      	ldr	r1, [pc, #160]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005078:	4b26      	ldr	r3, [pc, #152]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800507a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	3b01      	subs	r3, #1
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	4922      	ldr	r1, [pc, #136]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01d      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x612>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a6:	d118      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	0e1b      	lsrs	r3, r3, #24
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	019b      	lsls	r3, r3, #6
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	3b01      	subs	r3, #1
 80050ca:	041b      	lsls	r3, r3, #16
 80050cc:	431a      	orrs	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	4910      	ldr	r1, [pc, #64]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fd fbee 	bl	80028c0 <HAL_GetTick>
 80050e4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050e8:	f7fd fbea 	bl	80028c0 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e007      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005106:	d1ef      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3730      	adds	r7, #48	; 0x30
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
 8005118:	42470070 	.word	0x42470070

0800511c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005136:	4b9f      	ldr	r3, [pc, #636]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b0c      	cmp	r3, #12
 8005140:	f200 8130 	bhi.w	80053a4 <HAL_RCC_GetSysClockFreq+0x288>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_RCC_GetSysClockFreq+0x30>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005181 	.word	0x08005181
 8005150:	080053a5 	.word	0x080053a5
 8005154:	080053a5 	.word	0x080053a5
 8005158:	080053a5 	.word	0x080053a5
 800515c:	08005187 	.word	0x08005187
 8005160:	080053a5 	.word	0x080053a5
 8005164:	080053a5 	.word	0x080053a5
 8005168:	080053a5 	.word	0x080053a5
 800516c:	0800518d 	.word	0x0800518d
 8005170:	080053a5 	.word	0x080053a5
 8005174:	080053a5 	.word	0x080053a5
 8005178:	080053a5 	.word	0x080053a5
 800517c:	0800529b 	.word	0x0800529b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005180:	4b8d      	ldr	r3, [pc, #564]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x29c>)
 8005182:	613b      	str	r3, [r7, #16]
       break;
 8005184:	e111      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005186:	4b8d      	ldr	r3, [pc, #564]	; (80053bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005188:	613b      	str	r3, [r7, #16]
      break;
 800518a:	e10e      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800518c:	4b89      	ldr	r3, [pc, #548]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005194:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005196:	4b87      	ldr	r3, [pc, #540]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d023      	beq.n	80051ea <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a2:	4b84      	ldr	r3, [pc, #528]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	f04f 0400 	mov.w	r4, #0
 80051ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	ea03 0501 	and.w	r5, r3, r1
 80051b8:	ea04 0602 	and.w	r6, r4, r2
 80051bc:	4a7f      	ldr	r2, [pc, #508]	; (80053bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80051be:	fb02 f106 	mul.w	r1, r2, r6
 80051c2:	2200      	movs	r2, #0
 80051c4:	fb02 f205 	mul.w	r2, r2, r5
 80051c8:	440a      	add	r2, r1
 80051ca:	497c      	ldr	r1, [pc, #496]	; (80053bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80051cc:	fba5 0101 	umull	r0, r1, r5, r1
 80051d0:	1853      	adds	r3, r2, r1
 80051d2:	4619      	mov	r1, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f04f 0400 	mov.w	r4, #0
 80051da:	461a      	mov	r2, r3
 80051dc:	4623      	mov	r3, r4
 80051de:	f7fb fd53 	bl	8000c88 <__aeabi_uldivmod>
 80051e2:	4603      	mov	r3, r0
 80051e4:	460c      	mov	r4, r1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e049      	b.n	800527e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ea:	4b72      	ldr	r3, [pc, #456]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	099b      	lsrs	r3, r3, #6
 80051f0:	f04f 0400 	mov.w	r4, #0
 80051f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	ea03 0501 	and.w	r5, r3, r1
 8005200:	ea04 0602 	and.w	r6, r4, r2
 8005204:	4629      	mov	r1, r5
 8005206:	4632      	mov	r2, r6
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	0154      	lsls	r4, r2, #5
 8005212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005216:	014b      	lsls	r3, r1, #5
 8005218:	4619      	mov	r1, r3
 800521a:	4622      	mov	r2, r4
 800521c:	1b49      	subs	r1, r1, r5
 800521e:	eb62 0206 	sbc.w	r2, r2, r6
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	f04f 0400 	mov.w	r4, #0
 800522a:	0194      	lsls	r4, r2, #6
 800522c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005230:	018b      	lsls	r3, r1, #6
 8005232:	1a5b      	subs	r3, r3, r1
 8005234:	eb64 0402 	sbc.w	r4, r4, r2
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	00e2      	lsls	r2, r4, #3
 8005242:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005246:	00d9      	lsls	r1, r3, #3
 8005248:	460b      	mov	r3, r1
 800524a:	4614      	mov	r4, r2
 800524c:	195b      	adds	r3, r3, r5
 800524e:	eb44 0406 	adc.w	r4, r4, r6
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	02a2      	lsls	r2, r4, #10
 800525c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005260:	0299      	lsls	r1, r3, #10
 8005262:	460b      	mov	r3, r1
 8005264:	4614      	mov	r4, r2
 8005266:	4618      	mov	r0, r3
 8005268:	4621      	mov	r1, r4
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	461a      	mov	r2, r3
 8005272:	4623      	mov	r3, r4
 8005274:	f7fb fd08 	bl	8000c88 <__aeabi_uldivmod>
 8005278:	4603      	mov	r3, r0
 800527a:	460c      	mov	r4, r1
 800527c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800527e:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	0c1b      	lsrs	r3, r3, #16
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	3301      	adds	r3, #1
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	fbb2 f3f3 	udiv	r3, r2, r3
 8005296:	613b      	str	r3, [r7, #16]
      break;
 8005298:	e087      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800529a:	4b46      	ldr	r3, [pc, #280]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a2:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a4:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d023      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b0:	4b40      	ldr	r3, [pc, #256]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	ea03 0501 	and.w	r5, r3, r1
 80052c6:	ea04 0602 	and.w	r6, r4, r2
 80052ca:	4a3c      	ldr	r2, [pc, #240]	; (80053bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80052cc:	fb02 f106 	mul.w	r1, r2, r6
 80052d0:	2200      	movs	r2, #0
 80052d2:	fb02 f205 	mul.w	r2, r2, r5
 80052d6:	440a      	add	r2, r1
 80052d8:	4938      	ldr	r1, [pc, #224]	; (80053bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80052da:	fba5 0101 	umull	r0, r1, r5, r1
 80052de:	1853      	adds	r3, r2, r1
 80052e0:	4619      	mov	r1, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	461a      	mov	r2, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	f7fb fccc 	bl	8000c88 <__aeabi_uldivmod>
 80052f0:	4603      	mov	r3, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e049      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f8:	4b2e      	ldr	r3, [pc, #184]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	099b      	lsrs	r3, r3, #6
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	ea03 0501 	and.w	r5, r3, r1
 800530e:	ea04 0602 	and.w	r6, r4, r2
 8005312:	4629      	mov	r1, r5
 8005314:	4632      	mov	r2, r6
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	f04f 0400 	mov.w	r4, #0
 800531e:	0154      	lsls	r4, r2, #5
 8005320:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005324:	014b      	lsls	r3, r1, #5
 8005326:	4619      	mov	r1, r3
 8005328:	4622      	mov	r2, r4
 800532a:	1b49      	subs	r1, r1, r5
 800532c:	eb62 0206 	sbc.w	r2, r2, r6
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	f04f 0400 	mov.w	r4, #0
 8005338:	0194      	lsls	r4, r2, #6
 800533a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800533e:	018b      	lsls	r3, r1, #6
 8005340:	1a5b      	subs	r3, r3, r1
 8005342:	eb64 0402 	sbc.w	r4, r4, r2
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	00e2      	lsls	r2, r4, #3
 8005350:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005354:	00d9      	lsls	r1, r3, #3
 8005356:	460b      	mov	r3, r1
 8005358:	4614      	mov	r4, r2
 800535a:	195b      	adds	r3, r3, r5
 800535c:	eb44 0406 	adc.w	r4, r4, r6
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	02a2      	lsls	r2, r4, #10
 800536a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800536e:	0299      	lsls	r1, r3, #10
 8005370:	460b      	mov	r3, r1
 8005372:	4614      	mov	r4, r2
 8005374:	4618      	mov	r0, r3
 8005376:	4621      	mov	r1, r4
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f04f 0400 	mov.w	r4, #0
 800537e:	461a      	mov	r2, r3
 8005380:	4623      	mov	r3, r4
 8005382:	f7fb fc81 	bl	8000c88 <__aeabi_uldivmod>
 8005386:	4603      	mov	r3, r0
 8005388:	460c      	mov	r4, r1
 800538a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x298>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0f1b      	lsrs	r3, r3, #28
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	613b      	str	r3, [r7, #16]
      break;
 80053a2:	e002      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x29c>)
 80053a6:	613b      	str	r3, [r7, #16]
      break;
 80053a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053aa:	693b      	ldr	r3, [r7, #16]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	017d7840 	.word	0x017d7840

080053c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8083 	beq.w	80054e0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053da:	4b95      	ldr	r3, [pc, #596]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d019      	beq.n	800541a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053e6:	4b92      	ldr	r3, [pc, #584]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053f2:	4b8f      	ldr	r3, [pc, #572]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fe:	d00c      	beq.n	800541a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005400:	4b8b      	ldr	r3, [pc, #556]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d112      	bne.n	8005432 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540c:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005418:	d10b      	bne.n	8005432 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541a:	4b85      	ldr	r3, [pc, #532]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d05b      	beq.n	80054de <HAL_RCC_OscConfig+0x11e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d157      	bne.n	80054de <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e216      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d106      	bne.n	800544a <HAL_RCC_OscConfig+0x8a>
 800543c:	4b7c      	ldr	r3, [pc, #496]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a7b      	ldr	r2, [pc, #492]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e01d      	b.n	8005486 <HAL_RCC_OscConfig+0xc6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005452:	d10c      	bne.n	800546e <HAL_RCC_OscConfig+0xae>
 8005454:	4b76      	ldr	r3, [pc, #472]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a75      	ldr	r2, [pc, #468]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800545a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b73      	ldr	r3, [pc, #460]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a72      	ldr	r2, [pc, #456]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e00b      	b.n	8005486 <HAL_RCC_OscConfig+0xc6>
 800546e:	4b70      	ldr	r3, [pc, #448]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6f      	ldr	r2, [pc, #444]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b6d      	ldr	r3, [pc, #436]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6c      	ldr	r2, [pc, #432]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005484:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fd fa17 	bl	80028c0 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005496:	f7fd fa13 	bl	80028c0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b64      	cmp	r3, #100	; 0x64
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e1db      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a8:	4b61      	ldr	r3, [pc, #388]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0xd6>
 80054b4:	e014      	b.n	80054e0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b6:	f7fd fa03 	bl	80028c0 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054be:	f7fd f9ff 	bl	80028c0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b64      	cmp	r3, #100	; 0x64
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e1c7      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d0:	4b57      	ldr	r3, [pc, #348]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <HAL_RCC_OscConfig+0xfe>
 80054dc:	e000      	b.n	80054e0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d06f      	beq.n	80055cc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054ec:	4b50      	ldr	r3, [pc, #320]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054f8:	4b4d      	ldr	r3, [pc, #308]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005500:	2b08      	cmp	r3, #8
 8005502:	d105      	bne.n	8005510 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005504:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005510:	4b47      	ldr	r3, [pc, #284]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005518:	2b0c      	cmp	r3, #12
 800551a:	d11c      	bne.n	8005556 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551c:	4b44      	ldr	r3, [pc, #272]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d116      	bne.n	8005556 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005528:	4b41      	ldr	r3, [pc, #260]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_OscConfig+0x180>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d001      	beq.n	8005540 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e18f      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005540:	4b3b      	ldr	r3, [pc, #236]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4938      	ldr	r1, [pc, #224]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005554:	e03a      	b.n	80055cc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800555e:	4b35      	ldr	r3, [pc, #212]	; (8005634 <HAL_RCC_OscConfig+0x274>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fd f9ac 	bl	80028c0 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800556c:	f7fd f9a8 	bl	80028c0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e170      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557e:	4b2c      	ldr	r3, [pc, #176]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558a:	4b29      	ldr	r3, [pc, #164]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4925      	ldr	r1, [pc, #148]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
 800559e:	e015      	b.n	80055cc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a0:	4b24      	ldr	r3, [pc, #144]	; (8005634 <HAL_RCC_OscConfig+0x274>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd f98b 	bl	80028c0 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ae:	f7fd f987 	bl	80028c0 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e14f      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c0:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d037      	beq.n	8005648 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d016      	beq.n	800560e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e0:	4b15      	ldr	r3, [pc, #84]	; (8005638 <HAL_RCC_OscConfig+0x278>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e6:	f7fd f96b 	bl	80028c0 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ee:	f7fd f967 	bl	80028c0 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e12f      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_OscConfig+0x270>)
 8005602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x22e>
 800560c:	e01c      	b.n	8005648 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800560e:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <HAL_RCC_OscConfig+0x278>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fd f954 	bl	80028c0 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800561a:	e00f      	b.n	800563c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800561c:	f7fd f950 	bl	80028c0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d908      	bls.n	800563c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e118      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	42470000 	.word	0x42470000
 8005638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563c:	4b8a      	ldr	r3, [pc, #552]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800563e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e9      	bne.n	800561c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8097 	beq.w	8005784 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565a:	4b83      	ldr	r3, [pc, #524]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	4b7f      	ldr	r3, [pc, #508]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	4a7e      	ldr	r2, [pc, #504]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005674:	6413      	str	r3, [r2, #64]	; 0x40
 8005676:	4b7c      	ldr	r3, [pc, #496]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	4b79      	ldr	r3, [pc, #484]	; (800586c <HAL_RCC_OscConfig+0x4ac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d118      	bne.n	80056c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005692:	4b76      	ldr	r3, [pc, #472]	; (800586c <HAL_RCC_OscConfig+0x4ac>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a75      	ldr	r2, [pc, #468]	; (800586c <HAL_RCC_OscConfig+0x4ac>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569e:	f7fd f90f 	bl	80028c0 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a6:	f7fd f90b 	bl	80028c0 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0d3      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	4b6c      	ldr	r3, [pc, #432]	; (800586c <HAL_RCC_OscConfig+0x4ac>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d106      	bne.n	80056da <HAL_RCC_OscConfig+0x31a>
 80056cc:	4b66      	ldr	r3, [pc, #408]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	4a65      	ldr	r2, [pc, #404]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6713      	str	r3, [r2, #112]	; 0x70
 80056d8:	e01c      	b.n	8005714 <HAL_RCC_OscConfig+0x354>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d10c      	bne.n	80056fc <HAL_RCC_OscConfig+0x33c>
 80056e2:	4b61      	ldr	r3, [pc, #388]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4a60      	ldr	r2, [pc, #384]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80056e8:	f043 0304 	orr.w	r3, r3, #4
 80056ec:	6713      	str	r3, [r2, #112]	; 0x70
 80056ee:	4b5e      	ldr	r3, [pc, #376]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a5d      	ldr	r2, [pc, #372]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
 80056fa:	e00b      	b.n	8005714 <HAL_RCC_OscConfig+0x354>
 80056fc:	4b5a      	ldr	r3, [pc, #360]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	4a59      	ldr	r2, [pc, #356]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	6713      	str	r3, [r2, #112]	; 0x70
 8005708:	4b57      	ldr	r3, [pc, #348]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a56      	ldr	r2, [pc, #344]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800570e:	f023 0304 	bic.w	r3, r3, #4
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fd f8d0 	bl	80028c0 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005722:	e00a      	b.n	800573a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fd f8cc 	bl	80028c0 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e092      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ee      	beq.n	8005724 <HAL_RCC_OscConfig+0x364>
 8005746:	e014      	b.n	8005772 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fd f8ba 	bl	80028c0 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fd f8b6 	bl	80028c0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	; 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e07c      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	4b40      	ldr	r3, [pc, #256]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ee      	bne.n	8005750 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005778:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	4a3a      	ldr	r2, [pc, #232]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d068      	beq.n	800585e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b08      	cmp	r3, #8
 8005796:	d060      	beq.n	800585a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d145      	bne.n	800582c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b33      	ldr	r3, [pc, #204]	; (8005870 <HAL_RCC_OscConfig+0x4b0>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fd f88b 	bl	80028c0 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fd f887 	bl	80028c0 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e04f      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c0:	4b29      	ldr	r3, [pc, #164]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	019b      	lsls	r3, r3, #6
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	3b01      	subs	r3, #1
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	061b      	lsls	r3, r3, #24
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	071b      	lsls	r3, r3, #28
 80057f8:	491b      	ldr	r1, [pc, #108]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057fe:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <HAL_RCC_OscConfig+0x4b0>)
 8005800:	2201      	movs	r2, #1
 8005802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fd f85c 	bl	80028c0 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800580c:	f7fd f858 	bl	80028c0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e020      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCC_OscConfig+0x44c>
 800582a:	e018      	b.n	800585e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582c:	4b10      	ldr	r3, [pc, #64]	; (8005870 <HAL_RCC_OscConfig+0x4b0>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005832:	f7fd f845 	bl	80028c0 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583a:	f7fd f841 	bl	80028c0 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e009      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <HAL_RCC_OscConfig+0x4a8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <HAL_RCC_OscConfig+0x47a>
 8005858:	e001      	b.n	800585e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40023800 	.word	0x40023800
 800586c:	40007000 	.word	0x40007000
 8005870:	42470060 	.word	0x42470060

08005874 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e083      	b.n	800598e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7f5b      	ldrb	r3, [r3, #29]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d105      	bne.n	800589c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc fddc 	bl	8002454 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	22ca      	movs	r2, #202	; 0xca
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2253      	movs	r2, #83	; 0x53
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 faa8 	bl	8005e08 <RTC_EnterInitMode>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	22ff      	movs	r2, #255	; 0xff
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2204      	movs	r2, #4
 80058ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e05e      	b.n	800598e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6899      	ldr	r1, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68d2      	ldr	r2, [r2, #12]
 800590a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6919      	ldr	r1, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	041a      	lsls	r2, r3, #16
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800592e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10e      	bne.n	800595c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa3a 	bl	8005db8 <HAL_RTC_WaitForSynchro>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2204      	movs	r2, #4
 8005956:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e018      	b.n	800598e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	22ff      	movs	r2, #255	; 0xff
 8005984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800598c:	2300      	movs	r3, #0
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005996:	b590      	push	{r4, r7, lr}
 8005998:	b087      	sub	sp, #28
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	7f1b      	ldrb	r3, [r3, #28]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_RTC_SetTime+0x1c>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e0aa      	b.n	8005b08 <HAL_RTC_SetTime+0x172>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2202      	movs	r2, #2
 80059bc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d126      	bne.n	8005a12 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2200      	movs	r2, #0
 80059d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fa3f 	bl	8005e60 <RTC_ByteToBcd2>
 80059e2:	4603      	mov	r3, r0
 80059e4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fa38 	bl	8005e60 <RTC_ByteToBcd2>
 80059f0:	4603      	mov	r3, r0
 80059f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059f4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	789b      	ldrb	r3, [r3, #2]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fa30 	bl	8005e60 <RTC_ByteToBcd2>
 8005a00:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a02:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e018      	b.n	8005a44 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a32:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a38:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	22ca      	movs	r2, #202	; 0xca
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2253      	movs	r2, #83	; 0x53
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f9d7 	bl	8005e08 <RTC_EnterInitMode>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e047      	b.n	8005b08 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005abe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d111      	bne.n	8005af2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f972 	bl	8005db8 <HAL_RTC_WaitForSynchro>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e00a      	b.n	8005b08 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	22ff      	movs	r2, #255	; 0xff
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005b06:	2300      	movs	r3, #0
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}

08005b10 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	0c1b      	lsrs	r3, r3, #16
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	0c1b      	lsrs	r3, r3, #16
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11a      	bne.n	8005bc2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 f983 	bl	8005e9c <RTC_Bcd2ToByte>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f97a 	bl	8005e9c <RTC_Bcd2ToByte>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	789b      	ldrb	r3, [r3, #2]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f971 	bl	8005e9c <RTC_Bcd2ToByte>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bcc:	b590      	push	{r4, r7, lr}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	7f1b      	ldrb	r3, [r3, #28]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_RTC_SetDate+0x1c>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e094      	b.n	8005d12 <HAL_RTC_SetDate+0x146>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10e      	bne.n	8005c18 <HAL_RTC_SetDate+0x4c>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d008      	beq.n	8005c18 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	f023 0310 	bic.w	r3, r3, #16
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	330a      	adds	r3, #10
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11c      	bne.n	8005c58 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	78db      	ldrb	r3, [r3, #3]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f91c 	bl	8005e60 <RTC_ByteToBcd2>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f915 	bl	8005e60 <RTC_ByteToBcd2>
 8005c36:	4603      	mov	r3, r0
 8005c38:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c3a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	789b      	ldrb	r3, [r3, #2]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f90d 	bl	8005e60 <RTC_ByteToBcd2>
 8005c46:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c48:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e00e      	b.n	8005c76 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c64:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	22ca      	movs	r2, #202	; 0xca
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2253      	movs	r2, #83	; 0x53
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f8be 	bl	8005e08 <RTC_EnterInitMode>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	22ff      	movs	r2, #255	; 0xff
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e033      	b.n	8005d12 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cb8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cc8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d111      	bne.n	8005cfc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f86d 	bl	8005db8 <HAL_RTC_WaitForSynchro>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	22ff      	movs	r2, #255	; 0xff
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e00a      	b.n	8005d12 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd90      	pop	{r4, r7, pc}

08005d1a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d38:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	0b5b      	lsrs	r3, r3, #13
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11a      	bne.n	8005dae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	78db      	ldrb	r3, [r3, #3]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 f88d 	bl	8005e9c <RTC_Bcd2ToByte>
 8005d82:	4603      	mov	r3, r0
 8005d84:	461a      	mov	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f884 	bl	8005e9c <RTC_Bcd2ToByte>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	789b      	ldrb	r3, [r3, #2]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 f87b 	bl	8005e9c <RTC_Bcd2ToByte>
 8005da6:	4603      	mov	r3, r0
 8005da8:	461a      	mov	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dd2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dd4:	f7fc fd74 	bl	80028c0 <HAL_GetTick>
 8005dd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005dda:	e009      	b.n	8005df0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ddc:	f7fc fd70 	bl	80028c0 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dea:	d901      	bls.n	8005df0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e007      	b.n	8005e00 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ee      	beq.n	8005ddc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d119      	bne.n	8005e56 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7fc fd48 	bl	80028c0 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e32:	e009      	b.n	8005e48 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e34:	f7fc fd44 	bl	80028c0 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e42:	d901      	bls.n	8005e48 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e007      	b.n	8005e58 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0ee      	beq.n	8005e34 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005e6e:	e005      	b.n	8005e7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	3b0a      	subs	r3, #10
 8005e7a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d8f6      	bhi.n	8005e70 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b2db      	uxtb	r3, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	b2db      	uxtb	r3, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e056      	b.n	8005f98 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fc fabb 	bl	8002480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	ea42 0103 	orr.w	r1, r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	f003 0104 	and.w	r1, r3, #4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_SPI_Transmit+0x22>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e11e      	b.n	8006200 <HAL_SPI_Transmit+0x260>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fca:	f7fc fc79 	bl	80028c0 <HAL_GetTick>
 8005fce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d002      	beq.n	8005fe6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fe4:	e103      	b.n	80061ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_SPI_Transmit+0x52>
 8005fec:	88fb      	ldrh	r3, [r7, #6]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ff6:	e0fa      	b.n	80061ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603e:	d107      	bne.n	8006050 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800604e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d007      	beq.n	800606e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800606c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006076:	d14b      	bne.n	8006110 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_SPI_Transmit+0xe6>
 8006080:	8afb      	ldrh	r3, [r7, #22]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d13e      	bne.n	8006104 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	881a      	ldrh	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	1c9a      	adds	r2, r3, #2
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060aa:	e02b      	b.n	8006104 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d112      	bne.n	80060e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	881a      	ldrh	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	1c9a      	adds	r2, r3, #2
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80060de:	e011      	b.n	8006104 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e0:	f7fc fbee 	bl	80028c0 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d803      	bhi.n	80060f8 <HAL_SPI_Transmit+0x158>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d102      	bne.n	80060fe <HAL_SPI_Transmit+0x15e>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006102:	e074      	b.n	80061ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1ce      	bne.n	80060ac <HAL_SPI_Transmit+0x10c>
 800610e:	e04c      	b.n	80061aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_SPI_Transmit+0x17e>
 8006118:	8afb      	ldrh	r3, [r7, #22]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d140      	bne.n	80061a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	7812      	ldrb	r2, [r2, #0]
 800612a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006144:	e02c      	b.n	80061a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d113      	bne.n	800617c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	86da      	strh	r2, [r3, #54]	; 0x36
 800617a:	e011      	b.n	80061a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800617c:	f7fc fba0 	bl	80028c0 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d803      	bhi.n	8006194 <HAL_SPI_Transmit+0x1f4>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d102      	bne.n	800619a <HAL_SPI_Transmit+0x1fa>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800619e:	e026      	b.n	80061ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1cd      	bne.n	8006146 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fba4 	bl	80068fc <SPI_EndRxTxTransaction>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c8:	2300      	movs	r3, #0
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	613b      	str	r3, [r7, #16]
 80061dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e000      	b.n	80061ee <HAL_SPI_Transmit+0x24e>
  }

error:
 80061ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006224:	d112      	bne.n	800624c <HAL_SPI_Receive+0x44>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10e      	bne.n	800624c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2204      	movs	r2, #4
 8006232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006236:	88fa      	ldrh	r2, [r7, #6]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f8e9 	bl	800641a <HAL_SPI_TransmitReceive>
 8006248:	4603      	mov	r3, r0
 800624a:	e0e2      	b.n	8006412 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_SPI_Receive+0x52>
 8006256:	2302      	movs	r3, #2
 8006258:	e0db      	b.n	8006412 <HAL_SPI_Receive+0x20a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006262:	f7fc fb2d 	bl	80028c0 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d002      	beq.n	800627a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006274:	2302      	movs	r3, #2
 8006276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006278:	e0c2      	b.n	8006400 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_Receive+0x7e>
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
    goto error;
 800628a:	e0b9      	b.n	8006400 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2204      	movs	r2, #4
 8006290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	88fa      	ldrh	r2, [r7, #6]
 80062aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d2:	d107      	bne.n	80062e4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d007      	beq.n	8006302 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d162      	bne.n	80063d0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800630a:	e02e      	b.n	800636a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b01      	cmp	r3, #1
 8006318:	d115      	bne.n	8006346 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f103 020c 	add.w	r2, r3, #12
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	7812      	ldrb	r2, [r2, #0]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006344:	e011      	b.n	800636a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006346:	f7fc fabb 	bl	80028c0 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d803      	bhi.n	800635e <HAL_SPI_Receive+0x156>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d102      	bne.n	8006364 <HAL_SPI_Receive+0x15c>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006368:	e04a      	b.n	8006400 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1cb      	bne.n	800630c <HAL_SPI_Receive+0x104>
 8006374:	e031      	b.n	80063da <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d113      	bne.n	80063ac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	b292      	uxth	r2, r2
 8006390:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	1c9a      	adds	r2, r3, #2
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063aa:	e011      	b.n	80063d0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ac:	f7fc fa88 	bl	80028c0 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d803      	bhi.n	80063c4 <HAL_SPI_Receive+0x1bc>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d102      	bne.n	80063ca <HAL_SPI_Receive+0x1c2>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063ce:	e017      	b.n	8006400 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1cd      	bne.n	8006376 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fa27 	bl	8006832 <SPI_EndRxTransaction>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
 80063fc:	e000      	b.n	8006400 <HAL_SPI_Receive+0x1f8>
  }

error :
 80063fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b08c      	sub	sp, #48	; 0x30
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006428:	2301      	movs	r3, #1
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_SPI_TransmitReceive+0x26>
 800643c:	2302      	movs	r3, #2
 800643e:	e18a      	b.n	8006756 <HAL_SPI_TransmitReceive+0x33c>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006448:	f7fc fa3a 	bl	80028c0 <HAL_GetTick>
 800644c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800645e:	887b      	ldrh	r3, [r7, #2]
 8006460:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006466:	2b01      	cmp	r3, #1
 8006468:	d00f      	beq.n	800648a <HAL_SPI_TransmitReceive+0x70>
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006470:	d107      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x68>
 800647a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800647e:	2b04      	cmp	r3, #4
 8006480:	d003      	beq.n	800648a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006482:	2302      	movs	r3, #2
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006488:	e15b      	b.n	8006742 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_SPI_TransmitReceive+0x82>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_SPI_TransmitReceive+0x82>
 8006496:	887b      	ldrh	r3, [r7, #2]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d103      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064a2:	e14e      	b.n	8006742 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d003      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2205      	movs	r2, #5
 80064b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	887a      	ldrh	r2, [r7, #2]
 80064c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	887a      	ldrh	r2, [r7, #2]
 80064ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	887a      	ldrh	r2, [r7, #2]
 80064da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	887a      	ldrh	r2, [r7, #2]
 80064e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d007      	beq.n	800650c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006514:	d178      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_TransmitReceive+0x10a>
 800651e:	8b7b      	ldrh	r3, [r7, #26]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d166      	bne.n	80065f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	881a      	ldrh	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	1c9a      	adds	r2, r3, #2
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006548:	e053      	b.n	80065f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b02      	cmp	r3, #2
 8006556:	d11b      	bne.n	8006590 <HAL_SPI_TransmitReceive+0x176>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d016      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x176>
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d113      	bne.n	8006590 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	881a      	ldrh	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	1c9a      	adds	r2, r3, #2
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d119      	bne.n	80065d2 <HAL_SPI_TransmitReceive+0x1b8>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d014      	beq.n	80065d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	b292      	uxth	r2, r2
 80065b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	1c9a      	adds	r2, r3, #2
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065ce:	2301      	movs	r3, #1
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065d2:	f7fc f975 	bl	80028c0 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065de:	429a      	cmp	r2, r3
 80065e0:	d807      	bhi.n	80065f2 <HAL_SPI_TransmitReceive+0x1d8>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d003      	beq.n	80065f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065f0:	e0a7      	b.n	8006742 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1a6      	bne.n	800654a <HAL_SPI_TransmitReceive+0x130>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1a1      	bne.n	800654a <HAL_SPI_TransmitReceive+0x130>
 8006606:	e07c      	b.n	8006702 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x1fc>
 8006610:	8b7b      	ldrh	r3, [r7, #26]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d16b      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	7812      	ldrb	r2, [r2, #0]
 8006622:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663c:	e057      	b.n	80066ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d11c      	bne.n	8006686 <HAL_SPI_TransmitReceive+0x26c>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x26c>
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d114      	bne.n	8006686 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b01      	cmp	r3, #1
 8006692:	d119      	bne.n	80066c8 <HAL_SPI_TransmitReceive+0x2ae>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d014      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c4:	2301      	movs	r3, #1
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066c8:	f7fc f8fa 	bl	80028c0 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d803      	bhi.n	80066e0 <HAL_SPI_TransmitReceive+0x2c6>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d102      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0x2cc>
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d103      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066ec:	e029      	b.n	8006742 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1a2      	bne.n	800663e <HAL_SPI_TransmitReceive+0x224>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d19d      	bne.n	800663e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f8f8 	bl	80068fc <SPI_EndRxTxTransaction>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d006      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800671e:	e010      	b.n	8006742 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	e000      	b.n	8006742 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006740:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006756:	4618      	mov	r0, r3
 8006758:	3730      	adds	r7, #48	; 0x30
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	603b      	str	r3, [r7, #0]
 800676a:	4613      	mov	r3, r2
 800676c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800676e:	e04c      	b.n	800680a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d048      	beq.n	800680a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006778:	f7fc f8a2 	bl	80028c0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d902      	bls.n	800678e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d13d      	bne.n	800680a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800679c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a6:	d111      	bne.n	80067cc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b0:	d004      	beq.n	80067bc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ba:	d107      	bne.n	80067cc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d4:	d10f      	bne.n	80067f6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e00f      	b.n	800682a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4013      	ands	r3, r2
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	429a      	cmp	r2, r3
 8006818:	bf0c      	ite	eq
 800681a:	2301      	moveq	r3, #1
 800681c:	2300      	movne	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	429a      	cmp	r2, r3
 8006826:	d1a3      	bne.n	8006770 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b086      	sub	sp, #24
 8006836:	af02      	add	r7, sp, #8
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006846:	d111      	bne.n	800686c <SPI_EndRxTransaction+0x3a>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006850:	d004      	beq.n	800685c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685a:	d107      	bne.n	800686c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006874:	d12a      	bne.n	80068cc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d012      	beq.n	80068a6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff ff67 	bl	800675e <SPI_WaitFlagStateUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02d      	beq.n	80068f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e026      	b.n	80068f4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2101      	movs	r1, #1
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff ff54 	bl	800675e <SPI_WaitFlagStateUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01a      	beq.n	80068f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c0:	f043 0220 	orr.w	r2, r3, #32
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e013      	b.n	80068f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	2101      	movs	r1, #1
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff ff41 	bl	800675e <SPI_WaitFlagStateUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f043 0220 	orr.w	r2, r3, #32
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e000      	b.n	80068f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <SPI_EndRxTxTransaction+0x7c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1b      	ldr	r2, [pc, #108]	; (800697c <SPI_EndRxTxTransaction+0x80>)
 800690e:	fba2 2303 	umull	r2, r3, r2, r3
 8006912:	0d5b      	lsrs	r3, r3, #21
 8006914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006918:	fb02 f303 	mul.w	r3, r2, r3
 800691c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006926:	d112      	bne.n	800694e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2200      	movs	r2, #0
 8006930:	2180      	movs	r1, #128	; 0x80
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff ff13 	bl	800675e <SPI_WaitFlagStateUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f043 0220 	orr.w	r2, r3, #32
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e00f      	b.n	800696e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3b01      	subs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d0f2      	beq.n	800694e <SPI_EndRxTxTransaction+0x52>
 8006968:	e000      	b.n	800696c <SPI_EndRxTxTransaction+0x70>
        break;
 800696a:	bf00      	nop
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000008 	.word	0x20000008
 800697c:	165e9f81 	.word	0x165e9f81

08006980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e01d      	b.n	80069ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fb fdb2 	bl	8002510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f000 fa4a 	bl	8006e58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b06      	cmp	r3, #6
 80069fe:	d007      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a1a      	ldr	r2, [r3, #32]
 8006a3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10f      	bne.n	8006a66 <HAL_TIM_Base_Stop_IT+0x48>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	f240 4344 	movw	r3, #1092	; 0x444
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d107      	bne.n	8006a66 <HAL_TIM_Base_Stop_IT+0x48>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0201 	bic.w	r2, r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d122      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d11b      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0202 	mvn.w	r2, #2
 8006aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9af 	bl	8006e1a <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9a1 	bl	8006e06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9b2 	bl	8006e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d122      	bne.n	8006b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d11b      	bne.n	8006b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0204 	mvn.w	r2, #4
 8006af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2202      	movs	r2, #2
 8006afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f985 	bl	8006e1a <HAL_TIM_IC_CaptureCallback>
 8006b10:	e005      	b.n	8006b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f977 	bl	8006e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f988 	bl	8006e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0208 	mvn.w	r2, #8
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f95b 	bl	8006e1a <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f94d 	bl	8006e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f95e 	bl	8006e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d122      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d11b      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0210 	mvn.w	r2, #16
 8006b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f931 	bl	8006e1a <HAL_TIM_IC_CaptureCallback>
 8006bb8:	e005      	b.n	8006bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f923 	bl	8006e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f934 	bl	8006e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10e      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d107      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0201 	mvn.w	r2, #1
 8006bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8fd 	bl	8006df2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d10e      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fada 	bl	80071d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b40      	cmp	r3, #64	; 0x40
 8006c30:	d10e      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d107      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8f9 	bl	8006e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d10e      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d107      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0220 	mvn.w	r2, #32
 8006c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 faa4 	bl	80071c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x18>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0a6      	b.n	8006dea <HAL_TIM_ConfigClockSource+0x166>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d067      	beq.n	8006da4 <HAL_TIM_ConfigClockSource+0x120>
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d80b      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x6c>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d073      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d802      	bhi.n	8006ce6 <HAL_TIM_ConfigClockSource+0x62>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d06f      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ce4:	e078      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d06c      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
 8006cea:	2b30      	cmp	r3, #48	; 0x30
 8006cec:	d06a      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006cee:	e073      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cf0:	2b70      	cmp	r3, #112	; 0x70
 8006cf2:	d00d      	beq.n	8006d10 <HAL_TIM_ConfigClockSource+0x8c>
 8006cf4:	2b70      	cmp	r3, #112	; 0x70
 8006cf6:	d804      	bhi.n	8006d02 <HAL_TIM_ConfigClockSource+0x7e>
 8006cf8:	2b50      	cmp	r3, #80	; 0x50
 8006cfa:	d033      	beq.n	8006d64 <HAL_TIM_ConfigClockSource+0xe0>
 8006cfc:	2b60      	cmp	r3, #96	; 0x60
 8006cfe:	d041      	beq.n	8006d84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d00:	e06a      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d06:	d066      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x152>
 8006d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0c:	d017      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d0e:	e063      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6899      	ldr	r1, [r3, #8]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f000 f9b4 	bl	800708c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
      break;
 8006d3c:	e04c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6899      	ldr	r1, [r3, #8]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f000 f99d 	bl	800708c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d60:	609a      	str	r2, [r3, #8]
      break;
 8006d62:	e039      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6859      	ldr	r1, [r3, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f000 f911 	bl	8006f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2150      	movs	r1, #80	; 0x50
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 f96a 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 8006d82:	e029      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6859      	ldr	r1, [r3, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	461a      	mov	r2, r3
 8006d92:	f000 f930 	bl	8006ff6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2160      	movs	r1, #96	; 0x60
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f95a 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 8006da2:	e019      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	461a      	mov	r2, r3
 8006db2:	f000 f8f1 	bl	8006f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2140      	movs	r1, #64	; 0x40
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f94a 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 8006dc2:	e009      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f000 f941 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 8006dd4:	e000      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a40      	ldr	r2, [pc, #256]	; (8006f6c <TIM_Base_SetConfig+0x114>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e76:	d00f      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a3d      	ldr	r2, [pc, #244]	; (8006f70 <TIM_Base_SetConfig+0x118>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00b      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a3c      	ldr	r2, [pc, #240]	; (8006f74 <TIM_Base_SetConfig+0x11c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a3b      	ldr	r2, [pc, #236]	; (8006f78 <TIM_Base_SetConfig+0x120>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a3a      	ldr	r2, [pc, #232]	; (8006f7c <TIM_Base_SetConfig+0x124>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2f      	ldr	r2, [pc, #188]	; (8006f6c <TIM_Base_SetConfig+0x114>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d02b      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d027      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <TIM_Base_SetConfig+0x118>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d023      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2b      	ldr	r2, [pc, #172]	; (8006f74 <TIM_Base_SetConfig+0x11c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d01f      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a2a      	ldr	r2, [pc, #168]	; (8006f78 <TIM_Base_SetConfig+0x120>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d01b      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <TIM_Base_SetConfig+0x124>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d017      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a28      	ldr	r2, [pc, #160]	; (8006f80 <TIM_Base_SetConfig+0x128>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a27      	ldr	r2, [pc, #156]	; (8006f84 <TIM_Base_SetConfig+0x12c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00f      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <TIM_Base_SetConfig+0x130>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00b      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <TIM_Base_SetConfig+0x134>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a24      	ldr	r2, [pc, #144]	; (8006f90 <TIM_Base_SetConfig+0x138>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a23      	ldr	r2, [pc, #140]	; (8006f94 <TIM_Base_SetConfig+0x13c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d108      	bne.n	8006f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <TIM_Base_SetConfig+0x114>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d003      	beq.n	8006f50 <TIM_Base_SetConfig+0xf8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	; (8006f7c <TIM_Base_SetConfig+0x124>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d103      	bne.n	8006f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	615a      	str	r2, [r3, #20]
}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40000c00 	.word	0x40000c00
 8006f7c:	40010400 	.word	0x40010400
 8006f80:	40014000 	.word	0x40014000
 8006f84:	40014400 	.word	0x40014400
 8006f88:	40014800 	.word	0x40014800
 8006f8c:	40001800 	.word	0x40001800
 8006f90:	40001c00 	.word	0x40001c00
 8006f94:	40002000 	.word	0x40002000

08006f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f023 0201 	bic.w	r2, r3, #1
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f023 030a 	bic.w	r3, r3, #10
 8006fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	621a      	str	r2, [r3, #32]
}
 8006fea:	bf00      	nop
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b087      	sub	sp, #28
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0210 	bic.w	r2, r3, #16
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	f043 0307 	orr.w	r3, r3, #7
 8007078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	609a      	str	r2, [r3, #8]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	021a      	lsls	r2, r3, #8
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e05a      	b.n	800719a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a21      	ldr	r2, [pc, #132]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007130:	d01d      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1d      	ldr	r2, [pc, #116]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1b      	ldr	r2, [pc, #108]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1a      	ldr	r2, [pc, #104]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d10c      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4313      	orrs	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40010400 	.word	0x40010400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40001800 	.word	0x40001800

080071c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e03f      	b.n	800727e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7fb f9a2 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2224      	movs	r2, #36	; 0x24
 800721c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800722e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb4b 	bl	80078cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695a      	ldr	r2, [r3, #20]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b088      	sub	sp, #32
 800728a:	af02      	add	r7, sp, #8
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	4613      	mov	r3, r2
 8007294:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	f040 8083 	bne.w	80073ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <HAL_UART_Transmit+0x2e>
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e07b      	b.n	80073b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_UART_Transmit+0x40>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e074      	b.n	80073b0 <HAL_UART_Transmit+0x12a>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2221      	movs	r2, #33	; 0x21
 80072d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80072dc:	f7fb faf0 	bl	80028c0 <HAL_GetTick>
 80072e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	88fa      	ldrh	r2, [r7, #6]
 80072e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80072f6:	e042      	b.n	800737e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730e:	d122      	bne.n	8007356 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2200      	movs	r2, #0
 8007318:	2180      	movs	r1, #128	; 0x80
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f96a 	bl	80075f4 <UART_WaitOnFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e042      	b.n	80073b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800733c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d103      	bne.n	800734e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	3302      	adds	r3, #2
 800734a:	60bb      	str	r3, [r7, #8]
 800734c:	e017      	b.n	800737e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	3301      	adds	r3, #1
 8007352:	60bb      	str	r3, [r7, #8]
 8007354:	e013      	b.n	800737e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2200      	movs	r2, #0
 800735e:	2180      	movs	r1, #128	; 0x80
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f947 	bl	80075f4 <UART_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e01f      	b.n	80073b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	60ba      	str	r2, [r7, #8]
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1b7      	bne.n	80072f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2200      	movs	r2, #0
 8007390:	2140      	movs	r1, #64	; 0x40
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 f92e 	bl	80075f4 <UART_WaitOnFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e006      	b.n	80073b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
  }
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10d      	bne.n	800740a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d008      	beq.n	800740a <HAL_UART_IRQHandler+0x52>
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f9e0 	bl	80077c8 <UART_Receive_IT>
      return;
 8007408:	e0d1      	b.n	80075ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80b0 	beq.w	8007572 <HAL_UART_IRQHandler+0x1ba>
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <HAL_UART_IRQHandler+0x70>
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80a5 	beq.w	8007572 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <HAL_UART_IRQHandler+0x90>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	f043 0201 	orr.w	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_UART_IRQHandler+0xb0>
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	f043 0202 	orr.w	r2, r3, #2
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_UART_IRQHandler+0xd0>
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007480:	f043 0204 	orr.w	r2, r3, #4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00f      	beq.n	80074b2 <HAL_UART_IRQHandler+0xfa>
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <HAL_UART_IRQHandler+0xee>
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	f043 0208 	orr.w	r2, r3, #8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d078      	beq.n	80075ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <HAL_UART_IRQHandler+0x11c>
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f97a 	bl	80077c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ee:	f003 0308 	and.w	r3, r3, #8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d102      	bne.n	80074fc <HAL_UART_IRQHandler+0x144>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d031      	beq.n	8007560 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f8c3 	bl	8007688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d123      	bne.n	8007558 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800751e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007524:	2b00      	cmp	r3, #0
 8007526:	d013      	beq.n	8007550 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	4a21      	ldr	r2, [pc, #132]	; (80075b4 <HAL_UART_IRQHandler+0x1fc>)
 800752e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007534:	4618      	mov	r0, r3
 8007536:	f7fb ffe1 	bl	80034fc <HAL_DMA_Abort_IT>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d016      	beq.n	800756e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800754a:	4610      	mov	r0, r2
 800754c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754e:	e00e      	b.n	800756e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f845 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007556:	e00a      	b.n	800756e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f841 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755e:	e006      	b.n	800756e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f83d 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800756c:	e01e      	b.n	80075ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756e:	bf00      	nop
    return;
 8007570:	e01c      	b.n	80075ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_UART_IRQHandler+0x1d6>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8b0 	bl	80076ec <UART_Transmit_IT>
    return;
 800758c:	e00f      	b.n	80075ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <HAL_UART_IRQHandler+0x1f6>
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f8f8 	bl	8007798 <UART_EndTransmit_IT>
    return;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80075ac:	bf00      	nop
  }
}
 80075ae:	3720      	adds	r7, #32
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	080076c5 	.word	0x080076c5

080075b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	4613      	mov	r3, r2
 8007602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007604:	e02c      	b.n	8007660 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760c:	d028      	beq.n	8007660 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <UART_WaitOnFlagUntilTimeout+0x30>
 8007614:	f7fb f954 	bl	80028c0 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	429a      	cmp	r2, r3
 8007622:	d21d      	bcs.n	8007660 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007632:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695a      	ldr	r2, [r3, #20]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e00f      	b.n	8007680 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4013      	ands	r3, r2
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	461a      	mov	r2, r3
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	429a      	cmp	r2, r3
 800767c:	d0c3      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800769e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0201 	bic.w	r2, r2, #1
 80076ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff ff7e 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b21      	cmp	r3, #33	; 0x21
 80076fe:	d144      	bne.n	800778a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007708:	d11a      	bne.n	8007740 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800771e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	1c9a      	adds	r2, r3, #2
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]
 8007732:	e00e      	b.n	8007752 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	621a      	str	r2, [r3, #32]
 800773e:	e008      	b.n	8007752 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	1c59      	adds	r1, r3, #1
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6211      	str	r1, [r2, #32]
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	4619      	mov	r1, r3
 8007760:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10f      	bne.n	8007786 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007774:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007784:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	e000      	b.n	800778c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800778a:	2302      	movs	r3, #2
  }
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fefd 	bl	80075b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b22      	cmp	r3, #34	; 0x22
 80077da:	d171      	bne.n	80078c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e4:	d123      	bne.n	800782e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10e      	bne.n	8007812 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	1c9a      	adds	r2, r3, #2
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	629a      	str	r2, [r3, #40]	; 0x28
 8007810:	e029      	b.n	8007866 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	b29b      	uxth	r3, r3
 800781a:	b2db      	uxtb	r3, r3
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	629a      	str	r2, [r3, #40]	; 0x28
 800782c:	e01b      	b.n	8007866 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6858      	ldr	r0, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	1c59      	adds	r1, r3, #1
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6291      	str	r1, [r2, #40]	; 0x28
 8007846:	b2c2      	uxtb	r2, r0
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	e00c      	b.n	8007866 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	b2da      	uxtb	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	1c58      	adds	r0, r3, #1
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	6288      	str	r0, [r1, #40]	; 0x28
 800785e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29b      	uxth	r3, r3
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4619      	mov	r1, r3
 8007874:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007876:	2b00      	cmp	r3, #0
 8007878:	d120      	bne.n	80078bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68da      	ldr	r2, [r3, #12]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0220 	bic.w	r2, r2, #32
 8007888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0201 	bic.w	r2, r2, #1
 80078a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff fe8a 	bl	80075cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	e002      	b.n	80078c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	e000      	b.n	80078c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
  }
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800790e:	f023 030c 	bic.w	r3, r3, #12
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	430b      	orrs	r3, r1
 800791a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800793a:	f040 818b 	bne.w	8007c54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4ac1      	ldr	r2, [pc, #772]	; (8007c48 <UART_SetConfig+0x37c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d005      	beq.n	8007954 <UART_SetConfig+0x88>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4abf      	ldr	r2, [pc, #764]	; (8007c4c <UART_SetConfig+0x380>)
 800794e:	4293      	cmp	r3, r2
 8007950:	f040 80bd 	bne.w	8007ace <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007954:	f7fd f8a4 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 8007958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	461d      	mov	r5, r3
 800795e:	f04f 0600 	mov.w	r6, #0
 8007962:	46a8      	mov	r8, r5
 8007964:	46b1      	mov	r9, r6
 8007966:	eb18 0308 	adds.w	r3, r8, r8
 800796a:	eb49 0409 	adc.w	r4, r9, r9
 800796e:	4698      	mov	r8, r3
 8007970:	46a1      	mov	r9, r4
 8007972:	eb18 0805 	adds.w	r8, r8, r5
 8007976:	eb49 0906 	adc.w	r9, r9, r6
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800798a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800798e:	4688      	mov	r8, r1
 8007990:	4691      	mov	r9, r2
 8007992:	eb18 0005 	adds.w	r0, r8, r5
 8007996:	eb49 0106 	adc.w	r1, r9, r6
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	461d      	mov	r5, r3
 80079a0:	f04f 0600 	mov.w	r6, #0
 80079a4:	196b      	adds	r3, r5, r5
 80079a6:	eb46 0406 	adc.w	r4, r6, r6
 80079aa:	461a      	mov	r2, r3
 80079ac:	4623      	mov	r3, r4
 80079ae:	f7f9 f96b 	bl	8000c88 <__aeabi_uldivmod>
 80079b2:	4603      	mov	r3, r0
 80079b4:	460c      	mov	r4, r1
 80079b6:	461a      	mov	r2, r3
 80079b8:	4ba5      	ldr	r3, [pc, #660]	; (8007c50 <UART_SetConfig+0x384>)
 80079ba:	fba3 2302 	umull	r2, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	461d      	mov	r5, r3
 80079c8:	f04f 0600 	mov.w	r6, #0
 80079cc:	46a9      	mov	r9, r5
 80079ce:	46b2      	mov	sl, r6
 80079d0:	eb19 0309 	adds.w	r3, r9, r9
 80079d4:	eb4a 040a 	adc.w	r4, sl, sl
 80079d8:	4699      	mov	r9, r3
 80079da:	46a2      	mov	sl, r4
 80079dc:	eb19 0905 	adds.w	r9, r9, r5
 80079e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80079e4:	f04f 0100 	mov.w	r1, #0
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079f8:	4689      	mov	r9, r1
 80079fa:	4692      	mov	sl, r2
 80079fc:	eb19 0005 	adds.w	r0, r9, r5
 8007a00:	eb4a 0106 	adc.w	r1, sl, r6
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	461d      	mov	r5, r3
 8007a0a:	f04f 0600 	mov.w	r6, #0
 8007a0e:	196b      	adds	r3, r5, r5
 8007a10:	eb46 0406 	adc.w	r4, r6, r6
 8007a14:	461a      	mov	r2, r3
 8007a16:	4623      	mov	r3, r4
 8007a18:	f7f9 f936 	bl	8000c88 <__aeabi_uldivmod>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	461a      	mov	r2, r3
 8007a22:	4b8b      	ldr	r3, [pc, #556]	; (8007c50 <UART_SetConfig+0x384>)
 8007a24:	fba3 1302 	umull	r1, r3, r3, r2
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	2164      	movs	r1, #100	; 0x64
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	3332      	adds	r3, #50	; 0x32
 8007a36:	4a86      	ldr	r2, [pc, #536]	; (8007c50 <UART_SetConfig+0x384>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a44:	4498      	add	r8, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	461d      	mov	r5, r3
 8007a4a:	f04f 0600 	mov.w	r6, #0
 8007a4e:	46a9      	mov	r9, r5
 8007a50:	46b2      	mov	sl, r6
 8007a52:	eb19 0309 	adds.w	r3, r9, r9
 8007a56:	eb4a 040a 	adc.w	r4, sl, sl
 8007a5a:	4699      	mov	r9, r3
 8007a5c:	46a2      	mov	sl, r4
 8007a5e:	eb19 0905 	adds.w	r9, r9, r5
 8007a62:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a7a:	4689      	mov	r9, r1
 8007a7c:	4692      	mov	sl, r2
 8007a7e:	eb19 0005 	adds.w	r0, r9, r5
 8007a82:	eb4a 0106 	adc.w	r1, sl, r6
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	461d      	mov	r5, r3
 8007a8c:	f04f 0600 	mov.w	r6, #0
 8007a90:	196b      	adds	r3, r5, r5
 8007a92:	eb46 0406 	adc.w	r4, r6, r6
 8007a96:	461a      	mov	r2, r3
 8007a98:	4623      	mov	r3, r4
 8007a9a:	f7f9 f8f5 	bl	8000c88 <__aeabi_uldivmod>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	4b6a      	ldr	r3, [pc, #424]	; (8007c50 <UART_SetConfig+0x384>)
 8007aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	2164      	movs	r1, #100	; 0x64
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	3332      	adds	r3, #50	; 0x32
 8007ab8:	4a65      	ldr	r2, [pc, #404]	; (8007c50 <UART_SetConfig+0x384>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	f003 0207 	and.w	r2, r3, #7
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4442      	add	r2, r8
 8007aca:	609a      	str	r2, [r3, #8]
 8007acc:	e26f      	b.n	8007fae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ace:	f7fc ffd3 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 8007ad2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	461d      	mov	r5, r3
 8007ad8:	f04f 0600 	mov.w	r6, #0
 8007adc:	46a8      	mov	r8, r5
 8007ade:	46b1      	mov	r9, r6
 8007ae0:	eb18 0308 	adds.w	r3, r8, r8
 8007ae4:	eb49 0409 	adc.w	r4, r9, r9
 8007ae8:	4698      	mov	r8, r3
 8007aea:	46a1      	mov	r9, r4
 8007aec:	eb18 0805 	adds.w	r8, r8, r5
 8007af0:	eb49 0906 	adc.w	r9, r9, r6
 8007af4:	f04f 0100 	mov.w	r1, #0
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b08:	4688      	mov	r8, r1
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	eb18 0005 	adds.w	r0, r8, r5
 8007b10:	eb49 0106 	adc.w	r1, r9, r6
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	461d      	mov	r5, r3
 8007b1a:	f04f 0600 	mov.w	r6, #0
 8007b1e:	196b      	adds	r3, r5, r5
 8007b20:	eb46 0406 	adc.w	r4, r6, r6
 8007b24:	461a      	mov	r2, r3
 8007b26:	4623      	mov	r3, r4
 8007b28:	f7f9 f8ae 	bl	8000c88 <__aeabi_uldivmod>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	461a      	mov	r2, r3
 8007b32:	4b47      	ldr	r3, [pc, #284]	; (8007c50 <UART_SetConfig+0x384>)
 8007b34:	fba3 2302 	umull	r2, r3, r3, r2
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	461d      	mov	r5, r3
 8007b42:	f04f 0600 	mov.w	r6, #0
 8007b46:	46a9      	mov	r9, r5
 8007b48:	46b2      	mov	sl, r6
 8007b4a:	eb19 0309 	adds.w	r3, r9, r9
 8007b4e:	eb4a 040a 	adc.w	r4, sl, sl
 8007b52:	4699      	mov	r9, r3
 8007b54:	46a2      	mov	sl, r4
 8007b56:	eb19 0905 	adds.w	r9, r9, r5
 8007b5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b5e:	f04f 0100 	mov.w	r1, #0
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b72:	4689      	mov	r9, r1
 8007b74:	4692      	mov	sl, r2
 8007b76:	eb19 0005 	adds.w	r0, r9, r5
 8007b7a:	eb4a 0106 	adc.w	r1, sl, r6
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	461d      	mov	r5, r3
 8007b84:	f04f 0600 	mov.w	r6, #0
 8007b88:	196b      	adds	r3, r5, r5
 8007b8a:	eb46 0406 	adc.w	r4, r6, r6
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4623      	mov	r3, r4
 8007b92:	f7f9 f879 	bl	8000c88 <__aeabi_uldivmod>
 8007b96:	4603      	mov	r3, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4b2c      	ldr	r3, [pc, #176]	; (8007c50 <UART_SetConfig+0x384>)
 8007b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	2164      	movs	r1, #100	; 0x64
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	3332      	adds	r3, #50	; 0x32
 8007bb0:	4a27      	ldr	r2, [pc, #156]	; (8007c50 <UART_SetConfig+0x384>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bbe:	4498      	add	r8, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	f04f 0600 	mov.w	r6, #0
 8007bc8:	46a9      	mov	r9, r5
 8007bca:	46b2      	mov	sl, r6
 8007bcc:	eb19 0309 	adds.w	r3, r9, r9
 8007bd0:	eb4a 040a 	adc.w	r4, sl, sl
 8007bd4:	4699      	mov	r9, r3
 8007bd6:	46a2      	mov	sl, r4
 8007bd8:	eb19 0905 	adds.w	r9, r9, r5
 8007bdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007be0:	f04f 0100 	mov.w	r1, #0
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bf4:	4689      	mov	r9, r1
 8007bf6:	4692      	mov	sl, r2
 8007bf8:	eb19 0005 	adds.w	r0, r9, r5
 8007bfc:	eb4a 0106 	adc.w	r1, sl, r6
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	461d      	mov	r5, r3
 8007c06:	f04f 0600 	mov.w	r6, #0
 8007c0a:	196b      	adds	r3, r5, r5
 8007c0c:	eb46 0406 	adc.w	r4, r6, r6
 8007c10:	461a      	mov	r2, r3
 8007c12:	4623      	mov	r3, r4
 8007c14:	f7f9 f838 	bl	8000c88 <__aeabi_uldivmod>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <UART_SetConfig+0x384>)
 8007c20:	fba3 1302 	umull	r1, r3, r3, r2
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	2164      	movs	r1, #100	; 0x64
 8007c28:	fb01 f303 	mul.w	r3, r1, r3
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	3332      	adds	r3, #50	; 0x32
 8007c32:	4a07      	ldr	r2, [pc, #28]	; (8007c50 <UART_SetConfig+0x384>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	f003 0207 	and.w	r2, r3, #7
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4442      	add	r2, r8
 8007c44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c46:	e1b2      	b.n	8007fae <UART_SetConfig+0x6e2>
 8007c48:	40011000 	.word	0x40011000
 8007c4c:	40011400 	.word	0x40011400
 8007c50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4ad7      	ldr	r2, [pc, #860]	; (8007fb8 <UART_SetConfig+0x6ec>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d005      	beq.n	8007c6a <UART_SetConfig+0x39e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4ad6      	ldr	r2, [pc, #856]	; (8007fbc <UART_SetConfig+0x6f0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	f040 80d1 	bne.w	8007e0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c6a:	f7fc ff19 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 8007c6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	469a      	mov	sl, r3
 8007c74:	f04f 0b00 	mov.w	fp, #0
 8007c78:	46d0      	mov	r8, sl
 8007c7a:	46d9      	mov	r9, fp
 8007c7c:	eb18 0308 	adds.w	r3, r8, r8
 8007c80:	eb49 0409 	adc.w	r4, r9, r9
 8007c84:	4698      	mov	r8, r3
 8007c86:	46a1      	mov	r9, r4
 8007c88:	eb18 080a 	adds.w	r8, r8, sl
 8007c8c:	eb49 090b 	adc.w	r9, r9, fp
 8007c90:	f04f 0100 	mov.w	r1, #0
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ca0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ca4:	4688      	mov	r8, r1
 8007ca6:	4691      	mov	r9, r2
 8007ca8:	eb1a 0508 	adds.w	r5, sl, r8
 8007cac:	eb4b 0609 	adc.w	r6, fp, r9
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	f04f 0400 	mov.w	r4, #0
 8007cc2:	0094      	lsls	r4, r2, #2
 8007cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cc8:	008b      	lsls	r3, r1, #2
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4623      	mov	r3, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	f7f8 ffd9 	bl	8000c88 <__aeabi_uldivmod>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4bb8      	ldr	r3, [pc, #736]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007cde:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce2:	095b      	lsrs	r3, r3, #5
 8007ce4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	469b      	mov	fp, r3
 8007cec:	f04f 0c00 	mov.w	ip, #0
 8007cf0:	46d9      	mov	r9, fp
 8007cf2:	46e2      	mov	sl, ip
 8007cf4:	eb19 0309 	adds.w	r3, r9, r9
 8007cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8007cfc:	4699      	mov	r9, r3
 8007cfe:	46a2      	mov	sl, r4
 8007d00:	eb19 090b 	adds.w	r9, r9, fp
 8007d04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d08:	f04f 0100 	mov.w	r1, #0
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d1c:	4689      	mov	r9, r1
 8007d1e:	4692      	mov	sl, r2
 8007d20:	eb1b 0509 	adds.w	r5, fp, r9
 8007d24:	eb4c 060a 	adc.w	r6, ip, sl
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	f04f 0400 	mov.w	r4, #0
 8007d3a:	0094      	lsls	r4, r2, #2
 8007d3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d40:	008b      	lsls	r3, r1, #2
 8007d42:	461a      	mov	r2, r3
 8007d44:	4623      	mov	r3, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	4631      	mov	r1, r6
 8007d4a:	f7f8 ff9d 	bl	8000c88 <__aeabi_uldivmod>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	460c      	mov	r4, r1
 8007d52:	461a      	mov	r2, r3
 8007d54:	4b9a      	ldr	r3, [pc, #616]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007d56:	fba3 1302 	umull	r1, r3, r3, r2
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	2164      	movs	r1, #100	; 0x64
 8007d5e:	fb01 f303 	mul.w	r3, r1, r3
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	3332      	adds	r3, #50	; 0x32
 8007d68:	4a95      	ldr	r2, [pc, #596]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d74:	4498      	add	r8, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	469b      	mov	fp, r3
 8007d7a:	f04f 0c00 	mov.w	ip, #0
 8007d7e:	46d9      	mov	r9, fp
 8007d80:	46e2      	mov	sl, ip
 8007d82:	eb19 0309 	adds.w	r3, r9, r9
 8007d86:	eb4a 040a 	adc.w	r4, sl, sl
 8007d8a:	4699      	mov	r9, r3
 8007d8c:	46a2      	mov	sl, r4
 8007d8e:	eb19 090b 	adds.w	r9, r9, fp
 8007d92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d96:	f04f 0100 	mov.w	r1, #0
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007daa:	4689      	mov	r9, r1
 8007dac:	4692      	mov	sl, r2
 8007dae:	eb1b 0509 	adds.w	r5, fp, r9
 8007db2:	eb4c 060a 	adc.w	r6, ip, sl
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	f04f 0400 	mov.w	r4, #0
 8007dc8:	0094      	lsls	r4, r2, #2
 8007dca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dce:	008b      	lsls	r3, r1, #2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4623      	mov	r3, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	f7f8 ff56 	bl	8000c88 <__aeabi_uldivmod>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	461a      	mov	r2, r3
 8007de2:	4b77      	ldr	r3, [pc, #476]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007de4:	fba3 1302 	umull	r1, r3, r3, r2
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	2164      	movs	r1, #100	; 0x64
 8007dec:	fb01 f303 	mul.w	r3, r1, r3
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	3332      	adds	r3, #50	; 0x32
 8007df6:	4a72      	ldr	r2, [pc, #456]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007df8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfc:	095b      	lsrs	r3, r3, #5
 8007dfe:	f003 020f 	and.w	r2, r3, #15
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4442      	add	r2, r8
 8007e08:	609a      	str	r2, [r3, #8]
 8007e0a:	e0d0      	b.n	8007fae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e0c:	f7fc fe34 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 8007e10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	469a      	mov	sl, r3
 8007e16:	f04f 0b00 	mov.w	fp, #0
 8007e1a:	46d0      	mov	r8, sl
 8007e1c:	46d9      	mov	r9, fp
 8007e1e:	eb18 0308 	adds.w	r3, r8, r8
 8007e22:	eb49 0409 	adc.w	r4, r9, r9
 8007e26:	4698      	mov	r8, r3
 8007e28:	46a1      	mov	r9, r4
 8007e2a:	eb18 080a 	adds.w	r8, r8, sl
 8007e2e:	eb49 090b 	adc.w	r9, r9, fp
 8007e32:	f04f 0100 	mov.w	r1, #0
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e46:	4688      	mov	r8, r1
 8007e48:	4691      	mov	r9, r2
 8007e4a:	eb1a 0508 	adds.w	r5, sl, r8
 8007e4e:	eb4b 0609 	adc.w	r6, fp, r9
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4619      	mov	r1, r3
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	f04f 0400 	mov.w	r4, #0
 8007e64:	0094      	lsls	r4, r2, #2
 8007e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e6a:	008b      	lsls	r3, r1, #2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4623      	mov	r3, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	4631      	mov	r1, r6
 8007e74:	f7f8 ff08 	bl	8000c88 <__aeabi_uldivmod>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4b50      	ldr	r3, [pc, #320]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007e80:	fba3 2302 	umull	r2, r3, r3, r2
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	469b      	mov	fp, r3
 8007e8e:	f04f 0c00 	mov.w	ip, #0
 8007e92:	46d9      	mov	r9, fp
 8007e94:	46e2      	mov	sl, ip
 8007e96:	eb19 0309 	adds.w	r3, r9, r9
 8007e9a:	eb4a 040a 	adc.w	r4, sl, sl
 8007e9e:	4699      	mov	r9, r3
 8007ea0:	46a2      	mov	sl, r4
 8007ea2:	eb19 090b 	adds.w	r9, r9, fp
 8007ea6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007eaa:	f04f 0100 	mov.w	r1, #0
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007eba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ebe:	4689      	mov	r9, r1
 8007ec0:	4692      	mov	sl, r2
 8007ec2:	eb1b 0509 	adds.w	r5, fp, r9
 8007ec6:	eb4c 060a 	adc.w	r6, ip, sl
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	f04f 0400 	mov.w	r4, #0
 8007edc:	0094      	lsls	r4, r2, #2
 8007ede:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ee2:	008b      	lsls	r3, r1, #2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	4623      	mov	r3, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	4631      	mov	r1, r6
 8007eec:	f7f8 fecc 	bl	8000c88 <__aeabi_uldivmod>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b32      	ldr	r3, [pc, #200]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	2164      	movs	r1, #100	; 0x64
 8007f00:	fb01 f303 	mul.w	r3, r1, r3
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	011b      	lsls	r3, r3, #4
 8007f08:	3332      	adds	r3, #50	; 0x32
 8007f0a:	4a2d      	ldr	r2, [pc, #180]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f10:	095b      	lsrs	r3, r3, #5
 8007f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f16:	4498      	add	r8, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	469b      	mov	fp, r3
 8007f1c:	f04f 0c00 	mov.w	ip, #0
 8007f20:	46d9      	mov	r9, fp
 8007f22:	46e2      	mov	sl, ip
 8007f24:	eb19 0309 	adds.w	r3, r9, r9
 8007f28:	eb4a 040a 	adc.w	r4, sl, sl
 8007f2c:	4699      	mov	r9, r3
 8007f2e:	46a2      	mov	sl, r4
 8007f30:	eb19 090b 	adds.w	r9, r9, fp
 8007f34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f38:	f04f 0100 	mov.w	r1, #0
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f4c:	4689      	mov	r9, r1
 8007f4e:	4692      	mov	sl, r2
 8007f50:	eb1b 0509 	adds.w	r5, fp, r9
 8007f54:	eb4c 060a 	adc.w	r6, ip, sl
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	f04f 0300 	mov.w	r3, #0
 8007f66:	f04f 0400 	mov.w	r4, #0
 8007f6a:	0094      	lsls	r4, r2, #2
 8007f6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f70:	008b      	lsls	r3, r1, #2
 8007f72:	461a      	mov	r2, r3
 8007f74:	4623      	mov	r3, r4
 8007f76:	4628      	mov	r0, r5
 8007f78:	4631      	mov	r1, r6
 8007f7a:	f7f8 fe85 	bl	8000c88 <__aeabi_uldivmod>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	461a      	mov	r2, r3
 8007f84:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007f86:	fba3 1302 	umull	r1, r3, r3, r2
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	2164      	movs	r1, #100	; 0x64
 8007f8e:	fb01 f303 	mul.w	r3, r1, r3
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	3332      	adds	r3, #50	; 0x32
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <UART_SetConfig+0x6f4>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4442      	add	r2, r8
 8007faa:	609a      	str	r2, [r3, #8]
}
 8007fac:	e7ff      	b.n	8007fae <UART_SetConfig+0x6e2>
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb8:	40011000 	.word	0x40011000
 8007fbc:	40011400 	.word	0x40011400
 8007fc0:	51eb851f 	.word	0x51eb851f

08007fc4 <atoi>:
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	f000 bd2a 	b.w	8008a20 <strtol>

08007fcc <__errno>:
 8007fcc:	4b01      	ldr	r3, [pc, #4]	; (8007fd4 <__errno+0x8>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000014 	.word	0x20000014

08007fd8 <__libc_init_array>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4e0d      	ldr	r6, [pc, #52]	; (8008010 <__libc_init_array+0x38>)
 8007fdc:	4c0d      	ldr	r4, [pc, #52]	; (8008014 <__libc_init_array+0x3c>)
 8007fde:	1ba4      	subs	r4, r4, r6
 8007fe0:	10a4      	asrs	r4, r4, #2
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	42a5      	cmp	r5, r4
 8007fe6:	d109      	bne.n	8007ffc <__libc_init_array+0x24>
 8007fe8:	4e0b      	ldr	r6, [pc, #44]	; (8008018 <__libc_init_array+0x40>)
 8007fea:	4c0c      	ldr	r4, [pc, #48]	; (800801c <__libc_init_array+0x44>)
 8007fec:	f002 f8f4 	bl	800a1d8 <_init>
 8007ff0:	1ba4      	subs	r4, r4, r6
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	2500      	movs	r5, #0
 8007ff6:	42a5      	cmp	r5, r4
 8007ff8:	d105      	bne.n	8008006 <__libc_init_array+0x2e>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008000:	4798      	blx	r3
 8008002:	3501      	adds	r5, #1
 8008004:	e7ee      	b.n	8007fe4 <__libc_init_array+0xc>
 8008006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800800a:	4798      	blx	r3
 800800c:	3501      	adds	r5, #1
 800800e:	e7f2      	b.n	8007ff6 <__libc_init_array+0x1e>
 8008010:	0800a498 	.word	0x0800a498
 8008014:	0800a498 	.word	0x0800a498
 8008018:	0800a498 	.word	0x0800a498
 800801c:	0800a49c 	.word	0x0800a49c

08008020 <memset>:
 8008020:	4402      	add	r2, r0
 8008022:	4603      	mov	r3, r0
 8008024:	4293      	cmp	r3, r2
 8008026:	d100      	bne.n	800802a <memset+0xa>
 8008028:	4770      	bx	lr
 800802a:	f803 1b01 	strb.w	r1, [r3], #1
 800802e:	e7f9      	b.n	8008024 <memset+0x4>

08008030 <__cvt>:
 8008030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008034:	ec55 4b10 	vmov	r4, r5, d0
 8008038:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800803a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800803e:	2d00      	cmp	r5, #0
 8008040:	460e      	mov	r6, r1
 8008042:	4691      	mov	r9, r2
 8008044:	4619      	mov	r1, r3
 8008046:	bfb8      	it	lt
 8008048:	4622      	movlt	r2, r4
 800804a:	462b      	mov	r3, r5
 800804c:	f027 0720 	bic.w	r7, r7, #32
 8008050:	bfbb      	ittet	lt
 8008052:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008056:	461d      	movlt	r5, r3
 8008058:	2300      	movge	r3, #0
 800805a:	232d      	movlt	r3, #45	; 0x2d
 800805c:	bfb8      	it	lt
 800805e:	4614      	movlt	r4, r2
 8008060:	2f46      	cmp	r7, #70	; 0x46
 8008062:	700b      	strb	r3, [r1, #0]
 8008064:	d004      	beq.n	8008070 <__cvt+0x40>
 8008066:	2f45      	cmp	r7, #69	; 0x45
 8008068:	d100      	bne.n	800806c <__cvt+0x3c>
 800806a:	3601      	adds	r6, #1
 800806c:	2102      	movs	r1, #2
 800806e:	e000      	b.n	8008072 <__cvt+0x42>
 8008070:	2103      	movs	r1, #3
 8008072:	ab03      	add	r3, sp, #12
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	ab02      	add	r3, sp, #8
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	4632      	mov	r2, r6
 800807c:	4653      	mov	r3, sl
 800807e:	ec45 4b10 	vmov	d0, r4, r5
 8008082:	f000 fd71 	bl	8008b68 <_dtoa_r>
 8008086:	2f47      	cmp	r7, #71	; 0x47
 8008088:	4680      	mov	r8, r0
 800808a:	d102      	bne.n	8008092 <__cvt+0x62>
 800808c:	f019 0f01 	tst.w	r9, #1
 8008090:	d026      	beq.n	80080e0 <__cvt+0xb0>
 8008092:	2f46      	cmp	r7, #70	; 0x46
 8008094:	eb08 0906 	add.w	r9, r8, r6
 8008098:	d111      	bne.n	80080be <__cvt+0x8e>
 800809a:	f898 3000 	ldrb.w	r3, [r8]
 800809e:	2b30      	cmp	r3, #48	; 0x30
 80080a0:	d10a      	bne.n	80080b8 <__cvt+0x88>
 80080a2:	2200      	movs	r2, #0
 80080a4:	2300      	movs	r3, #0
 80080a6:	4620      	mov	r0, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	f7f8 fd2d 	bl	8000b08 <__aeabi_dcmpeq>
 80080ae:	b918      	cbnz	r0, 80080b8 <__cvt+0x88>
 80080b0:	f1c6 0601 	rsb	r6, r6, #1
 80080b4:	f8ca 6000 	str.w	r6, [sl]
 80080b8:	f8da 3000 	ldr.w	r3, [sl]
 80080bc:	4499      	add	r9, r3
 80080be:	2200      	movs	r2, #0
 80080c0:	2300      	movs	r3, #0
 80080c2:	4620      	mov	r0, r4
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7f8 fd1f 	bl	8000b08 <__aeabi_dcmpeq>
 80080ca:	b938      	cbnz	r0, 80080dc <__cvt+0xac>
 80080cc:	2230      	movs	r2, #48	; 0x30
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	454b      	cmp	r3, r9
 80080d2:	d205      	bcs.n	80080e0 <__cvt+0xb0>
 80080d4:	1c59      	adds	r1, r3, #1
 80080d6:	9103      	str	r1, [sp, #12]
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	e7f8      	b.n	80080ce <__cvt+0x9e>
 80080dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080e4:	eba3 0308 	sub.w	r3, r3, r8
 80080e8:	4640      	mov	r0, r8
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	b004      	add	sp, #16
 80080ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080080f2 <__exponent>:
 80080f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080f4:	2900      	cmp	r1, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	bfba      	itte	lt
 80080fa:	4249      	neglt	r1, r1
 80080fc:	232d      	movlt	r3, #45	; 0x2d
 80080fe:	232b      	movge	r3, #43	; 0x2b
 8008100:	2909      	cmp	r1, #9
 8008102:	f804 2b02 	strb.w	r2, [r4], #2
 8008106:	7043      	strb	r3, [r0, #1]
 8008108:	dd20      	ble.n	800814c <__exponent+0x5a>
 800810a:	f10d 0307 	add.w	r3, sp, #7
 800810e:	461f      	mov	r7, r3
 8008110:	260a      	movs	r6, #10
 8008112:	fb91 f5f6 	sdiv	r5, r1, r6
 8008116:	fb06 1115 	mls	r1, r6, r5, r1
 800811a:	3130      	adds	r1, #48	; 0x30
 800811c:	2d09      	cmp	r5, #9
 800811e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008122:	f103 32ff 	add.w	r2, r3, #4294967295
 8008126:	4629      	mov	r1, r5
 8008128:	dc09      	bgt.n	800813e <__exponent+0x4c>
 800812a:	3130      	adds	r1, #48	; 0x30
 800812c:	3b02      	subs	r3, #2
 800812e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008132:	42bb      	cmp	r3, r7
 8008134:	4622      	mov	r2, r4
 8008136:	d304      	bcc.n	8008142 <__exponent+0x50>
 8008138:	1a10      	subs	r0, r2, r0
 800813a:	b003      	add	sp, #12
 800813c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813e:	4613      	mov	r3, r2
 8008140:	e7e7      	b.n	8008112 <__exponent+0x20>
 8008142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008146:	f804 2b01 	strb.w	r2, [r4], #1
 800814a:	e7f2      	b.n	8008132 <__exponent+0x40>
 800814c:	2330      	movs	r3, #48	; 0x30
 800814e:	4419      	add	r1, r3
 8008150:	7083      	strb	r3, [r0, #2]
 8008152:	1d02      	adds	r2, r0, #4
 8008154:	70c1      	strb	r1, [r0, #3]
 8008156:	e7ef      	b.n	8008138 <__exponent+0x46>

08008158 <_printf_float>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	b08d      	sub	sp, #52	; 0x34
 800815e:	460c      	mov	r4, r1
 8008160:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008164:	4616      	mov	r6, r2
 8008166:	461f      	mov	r7, r3
 8008168:	4605      	mov	r5, r0
 800816a:	f001 fab9 	bl	80096e0 <_localeconv_r>
 800816e:	6803      	ldr	r3, [r0, #0]
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	4618      	mov	r0, r3
 8008174:	f7f8 f84c 	bl	8000210 <strlen>
 8008178:	2300      	movs	r3, #0
 800817a:	930a      	str	r3, [sp, #40]	; 0x28
 800817c:	f8d8 3000 	ldr.w	r3, [r8]
 8008180:	9005      	str	r0, [sp, #20]
 8008182:	3307      	adds	r3, #7
 8008184:	f023 0307 	bic.w	r3, r3, #7
 8008188:	f103 0208 	add.w	r2, r3, #8
 800818c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008190:	f8d4 b000 	ldr.w	fp, [r4]
 8008194:	f8c8 2000 	str.w	r2, [r8]
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081a8:	9307      	str	r3, [sp, #28]
 80081aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80081ae:	f04f 32ff 	mov.w	r2, #4294967295
 80081b2:	4ba7      	ldr	r3, [pc, #668]	; (8008450 <_printf_float+0x2f8>)
 80081b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081b8:	f7f8 fcd8 	bl	8000b6c <__aeabi_dcmpun>
 80081bc:	bb70      	cbnz	r0, 800821c <_printf_float+0xc4>
 80081be:	f04f 32ff 	mov.w	r2, #4294967295
 80081c2:	4ba3      	ldr	r3, [pc, #652]	; (8008450 <_printf_float+0x2f8>)
 80081c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081c8:	f7f8 fcb2 	bl	8000b30 <__aeabi_dcmple>
 80081cc:	bb30      	cbnz	r0, 800821c <_printf_float+0xc4>
 80081ce:	2200      	movs	r2, #0
 80081d0:	2300      	movs	r3, #0
 80081d2:	4640      	mov	r0, r8
 80081d4:	4649      	mov	r1, r9
 80081d6:	f7f8 fca1 	bl	8000b1c <__aeabi_dcmplt>
 80081da:	b110      	cbz	r0, 80081e2 <_printf_float+0x8a>
 80081dc:	232d      	movs	r3, #45	; 0x2d
 80081de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e2:	4a9c      	ldr	r2, [pc, #624]	; (8008454 <_printf_float+0x2fc>)
 80081e4:	4b9c      	ldr	r3, [pc, #624]	; (8008458 <_printf_float+0x300>)
 80081e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80081ea:	bf8c      	ite	hi
 80081ec:	4690      	movhi	r8, r2
 80081ee:	4698      	movls	r8, r3
 80081f0:	2303      	movs	r3, #3
 80081f2:	f02b 0204 	bic.w	r2, fp, #4
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	f04f 0900 	mov.w	r9, #0
 80081fe:	9700      	str	r7, [sp, #0]
 8008200:	4633      	mov	r3, r6
 8008202:	aa0b      	add	r2, sp, #44	; 0x2c
 8008204:	4621      	mov	r1, r4
 8008206:	4628      	mov	r0, r5
 8008208:	f000 f9e6 	bl	80085d8 <_printf_common>
 800820c:	3001      	adds	r0, #1
 800820e:	f040 808d 	bne.w	800832c <_printf_float+0x1d4>
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
 8008216:	b00d      	add	sp, #52	; 0x34
 8008218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821c:	4642      	mov	r2, r8
 800821e:	464b      	mov	r3, r9
 8008220:	4640      	mov	r0, r8
 8008222:	4649      	mov	r1, r9
 8008224:	f7f8 fca2 	bl	8000b6c <__aeabi_dcmpun>
 8008228:	b110      	cbz	r0, 8008230 <_printf_float+0xd8>
 800822a:	4a8c      	ldr	r2, [pc, #560]	; (800845c <_printf_float+0x304>)
 800822c:	4b8c      	ldr	r3, [pc, #560]	; (8008460 <_printf_float+0x308>)
 800822e:	e7da      	b.n	80081e6 <_printf_float+0x8e>
 8008230:	6861      	ldr	r1, [r4, #4]
 8008232:	1c4b      	adds	r3, r1, #1
 8008234:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008238:	a80a      	add	r0, sp, #40	; 0x28
 800823a:	d13e      	bne.n	80082ba <_printf_float+0x162>
 800823c:	2306      	movs	r3, #6
 800823e:	6063      	str	r3, [r4, #4]
 8008240:	2300      	movs	r3, #0
 8008242:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008246:	ab09      	add	r3, sp, #36	; 0x24
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	ec49 8b10 	vmov	d0, r8, r9
 800824e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008252:	6022      	str	r2, [r4, #0]
 8008254:	f8cd a004 	str.w	sl, [sp, #4]
 8008258:	6861      	ldr	r1, [r4, #4]
 800825a:	4628      	mov	r0, r5
 800825c:	f7ff fee8 	bl	8008030 <__cvt>
 8008260:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008264:	2b47      	cmp	r3, #71	; 0x47
 8008266:	4680      	mov	r8, r0
 8008268:	d109      	bne.n	800827e <_printf_float+0x126>
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	1cd8      	adds	r0, r3, #3
 800826e:	db02      	blt.n	8008276 <_printf_float+0x11e>
 8008270:	6862      	ldr	r2, [r4, #4]
 8008272:	4293      	cmp	r3, r2
 8008274:	dd47      	ble.n	8008306 <_printf_float+0x1ae>
 8008276:	f1aa 0a02 	sub.w	sl, sl, #2
 800827a:	fa5f fa8a 	uxtb.w	sl, sl
 800827e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008282:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008284:	d824      	bhi.n	80082d0 <_printf_float+0x178>
 8008286:	3901      	subs	r1, #1
 8008288:	4652      	mov	r2, sl
 800828a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800828e:	9109      	str	r1, [sp, #36]	; 0x24
 8008290:	f7ff ff2f 	bl	80080f2 <__exponent>
 8008294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008296:	1813      	adds	r3, r2, r0
 8008298:	2a01      	cmp	r2, #1
 800829a:	4681      	mov	r9, r0
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	dc02      	bgt.n	80082a6 <_printf_float+0x14e>
 80082a0:	6822      	ldr	r2, [r4, #0]
 80082a2:	07d1      	lsls	r1, r2, #31
 80082a4:	d501      	bpl.n	80082aa <_printf_float+0x152>
 80082a6:	3301      	adds	r3, #1
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0a5      	beq.n	80081fe <_printf_float+0xa6>
 80082b2:	232d      	movs	r3, #45	; 0x2d
 80082b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b8:	e7a1      	b.n	80081fe <_printf_float+0xa6>
 80082ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80082be:	f000 8177 	beq.w	80085b0 <_printf_float+0x458>
 80082c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80082c6:	d1bb      	bne.n	8008240 <_printf_float+0xe8>
 80082c8:	2900      	cmp	r1, #0
 80082ca:	d1b9      	bne.n	8008240 <_printf_float+0xe8>
 80082cc:	2301      	movs	r3, #1
 80082ce:	e7b6      	b.n	800823e <_printf_float+0xe6>
 80082d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80082d4:	d119      	bne.n	800830a <_printf_float+0x1b2>
 80082d6:	2900      	cmp	r1, #0
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	dd0c      	ble.n	80082f6 <_printf_float+0x19e>
 80082dc:	6121      	str	r1, [r4, #16]
 80082de:	b913      	cbnz	r3, 80082e6 <_printf_float+0x18e>
 80082e0:	6822      	ldr	r2, [r4, #0]
 80082e2:	07d2      	lsls	r2, r2, #31
 80082e4:	d502      	bpl.n	80082ec <_printf_float+0x194>
 80082e6:	3301      	adds	r3, #1
 80082e8:	440b      	add	r3, r1
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80082f0:	f04f 0900 	mov.w	r9, #0
 80082f4:	e7d9      	b.n	80082aa <_printf_float+0x152>
 80082f6:	b913      	cbnz	r3, 80082fe <_printf_float+0x1a6>
 80082f8:	6822      	ldr	r2, [r4, #0]
 80082fa:	07d0      	lsls	r0, r2, #31
 80082fc:	d501      	bpl.n	8008302 <_printf_float+0x1aa>
 80082fe:	3302      	adds	r3, #2
 8008300:	e7f3      	b.n	80082ea <_printf_float+0x192>
 8008302:	2301      	movs	r3, #1
 8008304:	e7f1      	b.n	80082ea <_printf_float+0x192>
 8008306:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800830a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800830e:	4293      	cmp	r3, r2
 8008310:	db05      	blt.n	800831e <_printf_float+0x1c6>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	07d1      	lsls	r1, r2, #31
 8008318:	d5e8      	bpl.n	80082ec <_printf_float+0x194>
 800831a:	3301      	adds	r3, #1
 800831c:	e7e5      	b.n	80082ea <_printf_float+0x192>
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfd4      	ite	le
 8008322:	f1c3 0302 	rsble	r3, r3, #2
 8008326:	2301      	movgt	r3, #1
 8008328:	4413      	add	r3, r2
 800832a:	e7de      	b.n	80082ea <_printf_float+0x192>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	055a      	lsls	r2, r3, #21
 8008330:	d407      	bmi.n	8008342 <_printf_float+0x1ea>
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	4642      	mov	r2, r8
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	d12b      	bne.n	8008398 <_printf_float+0x240>
 8008340:	e767      	b.n	8008212 <_printf_float+0xba>
 8008342:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008346:	f240 80dc 	bls.w	8008502 <_printf_float+0x3aa>
 800834a:	2200      	movs	r2, #0
 800834c:	2300      	movs	r3, #0
 800834e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008352:	f7f8 fbd9 	bl	8000b08 <__aeabi_dcmpeq>
 8008356:	2800      	cmp	r0, #0
 8008358:	d033      	beq.n	80083c2 <_printf_float+0x26a>
 800835a:	2301      	movs	r3, #1
 800835c:	4a41      	ldr	r2, [pc, #260]	; (8008464 <_printf_float+0x30c>)
 800835e:	4631      	mov	r1, r6
 8008360:	4628      	mov	r0, r5
 8008362:	47b8      	blx	r7
 8008364:	3001      	adds	r0, #1
 8008366:	f43f af54 	beq.w	8008212 <_printf_float+0xba>
 800836a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800836e:	429a      	cmp	r2, r3
 8008370:	db02      	blt.n	8008378 <_printf_float+0x220>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	07d8      	lsls	r0, r3, #31
 8008376:	d50f      	bpl.n	8008398 <_printf_float+0x240>
 8008378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800837c:	4631      	mov	r1, r6
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	f43f af45 	beq.w	8008212 <_printf_float+0xba>
 8008388:	f04f 0800 	mov.w	r8, #0
 800838c:	f104 091a 	add.w	r9, r4, #26
 8008390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008392:	3b01      	subs	r3, #1
 8008394:	4543      	cmp	r3, r8
 8008396:	dc09      	bgt.n	80083ac <_printf_float+0x254>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	079b      	lsls	r3, r3, #30
 800839c:	f100 8103 	bmi.w	80085a6 <_printf_float+0x44e>
 80083a0:	68e0      	ldr	r0, [r4, #12]
 80083a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a4:	4298      	cmp	r0, r3
 80083a6:	bfb8      	it	lt
 80083a8:	4618      	movlt	r0, r3
 80083aa:	e734      	b.n	8008216 <_printf_float+0xbe>
 80083ac:	2301      	movs	r3, #1
 80083ae:	464a      	mov	r2, r9
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f af2b 	beq.w	8008212 <_printf_float+0xba>
 80083bc:	f108 0801 	add.w	r8, r8, #1
 80083c0:	e7e6      	b.n	8008390 <_printf_float+0x238>
 80083c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dc2b      	bgt.n	8008420 <_printf_float+0x2c8>
 80083c8:	2301      	movs	r3, #1
 80083ca:	4a26      	ldr	r2, [pc, #152]	; (8008464 <_printf_float+0x30c>)
 80083cc:	4631      	mov	r1, r6
 80083ce:	4628      	mov	r0, r5
 80083d0:	47b8      	blx	r7
 80083d2:	3001      	adds	r0, #1
 80083d4:	f43f af1d 	beq.w	8008212 <_printf_float+0xba>
 80083d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083da:	b923      	cbnz	r3, 80083e6 <_printf_float+0x28e>
 80083dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083de:	b913      	cbnz	r3, 80083e6 <_printf_float+0x28e>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	07d9      	lsls	r1, r3, #31
 80083e4:	d5d8      	bpl.n	8008398 <_printf_float+0x240>
 80083e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f af0e 	beq.w	8008212 <_printf_float+0xba>
 80083f6:	f04f 0900 	mov.w	r9, #0
 80083fa:	f104 0a1a 	add.w	sl, r4, #26
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	425b      	negs	r3, r3
 8008402:	454b      	cmp	r3, r9
 8008404:	dc01      	bgt.n	800840a <_printf_float+0x2b2>
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	e794      	b.n	8008334 <_printf_float+0x1dc>
 800840a:	2301      	movs	r3, #1
 800840c:	4652      	mov	r2, sl
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	47b8      	blx	r7
 8008414:	3001      	adds	r0, #1
 8008416:	f43f aefc 	beq.w	8008212 <_printf_float+0xba>
 800841a:	f109 0901 	add.w	r9, r9, #1
 800841e:	e7ee      	b.n	80083fe <_printf_float+0x2a6>
 8008420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008424:	429a      	cmp	r2, r3
 8008426:	bfa8      	it	ge
 8008428:	461a      	movge	r2, r3
 800842a:	2a00      	cmp	r2, #0
 800842c:	4691      	mov	r9, r2
 800842e:	dd07      	ble.n	8008440 <_printf_float+0x2e8>
 8008430:	4613      	mov	r3, r2
 8008432:	4631      	mov	r1, r6
 8008434:	4642      	mov	r2, r8
 8008436:	4628      	mov	r0, r5
 8008438:	47b8      	blx	r7
 800843a:	3001      	adds	r0, #1
 800843c:	f43f aee9 	beq.w	8008212 <_printf_float+0xba>
 8008440:	f104 031a 	add.w	r3, r4, #26
 8008444:	f04f 0b00 	mov.w	fp, #0
 8008448:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800844c:	9306      	str	r3, [sp, #24]
 800844e:	e015      	b.n	800847c <_printf_float+0x324>
 8008450:	7fefffff 	.word	0x7fefffff
 8008454:	0800a234 	.word	0x0800a234
 8008458:	0800a230 	.word	0x0800a230
 800845c:	0800a23c 	.word	0x0800a23c
 8008460:	0800a238 	.word	0x0800a238
 8008464:	0800a240 	.word	0x0800a240
 8008468:	2301      	movs	r3, #1
 800846a:	9a06      	ldr	r2, [sp, #24]
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f aecd 	beq.w	8008212 <_printf_float+0xba>
 8008478:	f10b 0b01 	add.w	fp, fp, #1
 800847c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008480:	ebaa 0309 	sub.w	r3, sl, r9
 8008484:	455b      	cmp	r3, fp
 8008486:	dcef      	bgt.n	8008468 <_printf_float+0x310>
 8008488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800848c:	429a      	cmp	r2, r3
 800848e:	44d0      	add	r8, sl
 8008490:	db15      	blt.n	80084be <_printf_float+0x366>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	07da      	lsls	r2, r3, #31
 8008496:	d412      	bmi.n	80084be <_printf_float+0x366>
 8008498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800849c:	eba3 020a 	sub.w	r2, r3, sl
 80084a0:	eba3 0a01 	sub.w	sl, r3, r1
 80084a4:	4592      	cmp	sl, r2
 80084a6:	bfa8      	it	ge
 80084a8:	4692      	movge	sl, r2
 80084aa:	f1ba 0f00 	cmp.w	sl, #0
 80084ae:	dc0e      	bgt.n	80084ce <_printf_float+0x376>
 80084b0:	f04f 0800 	mov.w	r8, #0
 80084b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084b8:	f104 091a 	add.w	r9, r4, #26
 80084bc:	e019      	b.n	80084f2 <_printf_float+0x39a>
 80084be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47b8      	blx	r7
 80084c8:	3001      	adds	r0, #1
 80084ca:	d1e5      	bne.n	8008498 <_printf_float+0x340>
 80084cc:	e6a1      	b.n	8008212 <_printf_float+0xba>
 80084ce:	4653      	mov	r3, sl
 80084d0:	4642      	mov	r2, r8
 80084d2:	4631      	mov	r1, r6
 80084d4:	4628      	mov	r0, r5
 80084d6:	47b8      	blx	r7
 80084d8:	3001      	adds	r0, #1
 80084da:	d1e9      	bne.n	80084b0 <_printf_float+0x358>
 80084dc:	e699      	b.n	8008212 <_printf_float+0xba>
 80084de:	2301      	movs	r3, #1
 80084e0:	464a      	mov	r2, r9
 80084e2:	4631      	mov	r1, r6
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b8      	blx	r7
 80084e8:	3001      	adds	r0, #1
 80084ea:	f43f ae92 	beq.w	8008212 <_printf_float+0xba>
 80084ee:	f108 0801 	add.w	r8, r8, #1
 80084f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	eba3 030a 	sub.w	r3, r3, sl
 80084fc:	4543      	cmp	r3, r8
 80084fe:	dcee      	bgt.n	80084de <_printf_float+0x386>
 8008500:	e74a      	b.n	8008398 <_printf_float+0x240>
 8008502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008504:	2a01      	cmp	r2, #1
 8008506:	dc01      	bgt.n	800850c <_printf_float+0x3b4>
 8008508:	07db      	lsls	r3, r3, #31
 800850a:	d53a      	bpl.n	8008582 <_printf_float+0x42a>
 800850c:	2301      	movs	r3, #1
 800850e:	4642      	mov	r2, r8
 8008510:	4631      	mov	r1, r6
 8008512:	4628      	mov	r0, r5
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	f43f ae7b 	beq.w	8008212 <_printf_float+0xba>
 800851c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008520:	4631      	mov	r1, r6
 8008522:	4628      	mov	r0, r5
 8008524:	47b8      	blx	r7
 8008526:	3001      	adds	r0, #1
 8008528:	f108 0801 	add.w	r8, r8, #1
 800852c:	f43f ae71 	beq.w	8008212 <_printf_float+0xba>
 8008530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008532:	2200      	movs	r2, #0
 8008534:	f103 3aff 	add.w	sl, r3, #4294967295
 8008538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800853c:	2300      	movs	r3, #0
 800853e:	f7f8 fae3 	bl	8000b08 <__aeabi_dcmpeq>
 8008542:	b9c8      	cbnz	r0, 8008578 <_printf_float+0x420>
 8008544:	4653      	mov	r3, sl
 8008546:	4642      	mov	r2, r8
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	47b8      	blx	r7
 800854e:	3001      	adds	r0, #1
 8008550:	d10e      	bne.n	8008570 <_printf_float+0x418>
 8008552:	e65e      	b.n	8008212 <_printf_float+0xba>
 8008554:	2301      	movs	r3, #1
 8008556:	4652      	mov	r2, sl
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f ae57 	beq.w	8008212 <_printf_float+0xba>
 8008564:	f108 0801 	add.w	r8, r8, #1
 8008568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856a:	3b01      	subs	r3, #1
 800856c:	4543      	cmp	r3, r8
 800856e:	dcf1      	bgt.n	8008554 <_printf_float+0x3fc>
 8008570:	464b      	mov	r3, r9
 8008572:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008576:	e6de      	b.n	8008336 <_printf_float+0x1de>
 8008578:	f04f 0800 	mov.w	r8, #0
 800857c:	f104 0a1a 	add.w	sl, r4, #26
 8008580:	e7f2      	b.n	8008568 <_printf_float+0x410>
 8008582:	2301      	movs	r3, #1
 8008584:	e7df      	b.n	8008546 <_printf_float+0x3ee>
 8008586:	2301      	movs	r3, #1
 8008588:	464a      	mov	r2, r9
 800858a:	4631      	mov	r1, r6
 800858c:	4628      	mov	r0, r5
 800858e:	47b8      	blx	r7
 8008590:	3001      	adds	r0, #1
 8008592:	f43f ae3e 	beq.w	8008212 <_printf_float+0xba>
 8008596:	f108 0801 	add.w	r8, r8, #1
 800859a:	68e3      	ldr	r3, [r4, #12]
 800859c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	4543      	cmp	r3, r8
 80085a2:	dcf0      	bgt.n	8008586 <_printf_float+0x42e>
 80085a4:	e6fc      	b.n	80083a0 <_printf_float+0x248>
 80085a6:	f04f 0800 	mov.w	r8, #0
 80085aa:	f104 0919 	add.w	r9, r4, #25
 80085ae:	e7f4      	b.n	800859a <_printf_float+0x442>
 80085b0:	2900      	cmp	r1, #0
 80085b2:	f43f ae8b 	beq.w	80082cc <_printf_float+0x174>
 80085b6:	2300      	movs	r3, #0
 80085b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80085bc:	ab09      	add	r3, sp, #36	; 0x24
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	ec49 8b10 	vmov	d0, r8, r9
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	f8cd a004 	str.w	sl, [sp, #4]
 80085ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085ce:	4628      	mov	r0, r5
 80085d0:	f7ff fd2e 	bl	8008030 <__cvt>
 80085d4:	4680      	mov	r8, r0
 80085d6:	e648      	b.n	800826a <_printf_float+0x112>

080085d8 <_printf_common>:
 80085d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085dc:	4691      	mov	r9, r2
 80085de:	461f      	mov	r7, r3
 80085e0:	688a      	ldr	r2, [r1, #8]
 80085e2:	690b      	ldr	r3, [r1, #16]
 80085e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085e8:	4293      	cmp	r3, r2
 80085ea:	bfb8      	it	lt
 80085ec:	4613      	movlt	r3, r2
 80085ee:	f8c9 3000 	str.w	r3, [r9]
 80085f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085f6:	4606      	mov	r6, r0
 80085f8:	460c      	mov	r4, r1
 80085fa:	b112      	cbz	r2, 8008602 <_printf_common+0x2a>
 80085fc:	3301      	adds	r3, #1
 80085fe:	f8c9 3000 	str.w	r3, [r9]
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	0699      	lsls	r1, r3, #26
 8008606:	bf42      	ittt	mi
 8008608:	f8d9 3000 	ldrmi.w	r3, [r9]
 800860c:	3302      	addmi	r3, #2
 800860e:	f8c9 3000 	strmi.w	r3, [r9]
 8008612:	6825      	ldr	r5, [r4, #0]
 8008614:	f015 0506 	ands.w	r5, r5, #6
 8008618:	d107      	bne.n	800862a <_printf_common+0x52>
 800861a:	f104 0a19 	add.w	sl, r4, #25
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	f8d9 2000 	ldr.w	r2, [r9]
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	42ab      	cmp	r3, r5
 8008628:	dc28      	bgt.n	800867c <_printf_common+0xa4>
 800862a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	3300      	adds	r3, #0
 8008632:	bf18      	it	ne
 8008634:	2301      	movne	r3, #1
 8008636:	0692      	lsls	r2, r2, #26
 8008638:	d42d      	bmi.n	8008696 <_printf_common+0xbe>
 800863a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800863e:	4639      	mov	r1, r7
 8008640:	4630      	mov	r0, r6
 8008642:	47c0      	blx	r8
 8008644:	3001      	adds	r0, #1
 8008646:	d020      	beq.n	800868a <_printf_common+0xb2>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	68e5      	ldr	r5, [r4, #12]
 800864c:	f8d9 2000 	ldr.w	r2, [r9]
 8008650:	f003 0306 	and.w	r3, r3, #6
 8008654:	2b04      	cmp	r3, #4
 8008656:	bf08      	it	eq
 8008658:	1aad      	subeq	r5, r5, r2
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	bf0c      	ite	eq
 8008660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008664:	2500      	movne	r5, #0
 8008666:	4293      	cmp	r3, r2
 8008668:	bfc4      	itt	gt
 800866a:	1a9b      	subgt	r3, r3, r2
 800866c:	18ed      	addgt	r5, r5, r3
 800866e:	f04f 0900 	mov.w	r9, #0
 8008672:	341a      	adds	r4, #26
 8008674:	454d      	cmp	r5, r9
 8008676:	d11a      	bne.n	80086ae <_printf_common+0xd6>
 8008678:	2000      	movs	r0, #0
 800867a:	e008      	b.n	800868e <_printf_common+0xb6>
 800867c:	2301      	movs	r3, #1
 800867e:	4652      	mov	r2, sl
 8008680:	4639      	mov	r1, r7
 8008682:	4630      	mov	r0, r6
 8008684:	47c0      	blx	r8
 8008686:	3001      	adds	r0, #1
 8008688:	d103      	bne.n	8008692 <_printf_common+0xba>
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008692:	3501      	adds	r5, #1
 8008694:	e7c3      	b.n	800861e <_printf_common+0x46>
 8008696:	18e1      	adds	r1, r4, r3
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	2030      	movs	r0, #48	; 0x30
 800869c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086a0:	4422      	add	r2, r4
 80086a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086aa:	3302      	adds	r3, #2
 80086ac:	e7c5      	b.n	800863a <_printf_common+0x62>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4622      	mov	r2, r4
 80086b2:	4639      	mov	r1, r7
 80086b4:	4630      	mov	r0, r6
 80086b6:	47c0      	blx	r8
 80086b8:	3001      	adds	r0, #1
 80086ba:	d0e6      	beq.n	800868a <_printf_common+0xb2>
 80086bc:	f109 0901 	add.w	r9, r9, #1
 80086c0:	e7d8      	b.n	8008674 <_printf_common+0x9c>
	...

080086c4 <_printf_i>:
 80086c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80086cc:	460c      	mov	r4, r1
 80086ce:	7e09      	ldrb	r1, [r1, #24]
 80086d0:	b085      	sub	sp, #20
 80086d2:	296e      	cmp	r1, #110	; 0x6e
 80086d4:	4617      	mov	r7, r2
 80086d6:	4606      	mov	r6, r0
 80086d8:	4698      	mov	r8, r3
 80086da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086dc:	f000 80b3 	beq.w	8008846 <_printf_i+0x182>
 80086e0:	d822      	bhi.n	8008728 <_printf_i+0x64>
 80086e2:	2963      	cmp	r1, #99	; 0x63
 80086e4:	d036      	beq.n	8008754 <_printf_i+0x90>
 80086e6:	d80a      	bhi.n	80086fe <_printf_i+0x3a>
 80086e8:	2900      	cmp	r1, #0
 80086ea:	f000 80b9 	beq.w	8008860 <_printf_i+0x19c>
 80086ee:	2958      	cmp	r1, #88	; 0x58
 80086f0:	f000 8083 	beq.w	80087fa <_printf_i+0x136>
 80086f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80086fc:	e032      	b.n	8008764 <_printf_i+0xa0>
 80086fe:	2964      	cmp	r1, #100	; 0x64
 8008700:	d001      	beq.n	8008706 <_printf_i+0x42>
 8008702:	2969      	cmp	r1, #105	; 0x69
 8008704:	d1f6      	bne.n	80086f4 <_printf_i+0x30>
 8008706:	6820      	ldr	r0, [r4, #0]
 8008708:	6813      	ldr	r3, [r2, #0]
 800870a:	0605      	lsls	r5, r0, #24
 800870c:	f103 0104 	add.w	r1, r3, #4
 8008710:	d52a      	bpl.n	8008768 <_printf_i+0xa4>
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6011      	str	r1, [r2, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da03      	bge.n	8008722 <_printf_i+0x5e>
 800871a:	222d      	movs	r2, #45	; 0x2d
 800871c:	425b      	negs	r3, r3
 800871e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008722:	486f      	ldr	r0, [pc, #444]	; (80088e0 <_printf_i+0x21c>)
 8008724:	220a      	movs	r2, #10
 8008726:	e039      	b.n	800879c <_printf_i+0xd8>
 8008728:	2973      	cmp	r1, #115	; 0x73
 800872a:	f000 809d 	beq.w	8008868 <_printf_i+0x1a4>
 800872e:	d808      	bhi.n	8008742 <_printf_i+0x7e>
 8008730:	296f      	cmp	r1, #111	; 0x6f
 8008732:	d020      	beq.n	8008776 <_printf_i+0xb2>
 8008734:	2970      	cmp	r1, #112	; 0x70
 8008736:	d1dd      	bne.n	80086f4 <_printf_i+0x30>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	f043 0320 	orr.w	r3, r3, #32
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	e003      	b.n	800874a <_printf_i+0x86>
 8008742:	2975      	cmp	r1, #117	; 0x75
 8008744:	d017      	beq.n	8008776 <_printf_i+0xb2>
 8008746:	2978      	cmp	r1, #120	; 0x78
 8008748:	d1d4      	bne.n	80086f4 <_printf_i+0x30>
 800874a:	2378      	movs	r3, #120	; 0x78
 800874c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008750:	4864      	ldr	r0, [pc, #400]	; (80088e4 <_printf_i+0x220>)
 8008752:	e055      	b.n	8008800 <_printf_i+0x13c>
 8008754:	6813      	ldr	r3, [r2, #0]
 8008756:	1d19      	adds	r1, r3, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6011      	str	r1, [r2, #0]
 800875c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008764:	2301      	movs	r3, #1
 8008766:	e08c      	b.n	8008882 <_printf_i+0x1be>
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6011      	str	r1, [r2, #0]
 800876c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008770:	bf18      	it	ne
 8008772:	b21b      	sxthne	r3, r3
 8008774:	e7cf      	b.n	8008716 <_printf_i+0x52>
 8008776:	6813      	ldr	r3, [r2, #0]
 8008778:	6825      	ldr	r5, [r4, #0]
 800877a:	1d18      	adds	r0, r3, #4
 800877c:	6010      	str	r0, [r2, #0]
 800877e:	0628      	lsls	r0, r5, #24
 8008780:	d501      	bpl.n	8008786 <_printf_i+0xc2>
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	e002      	b.n	800878c <_printf_i+0xc8>
 8008786:	0668      	lsls	r0, r5, #25
 8008788:	d5fb      	bpl.n	8008782 <_printf_i+0xbe>
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	4854      	ldr	r0, [pc, #336]	; (80088e0 <_printf_i+0x21c>)
 800878e:	296f      	cmp	r1, #111	; 0x6f
 8008790:	bf14      	ite	ne
 8008792:	220a      	movne	r2, #10
 8008794:	2208      	moveq	r2, #8
 8008796:	2100      	movs	r1, #0
 8008798:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800879c:	6865      	ldr	r5, [r4, #4]
 800879e:	60a5      	str	r5, [r4, #8]
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	f2c0 8095 	blt.w	80088d0 <_printf_i+0x20c>
 80087a6:	6821      	ldr	r1, [r4, #0]
 80087a8:	f021 0104 	bic.w	r1, r1, #4
 80087ac:	6021      	str	r1, [r4, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d13d      	bne.n	800882e <_printf_i+0x16a>
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	f040 808e 	bne.w	80088d4 <_printf_i+0x210>
 80087b8:	4665      	mov	r5, ip
 80087ba:	2a08      	cmp	r2, #8
 80087bc:	d10b      	bne.n	80087d6 <_printf_i+0x112>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	07db      	lsls	r3, r3, #31
 80087c2:	d508      	bpl.n	80087d6 <_printf_i+0x112>
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	6862      	ldr	r2, [r4, #4]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	bfde      	ittt	le
 80087cc:	2330      	movle	r3, #48	; 0x30
 80087ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087d6:	ebac 0305 	sub.w	r3, ip, r5
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	f8cd 8000 	str.w	r8, [sp]
 80087e0:	463b      	mov	r3, r7
 80087e2:	aa03      	add	r2, sp, #12
 80087e4:	4621      	mov	r1, r4
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff fef6 	bl	80085d8 <_printf_common>
 80087ec:	3001      	adds	r0, #1
 80087ee:	d14d      	bne.n	800888c <_printf_i+0x1c8>
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	b005      	add	sp, #20
 80087f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087fa:	4839      	ldr	r0, [pc, #228]	; (80088e0 <_printf_i+0x21c>)
 80087fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008800:	6813      	ldr	r3, [r2, #0]
 8008802:	6821      	ldr	r1, [r4, #0]
 8008804:	1d1d      	adds	r5, r3, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6015      	str	r5, [r2, #0]
 800880a:	060a      	lsls	r2, r1, #24
 800880c:	d50b      	bpl.n	8008826 <_printf_i+0x162>
 800880e:	07ca      	lsls	r2, r1, #31
 8008810:	bf44      	itt	mi
 8008812:	f041 0120 	orrmi.w	r1, r1, #32
 8008816:	6021      	strmi	r1, [r4, #0]
 8008818:	b91b      	cbnz	r3, 8008822 <_printf_i+0x15e>
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	f022 0220 	bic.w	r2, r2, #32
 8008820:	6022      	str	r2, [r4, #0]
 8008822:	2210      	movs	r2, #16
 8008824:	e7b7      	b.n	8008796 <_printf_i+0xd2>
 8008826:	064d      	lsls	r5, r1, #25
 8008828:	bf48      	it	mi
 800882a:	b29b      	uxthmi	r3, r3
 800882c:	e7ef      	b.n	800880e <_printf_i+0x14a>
 800882e:	4665      	mov	r5, ip
 8008830:	fbb3 f1f2 	udiv	r1, r3, r2
 8008834:	fb02 3311 	mls	r3, r2, r1, r3
 8008838:	5cc3      	ldrb	r3, [r0, r3]
 800883a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800883e:	460b      	mov	r3, r1
 8008840:	2900      	cmp	r1, #0
 8008842:	d1f5      	bne.n	8008830 <_printf_i+0x16c>
 8008844:	e7b9      	b.n	80087ba <_printf_i+0xf6>
 8008846:	6813      	ldr	r3, [r2, #0]
 8008848:	6825      	ldr	r5, [r4, #0]
 800884a:	6961      	ldr	r1, [r4, #20]
 800884c:	1d18      	adds	r0, r3, #4
 800884e:	6010      	str	r0, [r2, #0]
 8008850:	0628      	lsls	r0, r5, #24
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	d501      	bpl.n	800885a <_printf_i+0x196>
 8008856:	6019      	str	r1, [r3, #0]
 8008858:	e002      	b.n	8008860 <_printf_i+0x19c>
 800885a:	066a      	lsls	r2, r5, #25
 800885c:	d5fb      	bpl.n	8008856 <_printf_i+0x192>
 800885e:	8019      	strh	r1, [r3, #0]
 8008860:	2300      	movs	r3, #0
 8008862:	6123      	str	r3, [r4, #16]
 8008864:	4665      	mov	r5, ip
 8008866:	e7b9      	b.n	80087dc <_printf_i+0x118>
 8008868:	6813      	ldr	r3, [r2, #0]
 800886a:	1d19      	adds	r1, r3, #4
 800886c:	6011      	str	r1, [r2, #0]
 800886e:	681d      	ldr	r5, [r3, #0]
 8008870:	6862      	ldr	r2, [r4, #4]
 8008872:	2100      	movs	r1, #0
 8008874:	4628      	mov	r0, r5
 8008876:	f7f7 fcd3 	bl	8000220 <memchr>
 800887a:	b108      	cbz	r0, 8008880 <_printf_i+0x1bc>
 800887c:	1b40      	subs	r0, r0, r5
 800887e:	6060      	str	r0, [r4, #4]
 8008880:	6863      	ldr	r3, [r4, #4]
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	2300      	movs	r3, #0
 8008886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800888a:	e7a7      	b.n	80087dc <_printf_i+0x118>
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	462a      	mov	r2, r5
 8008890:	4639      	mov	r1, r7
 8008892:	4630      	mov	r0, r6
 8008894:	47c0      	blx	r8
 8008896:	3001      	adds	r0, #1
 8008898:	d0aa      	beq.n	80087f0 <_printf_i+0x12c>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	079b      	lsls	r3, r3, #30
 800889e:	d413      	bmi.n	80088c8 <_printf_i+0x204>
 80088a0:	68e0      	ldr	r0, [r4, #12]
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	4298      	cmp	r0, r3
 80088a6:	bfb8      	it	lt
 80088a8:	4618      	movlt	r0, r3
 80088aa:	e7a3      	b.n	80087f4 <_printf_i+0x130>
 80088ac:	2301      	movs	r3, #1
 80088ae:	464a      	mov	r2, r9
 80088b0:	4639      	mov	r1, r7
 80088b2:	4630      	mov	r0, r6
 80088b4:	47c0      	blx	r8
 80088b6:	3001      	adds	r0, #1
 80088b8:	d09a      	beq.n	80087f0 <_printf_i+0x12c>
 80088ba:	3501      	adds	r5, #1
 80088bc:	68e3      	ldr	r3, [r4, #12]
 80088be:	9a03      	ldr	r2, [sp, #12]
 80088c0:	1a9b      	subs	r3, r3, r2
 80088c2:	42ab      	cmp	r3, r5
 80088c4:	dcf2      	bgt.n	80088ac <_printf_i+0x1e8>
 80088c6:	e7eb      	b.n	80088a0 <_printf_i+0x1dc>
 80088c8:	2500      	movs	r5, #0
 80088ca:	f104 0919 	add.w	r9, r4, #25
 80088ce:	e7f5      	b.n	80088bc <_printf_i+0x1f8>
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1ac      	bne.n	800882e <_printf_i+0x16a>
 80088d4:	7803      	ldrb	r3, [r0, #0]
 80088d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088de:	e76c      	b.n	80087ba <_printf_i+0xf6>
 80088e0:	0800a242 	.word	0x0800a242
 80088e4:	0800a253 	.word	0x0800a253

080088e8 <siprintf>:
 80088e8:	b40e      	push	{r1, r2, r3}
 80088ea:	b500      	push	{lr}
 80088ec:	b09c      	sub	sp, #112	; 0x70
 80088ee:	ab1d      	add	r3, sp, #116	; 0x74
 80088f0:	9002      	str	r0, [sp, #8]
 80088f2:	9006      	str	r0, [sp, #24]
 80088f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f8:	4809      	ldr	r0, [pc, #36]	; (8008920 <siprintf+0x38>)
 80088fa:	9107      	str	r1, [sp, #28]
 80088fc:	9104      	str	r1, [sp, #16]
 80088fe:	4909      	ldr	r1, [pc, #36]	; (8008924 <siprintf+0x3c>)
 8008900:	f853 2b04 	ldr.w	r2, [r3], #4
 8008904:	9105      	str	r1, [sp, #20]
 8008906:	6800      	ldr	r0, [r0, #0]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	a902      	add	r1, sp, #8
 800890c:	f001 fb06 	bl	8009f1c <_svfiprintf_r>
 8008910:	9b02      	ldr	r3, [sp, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	b01c      	add	sp, #112	; 0x70
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b003      	add	sp, #12
 800891e:	4770      	bx	lr
 8008920:	20000014 	.word	0x20000014
 8008924:	ffff0208 	.word	0xffff0208

08008928 <_strtol_l.isra.0>:
 8008928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800892c:	4680      	mov	r8, r0
 800892e:	4689      	mov	r9, r1
 8008930:	4692      	mov	sl, r2
 8008932:	461e      	mov	r6, r3
 8008934:	460f      	mov	r7, r1
 8008936:	463d      	mov	r5, r7
 8008938:	9808      	ldr	r0, [sp, #32]
 800893a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800893e:	f000 fecb 	bl	80096d8 <__locale_ctype_ptr_l>
 8008942:	4420      	add	r0, r4
 8008944:	7843      	ldrb	r3, [r0, #1]
 8008946:	f013 0308 	ands.w	r3, r3, #8
 800894a:	d132      	bne.n	80089b2 <_strtol_l.isra.0+0x8a>
 800894c:	2c2d      	cmp	r4, #45	; 0x2d
 800894e:	d132      	bne.n	80089b6 <_strtol_l.isra.0+0x8e>
 8008950:	787c      	ldrb	r4, [r7, #1]
 8008952:	1cbd      	adds	r5, r7, #2
 8008954:	2201      	movs	r2, #1
 8008956:	2e00      	cmp	r6, #0
 8008958:	d05d      	beq.n	8008a16 <_strtol_l.isra.0+0xee>
 800895a:	2e10      	cmp	r6, #16
 800895c:	d109      	bne.n	8008972 <_strtol_l.isra.0+0x4a>
 800895e:	2c30      	cmp	r4, #48	; 0x30
 8008960:	d107      	bne.n	8008972 <_strtol_l.isra.0+0x4a>
 8008962:	782b      	ldrb	r3, [r5, #0]
 8008964:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008968:	2b58      	cmp	r3, #88	; 0x58
 800896a:	d14f      	bne.n	8008a0c <_strtol_l.isra.0+0xe4>
 800896c:	786c      	ldrb	r4, [r5, #1]
 800896e:	2610      	movs	r6, #16
 8008970:	3502      	adds	r5, #2
 8008972:	2a00      	cmp	r2, #0
 8008974:	bf14      	ite	ne
 8008976:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800897a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800897e:	2700      	movs	r7, #0
 8008980:	fbb1 fcf6 	udiv	ip, r1, r6
 8008984:	4638      	mov	r0, r7
 8008986:	fb06 1e1c 	mls	lr, r6, ip, r1
 800898a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800898e:	2b09      	cmp	r3, #9
 8008990:	d817      	bhi.n	80089c2 <_strtol_l.isra.0+0x9a>
 8008992:	461c      	mov	r4, r3
 8008994:	42a6      	cmp	r6, r4
 8008996:	dd23      	ble.n	80089e0 <_strtol_l.isra.0+0xb8>
 8008998:	1c7b      	adds	r3, r7, #1
 800899a:	d007      	beq.n	80089ac <_strtol_l.isra.0+0x84>
 800899c:	4584      	cmp	ip, r0
 800899e:	d31c      	bcc.n	80089da <_strtol_l.isra.0+0xb2>
 80089a0:	d101      	bne.n	80089a6 <_strtol_l.isra.0+0x7e>
 80089a2:	45a6      	cmp	lr, r4
 80089a4:	db19      	blt.n	80089da <_strtol_l.isra.0+0xb2>
 80089a6:	fb00 4006 	mla	r0, r0, r6, r4
 80089aa:	2701      	movs	r7, #1
 80089ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089b0:	e7eb      	b.n	800898a <_strtol_l.isra.0+0x62>
 80089b2:	462f      	mov	r7, r5
 80089b4:	e7bf      	b.n	8008936 <_strtol_l.isra.0+0xe>
 80089b6:	2c2b      	cmp	r4, #43	; 0x2b
 80089b8:	bf04      	itt	eq
 80089ba:	1cbd      	addeq	r5, r7, #2
 80089bc:	787c      	ldrbeq	r4, [r7, #1]
 80089be:	461a      	mov	r2, r3
 80089c0:	e7c9      	b.n	8008956 <_strtol_l.isra.0+0x2e>
 80089c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80089c6:	2b19      	cmp	r3, #25
 80089c8:	d801      	bhi.n	80089ce <_strtol_l.isra.0+0xa6>
 80089ca:	3c37      	subs	r4, #55	; 0x37
 80089cc:	e7e2      	b.n	8008994 <_strtol_l.isra.0+0x6c>
 80089ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80089d2:	2b19      	cmp	r3, #25
 80089d4:	d804      	bhi.n	80089e0 <_strtol_l.isra.0+0xb8>
 80089d6:	3c57      	subs	r4, #87	; 0x57
 80089d8:	e7dc      	b.n	8008994 <_strtol_l.isra.0+0x6c>
 80089da:	f04f 37ff 	mov.w	r7, #4294967295
 80089de:	e7e5      	b.n	80089ac <_strtol_l.isra.0+0x84>
 80089e0:	1c7b      	adds	r3, r7, #1
 80089e2:	d108      	bne.n	80089f6 <_strtol_l.isra.0+0xce>
 80089e4:	2322      	movs	r3, #34	; 0x22
 80089e6:	f8c8 3000 	str.w	r3, [r8]
 80089ea:	4608      	mov	r0, r1
 80089ec:	f1ba 0f00 	cmp.w	sl, #0
 80089f0:	d107      	bne.n	8008a02 <_strtol_l.isra.0+0xda>
 80089f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f6:	b102      	cbz	r2, 80089fa <_strtol_l.isra.0+0xd2>
 80089f8:	4240      	negs	r0, r0
 80089fa:	f1ba 0f00 	cmp.w	sl, #0
 80089fe:	d0f8      	beq.n	80089f2 <_strtol_l.isra.0+0xca>
 8008a00:	b10f      	cbz	r7, 8008a06 <_strtol_l.isra.0+0xde>
 8008a02:	f105 39ff 	add.w	r9, r5, #4294967295
 8008a06:	f8ca 9000 	str.w	r9, [sl]
 8008a0a:	e7f2      	b.n	80089f2 <_strtol_l.isra.0+0xca>
 8008a0c:	2430      	movs	r4, #48	; 0x30
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	d1af      	bne.n	8008972 <_strtol_l.isra.0+0x4a>
 8008a12:	2608      	movs	r6, #8
 8008a14:	e7ad      	b.n	8008972 <_strtol_l.isra.0+0x4a>
 8008a16:	2c30      	cmp	r4, #48	; 0x30
 8008a18:	d0a3      	beq.n	8008962 <_strtol_l.isra.0+0x3a>
 8008a1a:	260a      	movs	r6, #10
 8008a1c:	e7a9      	b.n	8008972 <_strtol_l.isra.0+0x4a>
	...

08008a20 <strtol>:
 8008a20:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <strtol+0x24>)
 8008a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a24:	681c      	ldr	r4, [r3, #0]
 8008a26:	4d08      	ldr	r5, [pc, #32]	; (8008a48 <strtol+0x28>)
 8008a28:	6a23      	ldr	r3, [r4, #32]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	bf08      	it	eq
 8008a2e:	462b      	moveq	r3, r5
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	460a      	mov	r2, r1
 8008a36:	4601      	mov	r1, r0
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f7ff ff75 	bl	8008928 <_strtol_l.isra.0>
 8008a3e:	b003      	add	sp, #12
 8008a40:	bd30      	pop	{r4, r5, pc}
 8008a42:	bf00      	nop
 8008a44:	20000014 	.word	0x20000014
 8008a48:	20000078 	.word	0x20000078

08008a4c <quorem>:
 8008a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	6903      	ldr	r3, [r0, #16]
 8008a52:	690c      	ldr	r4, [r1, #16]
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	4680      	mov	r8, r0
 8008a58:	f2c0 8082 	blt.w	8008b60 <quorem+0x114>
 8008a5c:	3c01      	subs	r4, #1
 8008a5e:	f101 0714 	add.w	r7, r1, #20
 8008a62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008a66:	f100 0614 	add.w	r6, r0, #20
 8008a6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008a6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008a72:	eb06 030c 	add.w	r3, r6, ip
 8008a76:	3501      	adds	r5, #1
 8008a78:	eb07 090c 	add.w	r9, r7, ip
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008a82:	b395      	cbz	r5, 8008aea <quorem+0x9e>
 8008a84:	f04f 0a00 	mov.w	sl, #0
 8008a88:	4638      	mov	r0, r7
 8008a8a:	46b6      	mov	lr, r6
 8008a8c:	46d3      	mov	fp, sl
 8008a8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a92:	b293      	uxth	r3, r2
 8008a94:	fb05 a303 	mla	r3, r5, r3, sl
 8008a98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	ebab 0303 	sub.w	r3, fp, r3
 8008aa2:	0c12      	lsrs	r2, r2, #16
 8008aa4:	f8de b000 	ldr.w	fp, [lr]
 8008aa8:	fb05 a202 	mla	r2, r5, r2, sl
 8008aac:	fa13 f38b 	uxtah	r3, r3, fp
 8008ab0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008ab4:	fa1f fb82 	uxth.w	fp, r2
 8008ab8:	f8de 2000 	ldr.w	r2, [lr]
 8008abc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aca:	4581      	cmp	r9, r0
 8008acc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008ad0:	f84e 3b04 	str.w	r3, [lr], #4
 8008ad4:	d2db      	bcs.n	8008a8e <quorem+0x42>
 8008ad6:	f856 300c 	ldr.w	r3, [r6, ip]
 8008ada:	b933      	cbnz	r3, 8008aea <quorem+0x9e>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	3b04      	subs	r3, #4
 8008ae0:	429e      	cmp	r6, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	d330      	bcc.n	8008b48 <quorem+0xfc>
 8008ae6:	f8c8 4010 	str.w	r4, [r8, #16]
 8008aea:	4640      	mov	r0, r8
 8008aec:	f001 f840 	bl	8009b70 <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	db25      	blt.n	8008b40 <quorem+0xf4>
 8008af4:	3501      	adds	r5, #1
 8008af6:	4630      	mov	r0, r6
 8008af8:	f04f 0c00 	mov.w	ip, #0
 8008afc:	f857 2b04 	ldr.w	r2, [r7], #4
 8008b00:	f8d0 e000 	ldr.w	lr, [r0]
 8008b04:	b293      	uxth	r3, r2
 8008b06:	ebac 0303 	sub.w	r3, ip, r3
 8008b0a:	0c12      	lsrs	r2, r2, #16
 8008b0c:	fa13 f38e 	uxtah	r3, r3, lr
 8008b10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b1e:	45b9      	cmp	r9, r7
 8008b20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b24:	f840 3b04 	str.w	r3, [r0], #4
 8008b28:	d2e8      	bcs.n	8008afc <quorem+0xb0>
 8008b2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008b2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008b32:	b92a      	cbnz	r2, 8008b40 <quorem+0xf4>
 8008b34:	3b04      	subs	r3, #4
 8008b36:	429e      	cmp	r6, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	d30b      	bcc.n	8008b54 <quorem+0x108>
 8008b3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008b40:	4628      	mov	r0, r5
 8008b42:	b003      	add	sp, #12
 8008b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b48:	6812      	ldr	r2, [r2, #0]
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	d1ca      	bne.n	8008ae6 <quorem+0x9a>
 8008b50:	3c01      	subs	r4, #1
 8008b52:	e7c5      	b.n	8008ae0 <quorem+0x94>
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	3b04      	subs	r3, #4
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	d1ef      	bne.n	8008b3c <quorem+0xf0>
 8008b5c:	3c01      	subs	r4, #1
 8008b5e:	e7ea      	b.n	8008b36 <quorem+0xea>
 8008b60:	2000      	movs	r0, #0
 8008b62:	e7ee      	b.n	8008b42 <quorem+0xf6>
 8008b64:	0000      	movs	r0, r0
	...

08008b68 <_dtoa_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	ec57 6b10 	vmov	r6, r7, d0
 8008b70:	b097      	sub	sp, #92	; 0x5c
 8008b72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b74:	9106      	str	r1, [sp, #24]
 8008b76:	4604      	mov	r4, r0
 8008b78:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008b7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b80:	e9cd 6700 	strd	r6, r7, [sp]
 8008b84:	b93d      	cbnz	r5, 8008b96 <_dtoa_r+0x2e>
 8008b86:	2010      	movs	r0, #16
 8008b88:	f000 fdb8 	bl	80096fc <malloc>
 8008b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8008b8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b92:	6005      	str	r5, [r0, #0]
 8008b94:	60c5      	str	r5, [r0, #12]
 8008b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b98:	6819      	ldr	r1, [r3, #0]
 8008b9a:	b151      	cbz	r1, 8008bb2 <_dtoa_r+0x4a>
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	604a      	str	r2, [r1, #4]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4093      	lsls	r3, r2
 8008ba4:	608b      	str	r3, [r1, #8]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fe01 	bl	80097ae <_Bfree>
 8008bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	1e3b      	subs	r3, r7, #0
 8008bb4:	bfbb      	ittet	lt
 8008bb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bba:	9301      	strlt	r3, [sp, #4]
 8008bbc:	2300      	movge	r3, #0
 8008bbe:	2201      	movlt	r2, #1
 8008bc0:	bfac      	ite	ge
 8008bc2:	f8c8 3000 	strge.w	r3, [r8]
 8008bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8008bca:	4baf      	ldr	r3, [pc, #700]	; (8008e88 <_dtoa_r+0x320>)
 8008bcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008bd0:	ea33 0308 	bics.w	r3, r3, r8
 8008bd4:	d114      	bne.n	8008c00 <_dtoa_r+0x98>
 8008bd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	9b00      	ldr	r3, [sp, #0]
 8008be0:	b923      	cbnz	r3, 8008bec <_dtoa_r+0x84>
 8008be2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f000 8542 	beq.w	8009670 <_dtoa_r+0xb08>
 8008bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008e9c <_dtoa_r+0x334>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 8544 	beq.w	8009680 <_dtoa_r+0xb18>
 8008bf8:	f10b 0303 	add.w	r3, fp, #3
 8008bfc:	f000 bd3e 	b.w	800967c <_dtoa_r+0xb14>
 8008c00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	4630      	mov	r0, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f7 ff7c 	bl	8000b08 <__aeabi_dcmpeq>
 8008c10:	4681      	mov	r9, r0
 8008c12:	b168      	cbz	r0, 8008c30 <_dtoa_r+0xc8>
 8008c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c16:	2301      	movs	r3, #1
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8524 	beq.w	800966a <_dtoa_r+0xb02>
 8008c22:	4b9a      	ldr	r3, [pc, #616]	; (8008e8c <_dtoa_r+0x324>)
 8008c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c26:	f103 3bff 	add.w	fp, r3, #4294967295
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	f000 bd28 	b.w	8009680 <_dtoa_r+0xb18>
 8008c30:	aa14      	add	r2, sp, #80	; 0x50
 8008c32:	a915      	add	r1, sp, #84	; 0x54
 8008c34:	ec47 6b10 	vmov	d0, r6, r7
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f001 f810 	bl	8009c5e <__d2b>
 8008c3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c42:	9004      	str	r0, [sp, #16]
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	d07c      	beq.n	8008d42 <_dtoa_r+0x1da>
 8008c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008c50:	46b2      	mov	sl, r6
 8008c52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008c5e:	2200      	movs	r2, #0
 8008c60:	4b8b      	ldr	r3, [pc, #556]	; (8008e90 <_dtoa_r+0x328>)
 8008c62:	4650      	mov	r0, sl
 8008c64:	4659      	mov	r1, fp
 8008c66:	f7f7 fb2f 	bl	80002c8 <__aeabi_dsub>
 8008c6a:	a381      	add	r3, pc, #516	; (adr r3, 8008e70 <_dtoa_r+0x308>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f7f7 fce2 	bl	8000638 <__aeabi_dmul>
 8008c74:	a380      	add	r3, pc, #512	; (adr r3, 8008e78 <_dtoa_r+0x310>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fb27 	bl	80002cc <__adddf3>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	4628      	mov	r0, r5
 8008c82:	460f      	mov	r7, r1
 8008c84:	f7f7 fc6e 	bl	8000564 <__aeabi_i2d>
 8008c88:	a37d      	add	r3, pc, #500	; (adr r3, 8008e80 <_dtoa_r+0x318>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fcd3 	bl	8000638 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4630      	mov	r0, r6
 8008c98:	4639      	mov	r1, r7
 8008c9a:	f7f7 fb17 	bl	80002cc <__adddf3>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	f7f7 ff79 	bl	8000b98 <__aeabi_d2iz>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	4682      	mov	sl, r0
 8008caa:	2300      	movs	r3, #0
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f7f7 ff34 	bl	8000b1c <__aeabi_dcmplt>
 8008cb4:	b148      	cbz	r0, 8008cca <_dtoa_r+0x162>
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	f7f7 fc54 	bl	8000564 <__aeabi_i2d>
 8008cbc:	4632      	mov	r2, r6
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	f7f7 ff22 	bl	8000b08 <__aeabi_dcmpeq>
 8008cc4:	b908      	cbnz	r0, 8008cca <_dtoa_r+0x162>
 8008cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cca:	f1ba 0f16 	cmp.w	sl, #22
 8008cce:	d859      	bhi.n	8008d84 <_dtoa_r+0x21c>
 8008cd0:	4970      	ldr	r1, [pc, #448]	; (8008e94 <_dtoa_r+0x32c>)
 8008cd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cde:	f7f7 ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d050      	beq.n	8008d88 <_dtoa_r+0x220>
 8008ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cea:	2300      	movs	r3, #0
 8008cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cf0:	1b5d      	subs	r5, r3, r5
 8008cf2:	f1b5 0801 	subs.w	r8, r5, #1
 8008cf6:	bf49      	itett	mi
 8008cf8:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cfc:	2300      	movpl	r3, #0
 8008cfe:	9305      	strmi	r3, [sp, #20]
 8008d00:	f04f 0800 	movmi.w	r8, #0
 8008d04:	bf58      	it	pl
 8008d06:	9305      	strpl	r3, [sp, #20]
 8008d08:	f1ba 0f00 	cmp.w	sl, #0
 8008d0c:	db3e      	blt.n	8008d8c <_dtoa_r+0x224>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	44d0      	add	r8, sl
 8008d12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	9b06      	ldr	r3, [sp, #24]
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	f200 8090 	bhi.w	8008e40 <_dtoa_r+0x2d8>
 8008d20:	2b05      	cmp	r3, #5
 8008d22:	bfc4      	itt	gt
 8008d24:	3b04      	subgt	r3, #4
 8008d26:	9306      	strgt	r3, [sp, #24]
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d2e:	bfcc      	ite	gt
 8008d30:	2500      	movgt	r5, #0
 8008d32:	2501      	movle	r5, #1
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	f200 808f 	bhi.w	8008e58 <_dtoa_r+0x2f0>
 8008d3a:	e8df f003 	tbb	[pc, r3]
 8008d3e:	7f7d      	.short	0x7f7d
 8008d40:	7131      	.short	0x7131
 8008d42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008d46:	441d      	add	r5, r3
 8008d48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008d4c:	2820      	cmp	r0, #32
 8008d4e:	dd13      	ble.n	8008d78 <_dtoa_r+0x210>
 8008d50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008d54:	9b00      	ldr	r3, [sp, #0]
 8008d56:	fa08 f800 	lsl.w	r8, r8, r0
 8008d5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008d5e:	fa23 f000 	lsr.w	r0, r3, r0
 8008d62:	ea48 0000 	orr.w	r0, r8, r0
 8008d66:	f7f7 fbed 	bl	8000544 <__aeabi_ui2d>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008d72:	3d01      	subs	r5, #1
 8008d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d76:	e772      	b.n	8008c5e <_dtoa_r+0xf6>
 8008d78:	9b00      	ldr	r3, [sp, #0]
 8008d7a:	f1c0 0020 	rsb	r0, r0, #32
 8008d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d82:	e7f0      	b.n	8008d66 <_dtoa_r+0x1fe>
 8008d84:	2301      	movs	r3, #1
 8008d86:	e7b1      	b.n	8008cec <_dtoa_r+0x184>
 8008d88:	900f      	str	r0, [sp, #60]	; 0x3c
 8008d8a:	e7b0      	b.n	8008cee <_dtoa_r+0x186>
 8008d8c:	9b05      	ldr	r3, [sp, #20]
 8008d8e:	eba3 030a 	sub.w	r3, r3, sl
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	f1ca 0300 	rsb	r3, sl, #0
 8008d98:	9307      	str	r3, [sp, #28]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8008d9e:	e7bb      	b.n	8008d18 <_dtoa_r+0x1b0>
 8008da0:	2301      	movs	r3, #1
 8008da2:	930a      	str	r3, [sp, #40]	; 0x28
 8008da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	dd59      	ble.n	8008e5e <_dtoa_r+0x2f6>
 8008daa:	9302      	str	r3, [sp, #8]
 8008dac:	4699      	mov	r9, r3
 8008dae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008db0:	2200      	movs	r2, #0
 8008db2:	6072      	str	r2, [r6, #4]
 8008db4:	2204      	movs	r2, #4
 8008db6:	f102 0014 	add.w	r0, r2, #20
 8008dba:	4298      	cmp	r0, r3
 8008dbc:	6871      	ldr	r1, [r6, #4]
 8008dbe:	d953      	bls.n	8008e68 <_dtoa_r+0x300>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f000 fcc0 	bl	8009746 <_Balloc>
 8008dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc8:	6030      	str	r0, [r6, #0]
 8008dca:	f1b9 0f0e 	cmp.w	r9, #14
 8008dce:	f8d3 b000 	ldr.w	fp, [r3]
 8008dd2:	f200 80e6 	bhi.w	8008fa2 <_dtoa_r+0x43a>
 8008dd6:	2d00      	cmp	r5, #0
 8008dd8:	f000 80e3 	beq.w	8008fa2 <_dtoa_r+0x43a>
 8008ddc:	ed9d 7b00 	vldr	d7, [sp]
 8008de0:	f1ba 0f00 	cmp.w	sl, #0
 8008de4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008de8:	dd74      	ble.n	8008ed4 <_dtoa_r+0x36c>
 8008dea:	4a2a      	ldr	r2, [pc, #168]	; (8008e94 <_dtoa_r+0x32c>)
 8008dec:	f00a 030f 	and.w	r3, sl, #15
 8008df0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008df4:	ed93 7b00 	vldr	d7, [r3]
 8008df8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008dfc:	06f0      	lsls	r0, r6, #27
 8008dfe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008e02:	d565      	bpl.n	8008ed0 <_dtoa_r+0x368>
 8008e04:	4b24      	ldr	r3, [pc, #144]	; (8008e98 <_dtoa_r+0x330>)
 8008e06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e0e:	f7f7 fd3d 	bl	800088c <__aeabi_ddiv>
 8008e12:	e9cd 0100 	strd	r0, r1, [sp]
 8008e16:	f006 060f 	and.w	r6, r6, #15
 8008e1a:	2503      	movs	r5, #3
 8008e1c:	4f1e      	ldr	r7, [pc, #120]	; (8008e98 <_dtoa_r+0x330>)
 8008e1e:	e04c      	b.n	8008eba <_dtoa_r+0x352>
 8008e20:	2301      	movs	r3, #1
 8008e22:	930a      	str	r3, [sp, #40]	; 0x28
 8008e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e26:	4453      	add	r3, sl
 8008e28:	f103 0901 	add.w	r9, r3, #1
 8008e2c:	9302      	str	r3, [sp, #8]
 8008e2e:	464b      	mov	r3, r9
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	bfb8      	it	lt
 8008e34:	2301      	movlt	r3, #1
 8008e36:	e7ba      	b.n	8008dae <_dtoa_r+0x246>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e7b2      	b.n	8008da2 <_dtoa_r+0x23a>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e7f0      	b.n	8008e22 <_dtoa_r+0x2ba>
 8008e40:	2501      	movs	r5, #1
 8008e42:	2300      	movs	r3, #0
 8008e44:	9306      	str	r3, [sp, #24]
 8008e46:	950a      	str	r5, [sp, #40]	; 0x28
 8008e48:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4c:	9302      	str	r3, [sp, #8]
 8008e4e:	4699      	mov	r9, r3
 8008e50:	2200      	movs	r2, #0
 8008e52:	2312      	movs	r3, #18
 8008e54:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e56:	e7aa      	b.n	8008dae <_dtoa_r+0x246>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e5c:	e7f4      	b.n	8008e48 <_dtoa_r+0x2e0>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	4699      	mov	r9, r3
 8008e64:	461a      	mov	r2, r3
 8008e66:	e7f5      	b.n	8008e54 <_dtoa_r+0x2ec>
 8008e68:	3101      	adds	r1, #1
 8008e6a:	6071      	str	r1, [r6, #4]
 8008e6c:	0052      	lsls	r2, r2, #1
 8008e6e:	e7a2      	b.n	8008db6 <_dtoa_r+0x24e>
 8008e70:	636f4361 	.word	0x636f4361
 8008e74:	3fd287a7 	.word	0x3fd287a7
 8008e78:	8b60c8b3 	.word	0x8b60c8b3
 8008e7c:	3fc68a28 	.word	0x3fc68a28
 8008e80:	509f79fb 	.word	0x509f79fb
 8008e84:	3fd34413 	.word	0x3fd34413
 8008e88:	7ff00000 	.word	0x7ff00000
 8008e8c:	0800a241 	.word	0x0800a241
 8008e90:	3ff80000 	.word	0x3ff80000
 8008e94:	0800a2a8 	.word	0x0800a2a8
 8008e98:	0800a280 	.word	0x0800a280
 8008e9c:	0800a26d 	.word	0x0800a26d
 8008ea0:	07f1      	lsls	r1, r6, #31
 8008ea2:	d508      	bpl.n	8008eb6 <_dtoa_r+0x34e>
 8008ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eac:	f7f7 fbc4 	bl	8000638 <__aeabi_dmul>
 8008eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	1076      	asrs	r6, r6, #1
 8008eb8:	3708      	adds	r7, #8
 8008eba:	2e00      	cmp	r6, #0
 8008ebc:	d1f0      	bne.n	8008ea0 <_dtoa_r+0x338>
 8008ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec6:	f7f7 fce1 	bl	800088c <__aeabi_ddiv>
 8008eca:	e9cd 0100 	strd	r0, r1, [sp]
 8008ece:	e01a      	b.n	8008f06 <_dtoa_r+0x39e>
 8008ed0:	2502      	movs	r5, #2
 8008ed2:	e7a3      	b.n	8008e1c <_dtoa_r+0x2b4>
 8008ed4:	f000 80a0 	beq.w	8009018 <_dtoa_r+0x4b0>
 8008ed8:	f1ca 0600 	rsb	r6, sl, #0
 8008edc:	4b9f      	ldr	r3, [pc, #636]	; (800915c <_dtoa_r+0x5f4>)
 8008ede:	4fa0      	ldr	r7, [pc, #640]	; (8009160 <_dtoa_r+0x5f8>)
 8008ee0:	f006 020f 	and.w	r2, r6, #15
 8008ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ef0:	f7f7 fba2 	bl	8000638 <__aeabi_dmul>
 8008ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8008ef8:	1136      	asrs	r6, r6, #4
 8008efa:	2300      	movs	r3, #0
 8008efc:	2502      	movs	r5, #2
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d17f      	bne.n	8009002 <_dtoa_r+0x49a>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e1      	bne.n	8008eca <_dtoa_r+0x362>
 8008f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 8087 	beq.w	800901c <_dtoa_r+0x4b4>
 8008f0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f12:	2200      	movs	r2, #0
 8008f14:	4b93      	ldr	r3, [pc, #588]	; (8009164 <_dtoa_r+0x5fc>)
 8008f16:	4630      	mov	r0, r6
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fdff 	bl	8000b1c <__aeabi_dcmplt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d07c      	beq.n	800901c <_dtoa_r+0x4b4>
 8008f22:	f1b9 0f00 	cmp.w	r9, #0
 8008f26:	d079      	beq.n	800901c <_dtoa_r+0x4b4>
 8008f28:	9b02      	ldr	r3, [sp, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dd35      	ble.n	8008f9a <_dtoa_r+0x432>
 8008f2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f32:	9308      	str	r3, [sp, #32]
 8008f34:	4639      	mov	r1, r7
 8008f36:	2200      	movs	r2, #0
 8008f38:	4b8b      	ldr	r3, [pc, #556]	; (8009168 <_dtoa_r+0x600>)
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7f7 fb7c 	bl	8000638 <__aeabi_dmul>
 8008f40:	e9cd 0100 	strd	r0, r1, [sp]
 8008f44:	9f02      	ldr	r7, [sp, #8]
 8008f46:	3501      	adds	r5, #1
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7f7 fb0b 	bl	8000564 <__aeabi_i2d>
 8008f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f52:	f7f7 fb71 	bl	8000638 <__aeabi_dmul>
 8008f56:	2200      	movs	r2, #0
 8008f58:	4b84      	ldr	r3, [pc, #528]	; (800916c <_dtoa_r+0x604>)
 8008f5a:	f7f7 f9b7 	bl	80002cc <__adddf3>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008f64:	2f00      	cmp	r7, #0
 8008f66:	d15d      	bne.n	8009024 <_dtoa_r+0x4bc>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4b81      	ldr	r3, [pc, #516]	; (8009170 <_dtoa_r+0x608>)
 8008f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f70:	f7f7 f9aa 	bl	80002c8 <__aeabi_dsub>
 8008f74:	462a      	mov	r2, r5
 8008f76:	4633      	mov	r3, r6
 8008f78:	e9cd 0100 	strd	r0, r1, [sp]
 8008f7c:	f7f7 fdec 	bl	8000b58 <__aeabi_dcmpgt>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	f040 8288 	bne.w	8009496 <_dtoa_r+0x92e>
 8008f86:	462a      	mov	r2, r5
 8008f88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f90:	f7f7 fdc4 	bl	8000b1c <__aeabi_dcmplt>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	f040 827c 	bne.w	8009492 <_dtoa_r+0x92a>
 8008f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8008fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f2c0 8150 	blt.w	800924a <_dtoa_r+0x6e2>
 8008faa:	f1ba 0f0e 	cmp.w	sl, #14
 8008fae:	f300 814c 	bgt.w	800924a <_dtoa_r+0x6e2>
 8008fb2:	4b6a      	ldr	r3, [pc, #424]	; (800915c <_dtoa_r+0x5f4>)
 8008fb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fb8:	ed93 7b00 	vldr	d7, [r3]
 8008fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fc4:	f280 80d8 	bge.w	8009178 <_dtoa_r+0x610>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	f300 80d4 	bgt.w	8009178 <_dtoa_r+0x610>
 8008fd0:	f040 825e 	bne.w	8009490 <_dtoa_r+0x928>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4b66      	ldr	r3, [pc, #408]	; (8009170 <_dtoa_r+0x608>)
 8008fd8:	ec51 0b17 	vmov	r0, r1, d7
 8008fdc:	f7f7 fb2c 	bl	8000638 <__aeabi_dmul>
 8008fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fe4:	f7f7 fdae 	bl	8000b44 <__aeabi_dcmpge>
 8008fe8:	464f      	mov	r7, r9
 8008fea:	464e      	mov	r6, r9
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f040 8234 	bne.w	800945a <_dtoa_r+0x8f2>
 8008ff2:	2331      	movs	r3, #49	; 0x31
 8008ff4:	f10b 0501 	add.w	r5, fp, #1
 8008ff8:	f88b 3000 	strb.w	r3, [fp]
 8008ffc:	f10a 0a01 	add.w	sl, sl, #1
 8009000:	e22f      	b.n	8009462 <_dtoa_r+0x8fa>
 8009002:	07f2      	lsls	r2, r6, #31
 8009004:	d505      	bpl.n	8009012 <_dtoa_r+0x4aa>
 8009006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900a:	f7f7 fb15 	bl	8000638 <__aeabi_dmul>
 800900e:	3501      	adds	r5, #1
 8009010:	2301      	movs	r3, #1
 8009012:	1076      	asrs	r6, r6, #1
 8009014:	3708      	adds	r7, #8
 8009016:	e772      	b.n	8008efe <_dtoa_r+0x396>
 8009018:	2502      	movs	r5, #2
 800901a:	e774      	b.n	8008f06 <_dtoa_r+0x39e>
 800901c:	f8cd a020 	str.w	sl, [sp, #32]
 8009020:	464f      	mov	r7, r9
 8009022:	e791      	b.n	8008f48 <_dtoa_r+0x3e0>
 8009024:	4b4d      	ldr	r3, [pc, #308]	; (800915c <_dtoa_r+0x5f4>)
 8009026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800902a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800902e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009030:	2b00      	cmp	r3, #0
 8009032:	d047      	beq.n	80090c4 <_dtoa_r+0x55c>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	2000      	movs	r0, #0
 800903a:	494e      	ldr	r1, [pc, #312]	; (8009174 <_dtoa_r+0x60c>)
 800903c:	f7f7 fc26 	bl	800088c <__aeabi_ddiv>
 8009040:	462a      	mov	r2, r5
 8009042:	4633      	mov	r3, r6
 8009044:	f7f7 f940 	bl	80002c8 <__aeabi_dsub>
 8009048:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800904c:	465d      	mov	r5, fp
 800904e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009052:	f7f7 fda1 	bl	8000b98 <__aeabi_d2iz>
 8009056:	4606      	mov	r6, r0
 8009058:	f7f7 fa84 	bl	8000564 <__aeabi_i2d>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009064:	f7f7 f930 	bl	80002c8 <__aeabi_dsub>
 8009068:	3630      	adds	r6, #48	; 0x30
 800906a:	f805 6b01 	strb.w	r6, [r5], #1
 800906e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009072:	e9cd 0100 	strd	r0, r1, [sp]
 8009076:	f7f7 fd51 	bl	8000b1c <__aeabi_dcmplt>
 800907a:	2800      	cmp	r0, #0
 800907c:	d163      	bne.n	8009146 <_dtoa_r+0x5de>
 800907e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009082:	2000      	movs	r0, #0
 8009084:	4937      	ldr	r1, [pc, #220]	; (8009164 <_dtoa_r+0x5fc>)
 8009086:	f7f7 f91f 	bl	80002c8 <__aeabi_dsub>
 800908a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800908e:	f7f7 fd45 	bl	8000b1c <__aeabi_dcmplt>
 8009092:	2800      	cmp	r0, #0
 8009094:	f040 80b7 	bne.w	8009206 <_dtoa_r+0x69e>
 8009098:	eba5 030b 	sub.w	r3, r5, fp
 800909c:	429f      	cmp	r7, r3
 800909e:	f77f af7c 	ble.w	8008f9a <_dtoa_r+0x432>
 80090a2:	2200      	movs	r2, #0
 80090a4:	4b30      	ldr	r3, [pc, #192]	; (8009168 <_dtoa_r+0x600>)
 80090a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090aa:	f7f7 fac5 	bl	8000638 <__aeabi_dmul>
 80090ae:	2200      	movs	r2, #0
 80090b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80090b4:	4b2c      	ldr	r3, [pc, #176]	; (8009168 <_dtoa_r+0x600>)
 80090b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090ba:	f7f7 fabd 	bl	8000638 <__aeabi_dmul>
 80090be:	e9cd 0100 	strd	r0, r1, [sp]
 80090c2:	e7c4      	b.n	800904e <_dtoa_r+0x4e6>
 80090c4:	462a      	mov	r2, r5
 80090c6:	4633      	mov	r3, r6
 80090c8:	f7f7 fab6 	bl	8000638 <__aeabi_dmul>
 80090cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80090d0:	eb0b 0507 	add.w	r5, fp, r7
 80090d4:	465e      	mov	r6, fp
 80090d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090da:	f7f7 fd5d 	bl	8000b98 <__aeabi_d2iz>
 80090de:	4607      	mov	r7, r0
 80090e0:	f7f7 fa40 	bl	8000564 <__aeabi_i2d>
 80090e4:	3730      	adds	r7, #48	; 0x30
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090ee:	f7f7 f8eb 	bl	80002c8 <__aeabi_dsub>
 80090f2:	f806 7b01 	strb.w	r7, [r6], #1
 80090f6:	42ae      	cmp	r6, r5
 80090f8:	e9cd 0100 	strd	r0, r1, [sp]
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	d126      	bne.n	8009150 <_dtoa_r+0x5e8>
 8009102:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <_dtoa_r+0x60c>)
 8009104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009108:	f7f7 f8e0 	bl	80002cc <__adddf3>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009114:	f7f7 fd20 	bl	8000b58 <__aeabi_dcmpgt>
 8009118:	2800      	cmp	r0, #0
 800911a:	d174      	bne.n	8009206 <_dtoa_r+0x69e>
 800911c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009120:	2000      	movs	r0, #0
 8009122:	4914      	ldr	r1, [pc, #80]	; (8009174 <_dtoa_r+0x60c>)
 8009124:	f7f7 f8d0 	bl	80002c8 <__aeabi_dsub>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009130:	f7f7 fcf4 	bl	8000b1c <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	f43f af30 	beq.w	8008f9a <_dtoa_r+0x432>
 800913a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800913e:	2b30      	cmp	r3, #48	; 0x30
 8009140:	f105 32ff 	add.w	r2, r5, #4294967295
 8009144:	d002      	beq.n	800914c <_dtoa_r+0x5e4>
 8009146:	f8dd a020 	ldr.w	sl, [sp, #32]
 800914a:	e04a      	b.n	80091e2 <_dtoa_r+0x67a>
 800914c:	4615      	mov	r5, r2
 800914e:	e7f4      	b.n	800913a <_dtoa_r+0x5d2>
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <_dtoa_r+0x600>)
 8009152:	f7f7 fa71 	bl	8000638 <__aeabi_dmul>
 8009156:	e9cd 0100 	strd	r0, r1, [sp]
 800915a:	e7bc      	b.n	80090d6 <_dtoa_r+0x56e>
 800915c:	0800a2a8 	.word	0x0800a2a8
 8009160:	0800a280 	.word	0x0800a280
 8009164:	3ff00000 	.word	0x3ff00000
 8009168:	40240000 	.word	0x40240000
 800916c:	401c0000 	.word	0x401c0000
 8009170:	40140000 	.word	0x40140000
 8009174:	3fe00000 	.word	0x3fe00000
 8009178:	e9dd 6700 	ldrd	r6, r7, [sp]
 800917c:	465d      	mov	r5, fp
 800917e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009182:	4630      	mov	r0, r6
 8009184:	4639      	mov	r1, r7
 8009186:	f7f7 fb81 	bl	800088c <__aeabi_ddiv>
 800918a:	f7f7 fd05 	bl	8000b98 <__aeabi_d2iz>
 800918e:	4680      	mov	r8, r0
 8009190:	f7f7 f9e8 	bl	8000564 <__aeabi_i2d>
 8009194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009198:	f7f7 fa4e 	bl	8000638 <__aeabi_dmul>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80091a8:	f7f7 f88e 	bl	80002c8 <__aeabi_dsub>
 80091ac:	f805 6b01 	strb.w	r6, [r5], #1
 80091b0:	eba5 060b 	sub.w	r6, r5, fp
 80091b4:	45b1      	cmp	r9, r6
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	d139      	bne.n	8009230 <_dtoa_r+0x6c8>
 80091bc:	f7f7 f886 	bl	80002cc <__adddf3>
 80091c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091c4:	4606      	mov	r6, r0
 80091c6:	460f      	mov	r7, r1
 80091c8:	f7f7 fcc6 	bl	8000b58 <__aeabi_dcmpgt>
 80091cc:	b9c8      	cbnz	r0, 8009202 <_dtoa_r+0x69a>
 80091ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091d2:	4630      	mov	r0, r6
 80091d4:	4639      	mov	r1, r7
 80091d6:	f7f7 fc97 	bl	8000b08 <__aeabi_dcmpeq>
 80091da:	b110      	cbz	r0, 80091e2 <_dtoa_r+0x67a>
 80091dc:	f018 0f01 	tst.w	r8, #1
 80091e0:	d10f      	bne.n	8009202 <_dtoa_r+0x69a>
 80091e2:	9904      	ldr	r1, [sp, #16]
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fae2 	bl	80097ae <_Bfree>
 80091ea:	2300      	movs	r3, #0
 80091ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091ee:	702b      	strb	r3, [r5, #0]
 80091f0:	f10a 0301 	add.w	r3, sl, #1
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8241 	beq.w	8009680 <_dtoa_r+0xb18>
 80091fe:	601d      	str	r5, [r3, #0]
 8009200:	e23e      	b.n	8009680 <_dtoa_r+0xb18>
 8009202:	f8cd a020 	str.w	sl, [sp, #32]
 8009206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800920a:	2a39      	cmp	r2, #57	; 0x39
 800920c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009210:	d108      	bne.n	8009224 <_dtoa_r+0x6bc>
 8009212:	459b      	cmp	fp, r3
 8009214:	d10a      	bne.n	800922c <_dtoa_r+0x6c4>
 8009216:	9b08      	ldr	r3, [sp, #32]
 8009218:	3301      	adds	r3, #1
 800921a:	9308      	str	r3, [sp, #32]
 800921c:	2330      	movs	r3, #48	; 0x30
 800921e:	f88b 3000 	strb.w	r3, [fp]
 8009222:	465b      	mov	r3, fp
 8009224:	781a      	ldrb	r2, [r3, #0]
 8009226:	3201      	adds	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]
 800922a:	e78c      	b.n	8009146 <_dtoa_r+0x5de>
 800922c:	461d      	mov	r5, r3
 800922e:	e7ea      	b.n	8009206 <_dtoa_r+0x69e>
 8009230:	2200      	movs	r2, #0
 8009232:	4b9b      	ldr	r3, [pc, #620]	; (80094a0 <_dtoa_r+0x938>)
 8009234:	f7f7 fa00 	bl	8000638 <__aeabi_dmul>
 8009238:	2200      	movs	r2, #0
 800923a:	2300      	movs	r3, #0
 800923c:	4606      	mov	r6, r0
 800923e:	460f      	mov	r7, r1
 8009240:	f7f7 fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8009244:	2800      	cmp	r0, #0
 8009246:	d09a      	beq.n	800917e <_dtoa_r+0x616>
 8009248:	e7cb      	b.n	80091e2 <_dtoa_r+0x67a>
 800924a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800924c:	2a00      	cmp	r2, #0
 800924e:	f000 808b 	beq.w	8009368 <_dtoa_r+0x800>
 8009252:	9a06      	ldr	r2, [sp, #24]
 8009254:	2a01      	cmp	r2, #1
 8009256:	dc6e      	bgt.n	8009336 <_dtoa_r+0x7ce>
 8009258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800925a:	2a00      	cmp	r2, #0
 800925c:	d067      	beq.n	800932e <_dtoa_r+0x7c6>
 800925e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009262:	9f07      	ldr	r7, [sp, #28]
 8009264:	9d05      	ldr	r5, [sp, #20]
 8009266:	9a05      	ldr	r2, [sp, #20]
 8009268:	2101      	movs	r1, #1
 800926a:	441a      	add	r2, r3
 800926c:	4620      	mov	r0, r4
 800926e:	9205      	str	r2, [sp, #20]
 8009270:	4498      	add	r8, r3
 8009272:	f000 fb3c 	bl	80098ee <__i2b>
 8009276:	4606      	mov	r6, r0
 8009278:	2d00      	cmp	r5, #0
 800927a:	dd0c      	ble.n	8009296 <_dtoa_r+0x72e>
 800927c:	f1b8 0f00 	cmp.w	r8, #0
 8009280:	dd09      	ble.n	8009296 <_dtoa_r+0x72e>
 8009282:	4545      	cmp	r5, r8
 8009284:	9a05      	ldr	r2, [sp, #20]
 8009286:	462b      	mov	r3, r5
 8009288:	bfa8      	it	ge
 800928a:	4643      	movge	r3, r8
 800928c:	1ad2      	subs	r2, r2, r3
 800928e:	9205      	str	r2, [sp, #20]
 8009290:	1aed      	subs	r5, r5, r3
 8009292:	eba8 0803 	sub.w	r8, r8, r3
 8009296:	9b07      	ldr	r3, [sp, #28]
 8009298:	b1eb      	cbz	r3, 80092d6 <_dtoa_r+0x76e>
 800929a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d067      	beq.n	8009370 <_dtoa_r+0x808>
 80092a0:	b18f      	cbz	r7, 80092c6 <_dtoa_r+0x75e>
 80092a2:	4631      	mov	r1, r6
 80092a4:	463a      	mov	r2, r7
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 fbc0 	bl	8009a2c <__pow5mult>
 80092ac:	9a04      	ldr	r2, [sp, #16]
 80092ae:	4601      	mov	r1, r0
 80092b0:	4606      	mov	r6, r0
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fb24 	bl	8009900 <__multiply>
 80092b8:	9904      	ldr	r1, [sp, #16]
 80092ba:	9008      	str	r0, [sp, #32]
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 fa76 	bl	80097ae <_Bfree>
 80092c2:	9b08      	ldr	r3, [sp, #32]
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	9b07      	ldr	r3, [sp, #28]
 80092c8:	1bda      	subs	r2, r3, r7
 80092ca:	d004      	beq.n	80092d6 <_dtoa_r+0x76e>
 80092cc:	9904      	ldr	r1, [sp, #16]
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fbac 	bl	8009a2c <__pow5mult>
 80092d4:	9004      	str	r0, [sp, #16]
 80092d6:	2101      	movs	r1, #1
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fb08 	bl	80098ee <__i2b>
 80092de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092e0:	4607      	mov	r7, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 81d0 	beq.w	8009688 <_dtoa_r+0xb20>
 80092e8:	461a      	mov	r2, r3
 80092ea:	4601      	mov	r1, r0
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fb9d 	bl	8009a2c <__pow5mult>
 80092f2:	9b06      	ldr	r3, [sp, #24]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	4607      	mov	r7, r0
 80092f8:	dc40      	bgt.n	800937c <_dtoa_r+0x814>
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d139      	bne.n	8009374 <_dtoa_r+0x80c>
 8009300:	9b01      	ldr	r3, [sp, #4]
 8009302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009306:	2b00      	cmp	r3, #0
 8009308:	d136      	bne.n	8009378 <_dtoa_r+0x810>
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009310:	0d1b      	lsrs	r3, r3, #20
 8009312:	051b      	lsls	r3, r3, #20
 8009314:	b12b      	cbz	r3, 8009322 <_dtoa_r+0x7ba>
 8009316:	9b05      	ldr	r3, [sp, #20]
 8009318:	3301      	adds	r3, #1
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	f108 0801 	add.w	r8, r8, #1
 8009320:	2301      	movs	r3, #1
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009326:	2b00      	cmp	r3, #0
 8009328:	d12a      	bne.n	8009380 <_dtoa_r+0x818>
 800932a:	2001      	movs	r0, #1
 800932c:	e030      	b.n	8009390 <_dtoa_r+0x828>
 800932e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009330:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009334:	e795      	b.n	8009262 <_dtoa_r+0x6fa>
 8009336:	9b07      	ldr	r3, [sp, #28]
 8009338:	f109 37ff 	add.w	r7, r9, #4294967295
 800933c:	42bb      	cmp	r3, r7
 800933e:	bfbf      	itttt	lt
 8009340:	9b07      	ldrlt	r3, [sp, #28]
 8009342:	9707      	strlt	r7, [sp, #28]
 8009344:	1afa      	sublt	r2, r7, r3
 8009346:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009348:	bfbb      	ittet	lt
 800934a:	189b      	addlt	r3, r3, r2
 800934c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800934e:	1bdf      	subge	r7, r3, r7
 8009350:	2700      	movlt	r7, #0
 8009352:	f1b9 0f00 	cmp.w	r9, #0
 8009356:	bfb5      	itete	lt
 8009358:	9b05      	ldrlt	r3, [sp, #20]
 800935a:	9d05      	ldrge	r5, [sp, #20]
 800935c:	eba3 0509 	sublt.w	r5, r3, r9
 8009360:	464b      	movge	r3, r9
 8009362:	bfb8      	it	lt
 8009364:	2300      	movlt	r3, #0
 8009366:	e77e      	b.n	8009266 <_dtoa_r+0x6fe>
 8009368:	9f07      	ldr	r7, [sp, #28]
 800936a:	9d05      	ldr	r5, [sp, #20]
 800936c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800936e:	e783      	b.n	8009278 <_dtoa_r+0x710>
 8009370:	9a07      	ldr	r2, [sp, #28]
 8009372:	e7ab      	b.n	80092cc <_dtoa_r+0x764>
 8009374:	2300      	movs	r3, #0
 8009376:	e7d4      	b.n	8009322 <_dtoa_r+0x7ba>
 8009378:	9b00      	ldr	r3, [sp, #0]
 800937a:	e7d2      	b.n	8009322 <_dtoa_r+0x7ba>
 800937c:	2300      	movs	r3, #0
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009386:	6918      	ldr	r0, [r3, #16]
 8009388:	f000 fa63 	bl	8009852 <__hi0bits>
 800938c:	f1c0 0020 	rsb	r0, r0, #32
 8009390:	4440      	add	r0, r8
 8009392:	f010 001f 	ands.w	r0, r0, #31
 8009396:	d047      	beq.n	8009428 <_dtoa_r+0x8c0>
 8009398:	f1c0 0320 	rsb	r3, r0, #32
 800939c:	2b04      	cmp	r3, #4
 800939e:	dd3b      	ble.n	8009418 <_dtoa_r+0x8b0>
 80093a0:	9b05      	ldr	r3, [sp, #20]
 80093a2:	f1c0 001c 	rsb	r0, r0, #28
 80093a6:	4403      	add	r3, r0
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	4405      	add	r5, r0
 80093ac:	4480      	add	r8, r0
 80093ae:	9b05      	ldr	r3, [sp, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dd05      	ble.n	80093c0 <_dtoa_r+0x858>
 80093b4:	461a      	mov	r2, r3
 80093b6:	9904      	ldr	r1, [sp, #16]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fb85 	bl	8009ac8 <__lshift>
 80093be:	9004      	str	r0, [sp, #16]
 80093c0:	f1b8 0f00 	cmp.w	r8, #0
 80093c4:	dd05      	ble.n	80093d2 <_dtoa_r+0x86a>
 80093c6:	4639      	mov	r1, r7
 80093c8:	4642      	mov	r2, r8
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 fb7c 	bl	8009ac8 <__lshift>
 80093d0:	4607      	mov	r7, r0
 80093d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093d4:	b353      	cbz	r3, 800942c <_dtoa_r+0x8c4>
 80093d6:	4639      	mov	r1, r7
 80093d8:	9804      	ldr	r0, [sp, #16]
 80093da:	f000 fbc9 	bl	8009b70 <__mcmp>
 80093de:	2800      	cmp	r0, #0
 80093e0:	da24      	bge.n	800942c <_dtoa_r+0x8c4>
 80093e2:	2300      	movs	r3, #0
 80093e4:	220a      	movs	r2, #10
 80093e6:	9904      	ldr	r1, [sp, #16]
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 f9f7 	bl	80097dc <__multadd>
 80093ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f0:	9004      	str	r0, [sp, #16]
 80093f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 814d 	beq.w	8009696 <_dtoa_r+0xb2e>
 80093fc:	2300      	movs	r3, #0
 80093fe:	4631      	mov	r1, r6
 8009400:	220a      	movs	r2, #10
 8009402:	4620      	mov	r0, r4
 8009404:	f000 f9ea 	bl	80097dc <__multadd>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	4606      	mov	r6, r0
 800940e:	dc4f      	bgt.n	80094b0 <_dtoa_r+0x948>
 8009410:	9b06      	ldr	r3, [sp, #24]
 8009412:	2b02      	cmp	r3, #2
 8009414:	dd4c      	ble.n	80094b0 <_dtoa_r+0x948>
 8009416:	e011      	b.n	800943c <_dtoa_r+0x8d4>
 8009418:	d0c9      	beq.n	80093ae <_dtoa_r+0x846>
 800941a:	9a05      	ldr	r2, [sp, #20]
 800941c:	331c      	adds	r3, #28
 800941e:	441a      	add	r2, r3
 8009420:	9205      	str	r2, [sp, #20]
 8009422:	441d      	add	r5, r3
 8009424:	4498      	add	r8, r3
 8009426:	e7c2      	b.n	80093ae <_dtoa_r+0x846>
 8009428:	4603      	mov	r3, r0
 800942a:	e7f6      	b.n	800941a <_dtoa_r+0x8b2>
 800942c:	f1b9 0f00 	cmp.w	r9, #0
 8009430:	dc38      	bgt.n	80094a4 <_dtoa_r+0x93c>
 8009432:	9b06      	ldr	r3, [sp, #24]
 8009434:	2b02      	cmp	r3, #2
 8009436:	dd35      	ble.n	80094a4 <_dtoa_r+0x93c>
 8009438:	f8cd 9008 	str.w	r9, [sp, #8]
 800943c:	9b02      	ldr	r3, [sp, #8]
 800943e:	b963      	cbnz	r3, 800945a <_dtoa_r+0x8f2>
 8009440:	4639      	mov	r1, r7
 8009442:	2205      	movs	r2, #5
 8009444:	4620      	mov	r0, r4
 8009446:	f000 f9c9 	bl	80097dc <__multadd>
 800944a:	4601      	mov	r1, r0
 800944c:	4607      	mov	r7, r0
 800944e:	9804      	ldr	r0, [sp, #16]
 8009450:	f000 fb8e 	bl	8009b70 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	f73f adcc 	bgt.w	8008ff2 <_dtoa_r+0x48a>
 800945a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800945c:	465d      	mov	r5, fp
 800945e:	ea6f 0a03 	mvn.w	sl, r3
 8009462:	f04f 0900 	mov.w	r9, #0
 8009466:	4639      	mov	r1, r7
 8009468:	4620      	mov	r0, r4
 800946a:	f000 f9a0 	bl	80097ae <_Bfree>
 800946e:	2e00      	cmp	r6, #0
 8009470:	f43f aeb7 	beq.w	80091e2 <_dtoa_r+0x67a>
 8009474:	f1b9 0f00 	cmp.w	r9, #0
 8009478:	d005      	beq.n	8009486 <_dtoa_r+0x91e>
 800947a:	45b1      	cmp	r9, r6
 800947c:	d003      	beq.n	8009486 <_dtoa_r+0x91e>
 800947e:	4649      	mov	r1, r9
 8009480:	4620      	mov	r0, r4
 8009482:	f000 f994 	bl	80097ae <_Bfree>
 8009486:	4631      	mov	r1, r6
 8009488:	4620      	mov	r0, r4
 800948a:	f000 f990 	bl	80097ae <_Bfree>
 800948e:	e6a8      	b.n	80091e2 <_dtoa_r+0x67a>
 8009490:	2700      	movs	r7, #0
 8009492:	463e      	mov	r6, r7
 8009494:	e7e1      	b.n	800945a <_dtoa_r+0x8f2>
 8009496:	f8dd a020 	ldr.w	sl, [sp, #32]
 800949a:	463e      	mov	r6, r7
 800949c:	e5a9      	b.n	8008ff2 <_dtoa_r+0x48a>
 800949e:	bf00      	nop
 80094a0:	40240000 	.word	0x40240000
 80094a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 80fa 	beq.w	80096a4 <_dtoa_r+0xb3c>
 80094b0:	2d00      	cmp	r5, #0
 80094b2:	dd05      	ble.n	80094c0 <_dtoa_r+0x958>
 80094b4:	4631      	mov	r1, r6
 80094b6:	462a      	mov	r2, r5
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 fb05 	bl	8009ac8 <__lshift>
 80094be:	4606      	mov	r6, r0
 80094c0:	9b07      	ldr	r3, [sp, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d04c      	beq.n	8009560 <_dtoa_r+0x9f8>
 80094c6:	6871      	ldr	r1, [r6, #4]
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 f93c 	bl	8009746 <_Balloc>
 80094ce:	6932      	ldr	r2, [r6, #16]
 80094d0:	3202      	adds	r2, #2
 80094d2:	4605      	mov	r5, r0
 80094d4:	0092      	lsls	r2, r2, #2
 80094d6:	f106 010c 	add.w	r1, r6, #12
 80094da:	300c      	adds	r0, #12
 80094dc:	f000 f928 	bl	8009730 <memcpy>
 80094e0:	2201      	movs	r2, #1
 80094e2:	4629      	mov	r1, r5
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 faef 	bl	8009ac8 <__lshift>
 80094ea:	9b00      	ldr	r3, [sp, #0]
 80094ec:	f8cd b014 	str.w	fp, [sp, #20]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	46b1      	mov	r9, r6
 80094f6:	9307      	str	r3, [sp, #28]
 80094f8:	4606      	mov	r6, r0
 80094fa:	4639      	mov	r1, r7
 80094fc:	9804      	ldr	r0, [sp, #16]
 80094fe:	f7ff faa5 	bl	8008a4c <quorem>
 8009502:	4649      	mov	r1, r9
 8009504:	4605      	mov	r5, r0
 8009506:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800950a:	9804      	ldr	r0, [sp, #16]
 800950c:	f000 fb30 	bl	8009b70 <__mcmp>
 8009510:	4632      	mov	r2, r6
 8009512:	9000      	str	r0, [sp, #0]
 8009514:	4639      	mov	r1, r7
 8009516:	4620      	mov	r0, r4
 8009518:	f000 fb44 	bl	8009ba4 <__mdiff>
 800951c:	68c3      	ldr	r3, [r0, #12]
 800951e:	4602      	mov	r2, r0
 8009520:	bb03      	cbnz	r3, 8009564 <_dtoa_r+0x9fc>
 8009522:	4601      	mov	r1, r0
 8009524:	9008      	str	r0, [sp, #32]
 8009526:	9804      	ldr	r0, [sp, #16]
 8009528:	f000 fb22 	bl	8009b70 <__mcmp>
 800952c:	9a08      	ldr	r2, [sp, #32]
 800952e:	4603      	mov	r3, r0
 8009530:	4611      	mov	r1, r2
 8009532:	4620      	mov	r0, r4
 8009534:	9308      	str	r3, [sp, #32]
 8009536:	f000 f93a 	bl	80097ae <_Bfree>
 800953a:	9b08      	ldr	r3, [sp, #32]
 800953c:	b9a3      	cbnz	r3, 8009568 <_dtoa_r+0xa00>
 800953e:	9a06      	ldr	r2, [sp, #24]
 8009540:	b992      	cbnz	r2, 8009568 <_dtoa_r+0xa00>
 8009542:	9a07      	ldr	r2, [sp, #28]
 8009544:	b982      	cbnz	r2, 8009568 <_dtoa_r+0xa00>
 8009546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800954a:	d029      	beq.n	80095a0 <_dtoa_r+0xa38>
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	dd01      	ble.n	8009556 <_dtoa_r+0x9ee>
 8009552:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009556:	9b05      	ldr	r3, [sp, #20]
 8009558:	1c5d      	adds	r5, r3, #1
 800955a:	f883 8000 	strb.w	r8, [r3]
 800955e:	e782      	b.n	8009466 <_dtoa_r+0x8fe>
 8009560:	4630      	mov	r0, r6
 8009562:	e7c2      	b.n	80094ea <_dtoa_r+0x982>
 8009564:	2301      	movs	r3, #1
 8009566:	e7e3      	b.n	8009530 <_dtoa_r+0x9c8>
 8009568:	9a00      	ldr	r2, [sp, #0]
 800956a:	2a00      	cmp	r2, #0
 800956c:	db04      	blt.n	8009578 <_dtoa_r+0xa10>
 800956e:	d125      	bne.n	80095bc <_dtoa_r+0xa54>
 8009570:	9a06      	ldr	r2, [sp, #24]
 8009572:	bb1a      	cbnz	r2, 80095bc <_dtoa_r+0xa54>
 8009574:	9a07      	ldr	r2, [sp, #28]
 8009576:	bb0a      	cbnz	r2, 80095bc <_dtoa_r+0xa54>
 8009578:	2b00      	cmp	r3, #0
 800957a:	ddec      	ble.n	8009556 <_dtoa_r+0x9ee>
 800957c:	2201      	movs	r2, #1
 800957e:	9904      	ldr	r1, [sp, #16]
 8009580:	4620      	mov	r0, r4
 8009582:	f000 faa1 	bl	8009ac8 <__lshift>
 8009586:	4639      	mov	r1, r7
 8009588:	9004      	str	r0, [sp, #16]
 800958a:	f000 faf1 	bl	8009b70 <__mcmp>
 800958e:	2800      	cmp	r0, #0
 8009590:	dc03      	bgt.n	800959a <_dtoa_r+0xa32>
 8009592:	d1e0      	bne.n	8009556 <_dtoa_r+0x9ee>
 8009594:	f018 0f01 	tst.w	r8, #1
 8009598:	d0dd      	beq.n	8009556 <_dtoa_r+0x9ee>
 800959a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800959e:	d1d8      	bne.n	8009552 <_dtoa_r+0x9ea>
 80095a0:	9b05      	ldr	r3, [sp, #20]
 80095a2:	9a05      	ldr	r2, [sp, #20]
 80095a4:	1c5d      	adds	r5, r3, #1
 80095a6:	2339      	movs	r3, #57	; 0x39
 80095a8:	7013      	strb	r3, [r2, #0]
 80095aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095ae:	2b39      	cmp	r3, #57	; 0x39
 80095b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80095b4:	d04f      	beq.n	8009656 <_dtoa_r+0xaee>
 80095b6:	3301      	adds	r3, #1
 80095b8:	7013      	strb	r3, [r2, #0]
 80095ba:	e754      	b.n	8009466 <_dtoa_r+0x8fe>
 80095bc:	9a05      	ldr	r2, [sp, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f102 0501 	add.w	r5, r2, #1
 80095c4:	dd06      	ble.n	80095d4 <_dtoa_r+0xa6c>
 80095c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80095ca:	d0e9      	beq.n	80095a0 <_dtoa_r+0xa38>
 80095cc:	f108 0801 	add.w	r8, r8, #1
 80095d0:	9b05      	ldr	r3, [sp, #20]
 80095d2:	e7c2      	b.n	800955a <_dtoa_r+0x9f2>
 80095d4:	9a02      	ldr	r2, [sp, #8]
 80095d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80095da:	eba5 030b 	sub.w	r3, r5, fp
 80095de:	4293      	cmp	r3, r2
 80095e0:	d021      	beq.n	8009626 <_dtoa_r+0xabe>
 80095e2:	2300      	movs	r3, #0
 80095e4:	220a      	movs	r2, #10
 80095e6:	9904      	ldr	r1, [sp, #16]
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 f8f7 	bl	80097dc <__multadd>
 80095ee:	45b1      	cmp	r9, r6
 80095f0:	9004      	str	r0, [sp, #16]
 80095f2:	f04f 0300 	mov.w	r3, #0
 80095f6:	f04f 020a 	mov.w	r2, #10
 80095fa:	4649      	mov	r1, r9
 80095fc:	4620      	mov	r0, r4
 80095fe:	d105      	bne.n	800960c <_dtoa_r+0xaa4>
 8009600:	f000 f8ec 	bl	80097dc <__multadd>
 8009604:	4681      	mov	r9, r0
 8009606:	4606      	mov	r6, r0
 8009608:	9505      	str	r5, [sp, #20]
 800960a:	e776      	b.n	80094fa <_dtoa_r+0x992>
 800960c:	f000 f8e6 	bl	80097dc <__multadd>
 8009610:	4631      	mov	r1, r6
 8009612:	4681      	mov	r9, r0
 8009614:	2300      	movs	r3, #0
 8009616:	220a      	movs	r2, #10
 8009618:	4620      	mov	r0, r4
 800961a:	f000 f8df 	bl	80097dc <__multadd>
 800961e:	4606      	mov	r6, r0
 8009620:	e7f2      	b.n	8009608 <_dtoa_r+0xaa0>
 8009622:	f04f 0900 	mov.w	r9, #0
 8009626:	2201      	movs	r2, #1
 8009628:	9904      	ldr	r1, [sp, #16]
 800962a:	4620      	mov	r0, r4
 800962c:	f000 fa4c 	bl	8009ac8 <__lshift>
 8009630:	4639      	mov	r1, r7
 8009632:	9004      	str	r0, [sp, #16]
 8009634:	f000 fa9c 	bl	8009b70 <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	dcb6      	bgt.n	80095aa <_dtoa_r+0xa42>
 800963c:	d102      	bne.n	8009644 <_dtoa_r+0xadc>
 800963e:	f018 0f01 	tst.w	r8, #1
 8009642:	d1b2      	bne.n	80095aa <_dtoa_r+0xa42>
 8009644:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009648:	2b30      	cmp	r3, #48	; 0x30
 800964a:	f105 32ff 	add.w	r2, r5, #4294967295
 800964e:	f47f af0a 	bne.w	8009466 <_dtoa_r+0x8fe>
 8009652:	4615      	mov	r5, r2
 8009654:	e7f6      	b.n	8009644 <_dtoa_r+0xadc>
 8009656:	4593      	cmp	fp, r2
 8009658:	d105      	bne.n	8009666 <_dtoa_r+0xafe>
 800965a:	2331      	movs	r3, #49	; 0x31
 800965c:	f10a 0a01 	add.w	sl, sl, #1
 8009660:	f88b 3000 	strb.w	r3, [fp]
 8009664:	e6ff      	b.n	8009466 <_dtoa_r+0x8fe>
 8009666:	4615      	mov	r5, r2
 8009668:	e79f      	b.n	80095aa <_dtoa_r+0xa42>
 800966a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80096d0 <_dtoa_r+0xb68>
 800966e:	e007      	b.n	8009680 <_dtoa_r+0xb18>
 8009670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009672:	f8df b060 	ldr.w	fp, [pc, #96]	; 80096d4 <_dtoa_r+0xb6c>
 8009676:	b11b      	cbz	r3, 8009680 <_dtoa_r+0xb18>
 8009678:	f10b 0308 	add.w	r3, fp, #8
 800967c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	4658      	mov	r0, fp
 8009682:	b017      	add	sp, #92	; 0x5c
 8009684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009688:	9b06      	ldr	r3, [sp, #24]
 800968a:	2b01      	cmp	r3, #1
 800968c:	f77f ae35 	ble.w	80092fa <_dtoa_r+0x792>
 8009690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009692:	9307      	str	r3, [sp, #28]
 8009694:	e649      	b.n	800932a <_dtoa_r+0x7c2>
 8009696:	9b02      	ldr	r3, [sp, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	dc03      	bgt.n	80096a4 <_dtoa_r+0xb3c>
 800969c:	9b06      	ldr	r3, [sp, #24]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	f73f aecc 	bgt.w	800943c <_dtoa_r+0x8d4>
 80096a4:	465d      	mov	r5, fp
 80096a6:	4639      	mov	r1, r7
 80096a8:	9804      	ldr	r0, [sp, #16]
 80096aa:	f7ff f9cf 	bl	8008a4c <quorem>
 80096ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80096b2:	f805 8b01 	strb.w	r8, [r5], #1
 80096b6:	9a02      	ldr	r2, [sp, #8]
 80096b8:	eba5 030b 	sub.w	r3, r5, fp
 80096bc:	429a      	cmp	r2, r3
 80096be:	ddb0      	ble.n	8009622 <_dtoa_r+0xaba>
 80096c0:	2300      	movs	r3, #0
 80096c2:	220a      	movs	r2, #10
 80096c4:	9904      	ldr	r1, [sp, #16]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f888 	bl	80097dc <__multadd>
 80096cc:	9004      	str	r0, [sp, #16]
 80096ce:	e7ea      	b.n	80096a6 <_dtoa_r+0xb3e>
 80096d0:	0800a240 	.word	0x0800a240
 80096d4:	0800a264 	.word	0x0800a264

080096d8 <__locale_ctype_ptr_l>:
 80096d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80096dc:	4770      	bx	lr
	...

080096e0 <_localeconv_r>:
 80096e0:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <_localeconv_r+0x14>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6a18      	ldr	r0, [r3, #32]
 80096e6:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <_localeconv_r+0x18>)
 80096e8:	2800      	cmp	r0, #0
 80096ea:	bf08      	it	eq
 80096ec:	4618      	moveq	r0, r3
 80096ee:	30f0      	adds	r0, #240	; 0xf0
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000014 	.word	0x20000014
 80096f8:	20000078 	.word	0x20000078

080096fc <malloc>:
 80096fc:	4b02      	ldr	r3, [pc, #8]	; (8009708 <malloc+0xc>)
 80096fe:	4601      	mov	r1, r0
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	f000 bb57 	b.w	8009db4 <_malloc_r>
 8009706:	bf00      	nop
 8009708:	20000014 	.word	0x20000014

0800970c <__ascii_mbtowc>:
 800970c:	b082      	sub	sp, #8
 800970e:	b901      	cbnz	r1, 8009712 <__ascii_mbtowc+0x6>
 8009710:	a901      	add	r1, sp, #4
 8009712:	b142      	cbz	r2, 8009726 <__ascii_mbtowc+0x1a>
 8009714:	b14b      	cbz	r3, 800972a <__ascii_mbtowc+0x1e>
 8009716:	7813      	ldrb	r3, [r2, #0]
 8009718:	600b      	str	r3, [r1, #0]
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	1c10      	adds	r0, r2, #0
 800971e:	bf18      	it	ne
 8009720:	2001      	movne	r0, #1
 8009722:	b002      	add	sp, #8
 8009724:	4770      	bx	lr
 8009726:	4610      	mov	r0, r2
 8009728:	e7fb      	b.n	8009722 <__ascii_mbtowc+0x16>
 800972a:	f06f 0001 	mvn.w	r0, #1
 800972e:	e7f8      	b.n	8009722 <__ascii_mbtowc+0x16>

08009730 <memcpy>:
 8009730:	b510      	push	{r4, lr}
 8009732:	1e43      	subs	r3, r0, #1
 8009734:	440a      	add	r2, r1
 8009736:	4291      	cmp	r1, r2
 8009738:	d100      	bne.n	800973c <memcpy+0xc>
 800973a:	bd10      	pop	{r4, pc}
 800973c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009744:	e7f7      	b.n	8009736 <memcpy+0x6>

08009746 <_Balloc>:
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800974a:	4604      	mov	r4, r0
 800974c:	460e      	mov	r6, r1
 800974e:	b93d      	cbnz	r5, 8009760 <_Balloc+0x1a>
 8009750:	2010      	movs	r0, #16
 8009752:	f7ff ffd3 	bl	80096fc <malloc>
 8009756:	6260      	str	r0, [r4, #36]	; 0x24
 8009758:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800975c:	6005      	str	r5, [r0, #0]
 800975e:	60c5      	str	r5, [r0, #12]
 8009760:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009762:	68eb      	ldr	r3, [r5, #12]
 8009764:	b183      	cbz	r3, 8009788 <_Balloc+0x42>
 8009766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800976e:	b9b8      	cbnz	r0, 80097a0 <_Balloc+0x5a>
 8009770:	2101      	movs	r1, #1
 8009772:	fa01 f506 	lsl.w	r5, r1, r6
 8009776:	1d6a      	adds	r2, r5, #5
 8009778:	0092      	lsls	r2, r2, #2
 800977a:	4620      	mov	r0, r4
 800977c:	f000 fabe 	bl	8009cfc <_calloc_r>
 8009780:	b160      	cbz	r0, 800979c <_Balloc+0x56>
 8009782:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009786:	e00e      	b.n	80097a6 <_Balloc+0x60>
 8009788:	2221      	movs	r2, #33	; 0x21
 800978a:	2104      	movs	r1, #4
 800978c:	4620      	mov	r0, r4
 800978e:	f000 fab5 	bl	8009cfc <_calloc_r>
 8009792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009794:	60e8      	str	r0, [r5, #12]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e4      	bne.n	8009766 <_Balloc+0x20>
 800979c:	2000      	movs	r0, #0
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	6802      	ldr	r2, [r0, #0]
 80097a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80097a6:	2300      	movs	r3, #0
 80097a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097ac:	e7f7      	b.n	800979e <_Balloc+0x58>

080097ae <_Bfree>:
 80097ae:	b570      	push	{r4, r5, r6, lr}
 80097b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097b2:	4606      	mov	r6, r0
 80097b4:	460d      	mov	r5, r1
 80097b6:	b93c      	cbnz	r4, 80097c8 <_Bfree+0x1a>
 80097b8:	2010      	movs	r0, #16
 80097ba:	f7ff ff9f 	bl	80096fc <malloc>
 80097be:	6270      	str	r0, [r6, #36]	; 0x24
 80097c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c4:	6004      	str	r4, [r0, #0]
 80097c6:	60c4      	str	r4, [r0, #12]
 80097c8:	b13d      	cbz	r5, 80097da <_Bfree+0x2c>
 80097ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097cc:	686a      	ldr	r2, [r5, #4]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097d4:	6029      	str	r1, [r5, #0]
 80097d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80097da:	bd70      	pop	{r4, r5, r6, pc}

080097dc <__multadd>:
 80097dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e0:	690d      	ldr	r5, [r1, #16]
 80097e2:	461f      	mov	r7, r3
 80097e4:	4606      	mov	r6, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	f101 0c14 	add.w	ip, r1, #20
 80097ec:	2300      	movs	r3, #0
 80097ee:	f8dc 0000 	ldr.w	r0, [ip]
 80097f2:	b281      	uxth	r1, r0
 80097f4:	fb02 7101 	mla	r1, r2, r1, r7
 80097f8:	0c0f      	lsrs	r7, r1, #16
 80097fa:	0c00      	lsrs	r0, r0, #16
 80097fc:	fb02 7000 	mla	r0, r2, r0, r7
 8009800:	b289      	uxth	r1, r1
 8009802:	3301      	adds	r3, #1
 8009804:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009808:	429d      	cmp	r5, r3
 800980a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800980e:	f84c 1b04 	str.w	r1, [ip], #4
 8009812:	dcec      	bgt.n	80097ee <__multadd+0x12>
 8009814:	b1d7      	cbz	r7, 800984c <__multadd+0x70>
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	42ab      	cmp	r3, r5
 800981a:	dc12      	bgt.n	8009842 <__multadd+0x66>
 800981c:	6861      	ldr	r1, [r4, #4]
 800981e:	4630      	mov	r0, r6
 8009820:	3101      	adds	r1, #1
 8009822:	f7ff ff90 	bl	8009746 <_Balloc>
 8009826:	6922      	ldr	r2, [r4, #16]
 8009828:	3202      	adds	r2, #2
 800982a:	f104 010c 	add.w	r1, r4, #12
 800982e:	4680      	mov	r8, r0
 8009830:	0092      	lsls	r2, r2, #2
 8009832:	300c      	adds	r0, #12
 8009834:	f7ff ff7c 	bl	8009730 <memcpy>
 8009838:	4621      	mov	r1, r4
 800983a:	4630      	mov	r0, r6
 800983c:	f7ff ffb7 	bl	80097ae <_Bfree>
 8009840:	4644      	mov	r4, r8
 8009842:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009846:	3501      	adds	r5, #1
 8009848:	615f      	str	r7, [r3, #20]
 800984a:	6125      	str	r5, [r4, #16]
 800984c:	4620      	mov	r0, r4
 800984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009852 <__hi0bits>:
 8009852:	0c02      	lsrs	r2, r0, #16
 8009854:	0412      	lsls	r2, r2, #16
 8009856:	4603      	mov	r3, r0
 8009858:	b9b2      	cbnz	r2, 8009888 <__hi0bits+0x36>
 800985a:	0403      	lsls	r3, r0, #16
 800985c:	2010      	movs	r0, #16
 800985e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009862:	bf04      	itt	eq
 8009864:	021b      	lsleq	r3, r3, #8
 8009866:	3008      	addeq	r0, #8
 8009868:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800986c:	bf04      	itt	eq
 800986e:	011b      	lsleq	r3, r3, #4
 8009870:	3004      	addeq	r0, #4
 8009872:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009876:	bf04      	itt	eq
 8009878:	009b      	lsleq	r3, r3, #2
 800987a:	3002      	addeq	r0, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	db06      	blt.n	800988e <__hi0bits+0x3c>
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	d503      	bpl.n	800988c <__hi0bits+0x3a>
 8009884:	3001      	adds	r0, #1
 8009886:	4770      	bx	lr
 8009888:	2000      	movs	r0, #0
 800988a:	e7e8      	b.n	800985e <__hi0bits+0xc>
 800988c:	2020      	movs	r0, #32
 800988e:	4770      	bx	lr

08009890 <__lo0bits>:
 8009890:	6803      	ldr	r3, [r0, #0]
 8009892:	f013 0207 	ands.w	r2, r3, #7
 8009896:	4601      	mov	r1, r0
 8009898:	d00b      	beq.n	80098b2 <__lo0bits+0x22>
 800989a:	07da      	lsls	r2, r3, #31
 800989c:	d423      	bmi.n	80098e6 <__lo0bits+0x56>
 800989e:	0798      	lsls	r0, r3, #30
 80098a0:	bf49      	itett	mi
 80098a2:	085b      	lsrmi	r3, r3, #1
 80098a4:	089b      	lsrpl	r3, r3, #2
 80098a6:	2001      	movmi	r0, #1
 80098a8:	600b      	strmi	r3, [r1, #0]
 80098aa:	bf5c      	itt	pl
 80098ac:	600b      	strpl	r3, [r1, #0]
 80098ae:	2002      	movpl	r0, #2
 80098b0:	4770      	bx	lr
 80098b2:	b298      	uxth	r0, r3
 80098b4:	b9a8      	cbnz	r0, 80098e2 <__lo0bits+0x52>
 80098b6:	0c1b      	lsrs	r3, r3, #16
 80098b8:	2010      	movs	r0, #16
 80098ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098be:	bf04      	itt	eq
 80098c0:	0a1b      	lsreq	r3, r3, #8
 80098c2:	3008      	addeq	r0, #8
 80098c4:	071a      	lsls	r2, r3, #28
 80098c6:	bf04      	itt	eq
 80098c8:	091b      	lsreq	r3, r3, #4
 80098ca:	3004      	addeq	r0, #4
 80098cc:	079a      	lsls	r2, r3, #30
 80098ce:	bf04      	itt	eq
 80098d0:	089b      	lsreq	r3, r3, #2
 80098d2:	3002      	addeq	r0, #2
 80098d4:	07da      	lsls	r2, r3, #31
 80098d6:	d402      	bmi.n	80098de <__lo0bits+0x4e>
 80098d8:	085b      	lsrs	r3, r3, #1
 80098da:	d006      	beq.n	80098ea <__lo0bits+0x5a>
 80098dc:	3001      	adds	r0, #1
 80098de:	600b      	str	r3, [r1, #0]
 80098e0:	4770      	bx	lr
 80098e2:	4610      	mov	r0, r2
 80098e4:	e7e9      	b.n	80098ba <__lo0bits+0x2a>
 80098e6:	2000      	movs	r0, #0
 80098e8:	4770      	bx	lr
 80098ea:	2020      	movs	r0, #32
 80098ec:	4770      	bx	lr

080098ee <__i2b>:
 80098ee:	b510      	push	{r4, lr}
 80098f0:	460c      	mov	r4, r1
 80098f2:	2101      	movs	r1, #1
 80098f4:	f7ff ff27 	bl	8009746 <_Balloc>
 80098f8:	2201      	movs	r2, #1
 80098fa:	6144      	str	r4, [r0, #20]
 80098fc:	6102      	str	r2, [r0, #16]
 80098fe:	bd10      	pop	{r4, pc}

08009900 <__multiply>:
 8009900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	4614      	mov	r4, r2
 8009906:	690a      	ldr	r2, [r1, #16]
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	429a      	cmp	r2, r3
 800990c:	bfb8      	it	lt
 800990e:	460b      	movlt	r3, r1
 8009910:	4688      	mov	r8, r1
 8009912:	bfbc      	itt	lt
 8009914:	46a0      	movlt	r8, r4
 8009916:	461c      	movlt	r4, r3
 8009918:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800991c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009920:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009928:	eb07 0609 	add.w	r6, r7, r9
 800992c:	42b3      	cmp	r3, r6
 800992e:	bfb8      	it	lt
 8009930:	3101      	addlt	r1, #1
 8009932:	f7ff ff08 	bl	8009746 <_Balloc>
 8009936:	f100 0514 	add.w	r5, r0, #20
 800993a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800993e:	462b      	mov	r3, r5
 8009940:	2200      	movs	r2, #0
 8009942:	4573      	cmp	r3, lr
 8009944:	d316      	bcc.n	8009974 <__multiply+0x74>
 8009946:	f104 0214 	add.w	r2, r4, #20
 800994a:	f108 0114 	add.w	r1, r8, #20
 800994e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009952:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	9b00      	ldr	r3, [sp, #0]
 800995a:	9201      	str	r2, [sp, #4]
 800995c:	4293      	cmp	r3, r2
 800995e:	d80c      	bhi.n	800997a <__multiply+0x7a>
 8009960:	2e00      	cmp	r6, #0
 8009962:	dd03      	ble.n	800996c <__multiply+0x6c>
 8009964:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009968:	2b00      	cmp	r3, #0
 800996a:	d05d      	beq.n	8009a28 <__multiply+0x128>
 800996c:	6106      	str	r6, [r0, #16]
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	f843 2b04 	str.w	r2, [r3], #4
 8009978:	e7e3      	b.n	8009942 <__multiply+0x42>
 800997a:	f8b2 b000 	ldrh.w	fp, [r2]
 800997e:	f1bb 0f00 	cmp.w	fp, #0
 8009982:	d023      	beq.n	80099cc <__multiply+0xcc>
 8009984:	4689      	mov	r9, r1
 8009986:	46ac      	mov	ip, r5
 8009988:	f04f 0800 	mov.w	r8, #0
 800998c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009990:	f8dc a000 	ldr.w	sl, [ip]
 8009994:	b2a3      	uxth	r3, r4
 8009996:	fa1f fa8a 	uxth.w	sl, sl
 800999a:	fb0b a303 	mla	r3, fp, r3, sl
 800999e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099a2:	f8dc 4000 	ldr.w	r4, [ip]
 80099a6:	4443      	add	r3, r8
 80099a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099ac:	fb0b 840a 	mla	r4, fp, sl, r8
 80099b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80099b4:	46e2      	mov	sl, ip
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099bc:	454f      	cmp	r7, r9
 80099be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099c2:	f84a 3b04 	str.w	r3, [sl], #4
 80099c6:	d82b      	bhi.n	8009a20 <__multiply+0x120>
 80099c8:	f8cc 8004 	str.w	r8, [ip, #4]
 80099cc:	9b01      	ldr	r3, [sp, #4]
 80099ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80099d2:	3204      	adds	r2, #4
 80099d4:	f1ba 0f00 	cmp.w	sl, #0
 80099d8:	d020      	beq.n	8009a1c <__multiply+0x11c>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	4689      	mov	r9, r1
 80099de:	46a8      	mov	r8, r5
 80099e0:	f04f 0b00 	mov.w	fp, #0
 80099e4:	f8b9 c000 	ldrh.w	ip, [r9]
 80099e8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80099ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80099f0:	445c      	add	r4, fp
 80099f2:	46c4      	mov	ip, r8
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099fa:	f84c 3b04 	str.w	r3, [ip], #4
 80099fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a02:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009a06:	0c1b      	lsrs	r3, r3, #16
 8009a08:	fb0a b303 	mla	r3, sl, r3, fp
 8009a0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a10:	454f      	cmp	r7, r9
 8009a12:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009a16:	d805      	bhi.n	8009a24 <__multiply+0x124>
 8009a18:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a1c:	3504      	adds	r5, #4
 8009a1e:	e79b      	b.n	8009958 <__multiply+0x58>
 8009a20:	46d4      	mov	ip, sl
 8009a22:	e7b3      	b.n	800998c <__multiply+0x8c>
 8009a24:	46e0      	mov	r8, ip
 8009a26:	e7dd      	b.n	80099e4 <__multiply+0xe4>
 8009a28:	3e01      	subs	r6, #1
 8009a2a:	e799      	b.n	8009960 <__multiply+0x60>

08009a2c <__pow5mult>:
 8009a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a30:	4615      	mov	r5, r2
 8009a32:	f012 0203 	ands.w	r2, r2, #3
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	d007      	beq.n	8009a4c <__pow5mult+0x20>
 8009a3c:	3a01      	subs	r2, #1
 8009a3e:	4c21      	ldr	r4, [pc, #132]	; (8009ac4 <__pow5mult+0x98>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a46:	f7ff fec9 	bl	80097dc <__multadd>
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	10ad      	asrs	r5, r5, #2
 8009a4e:	d035      	beq.n	8009abc <__pow5mult+0x90>
 8009a50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a52:	b93c      	cbnz	r4, 8009a64 <__pow5mult+0x38>
 8009a54:	2010      	movs	r0, #16
 8009a56:	f7ff fe51 	bl	80096fc <malloc>
 8009a5a:	6270      	str	r0, [r6, #36]	; 0x24
 8009a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a60:	6004      	str	r4, [r0, #0]
 8009a62:	60c4      	str	r4, [r0, #12]
 8009a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a6c:	b94c      	cbnz	r4, 8009a82 <__pow5mult+0x56>
 8009a6e:	f240 2171 	movw	r1, #625	; 0x271
 8009a72:	4630      	mov	r0, r6
 8009a74:	f7ff ff3b 	bl	80098ee <__i2b>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a7e:	4604      	mov	r4, r0
 8009a80:	6003      	str	r3, [r0, #0]
 8009a82:	f04f 0800 	mov.w	r8, #0
 8009a86:	07eb      	lsls	r3, r5, #31
 8009a88:	d50a      	bpl.n	8009aa0 <__pow5mult+0x74>
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ff36 	bl	8009900 <__multiply>
 8009a94:	4639      	mov	r1, r7
 8009a96:	4681      	mov	r9, r0
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff fe88 	bl	80097ae <_Bfree>
 8009a9e:	464f      	mov	r7, r9
 8009aa0:	106d      	asrs	r5, r5, #1
 8009aa2:	d00b      	beq.n	8009abc <__pow5mult+0x90>
 8009aa4:	6820      	ldr	r0, [r4, #0]
 8009aa6:	b938      	cbnz	r0, 8009ab8 <__pow5mult+0x8c>
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7ff ff27 	bl	8009900 <__multiply>
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	f8c0 8000 	str.w	r8, [r0]
 8009ab8:	4604      	mov	r4, r0
 8009aba:	e7e4      	b.n	8009a86 <__pow5mult+0x5a>
 8009abc:	4638      	mov	r0, r7
 8009abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac2:	bf00      	nop
 8009ac4:	0800a370 	.word	0x0800a370

08009ac8 <__lshift>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	460c      	mov	r4, r1
 8009ace:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	6849      	ldr	r1, [r1, #4]
 8009ad6:	eb0a 0903 	add.w	r9, sl, r3
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	4607      	mov	r7, r0
 8009ade:	4616      	mov	r6, r2
 8009ae0:	f109 0501 	add.w	r5, r9, #1
 8009ae4:	42ab      	cmp	r3, r5
 8009ae6:	db32      	blt.n	8009b4e <__lshift+0x86>
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7ff fe2c 	bl	8009746 <_Balloc>
 8009aee:	2300      	movs	r3, #0
 8009af0:	4680      	mov	r8, r0
 8009af2:	f100 0114 	add.w	r1, r0, #20
 8009af6:	461a      	mov	r2, r3
 8009af8:	4553      	cmp	r3, sl
 8009afa:	db2b      	blt.n	8009b54 <__lshift+0x8c>
 8009afc:	6920      	ldr	r0, [r4, #16]
 8009afe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b02:	f104 0314 	add.w	r3, r4, #20
 8009b06:	f016 021f 	ands.w	r2, r6, #31
 8009b0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b12:	d025      	beq.n	8009b60 <__lshift+0x98>
 8009b14:	f1c2 0e20 	rsb	lr, r2, #32
 8009b18:	2000      	movs	r0, #0
 8009b1a:	681e      	ldr	r6, [r3, #0]
 8009b1c:	468a      	mov	sl, r1
 8009b1e:	4096      	lsls	r6, r2
 8009b20:	4330      	orrs	r0, r6
 8009b22:	f84a 0b04 	str.w	r0, [sl], #4
 8009b26:	f853 0b04 	ldr.w	r0, [r3], #4
 8009b2a:	459c      	cmp	ip, r3
 8009b2c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009b30:	d814      	bhi.n	8009b5c <__lshift+0x94>
 8009b32:	6048      	str	r0, [r1, #4]
 8009b34:	b108      	cbz	r0, 8009b3a <__lshift+0x72>
 8009b36:	f109 0502 	add.w	r5, r9, #2
 8009b3a:	3d01      	subs	r5, #1
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b42:	4621      	mov	r1, r4
 8009b44:	f7ff fe33 	bl	80097ae <_Bfree>
 8009b48:	4640      	mov	r0, r8
 8009b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4e:	3101      	adds	r1, #1
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	e7c7      	b.n	8009ae4 <__lshift+0x1c>
 8009b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	e7cd      	b.n	8009af8 <__lshift+0x30>
 8009b5c:	4651      	mov	r1, sl
 8009b5e:	e7dc      	b.n	8009b1a <__lshift+0x52>
 8009b60:	3904      	subs	r1, #4
 8009b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b66:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b6a:	459c      	cmp	ip, r3
 8009b6c:	d8f9      	bhi.n	8009b62 <__lshift+0x9a>
 8009b6e:	e7e4      	b.n	8009b3a <__lshift+0x72>

08009b70 <__mcmp>:
 8009b70:	6903      	ldr	r3, [r0, #16]
 8009b72:	690a      	ldr	r2, [r1, #16]
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	b530      	push	{r4, r5, lr}
 8009b78:	d10c      	bne.n	8009b94 <__mcmp+0x24>
 8009b7a:	0092      	lsls	r2, r2, #2
 8009b7c:	3014      	adds	r0, #20
 8009b7e:	3114      	adds	r1, #20
 8009b80:	1884      	adds	r4, r0, r2
 8009b82:	4411      	add	r1, r2
 8009b84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b8c:	4295      	cmp	r5, r2
 8009b8e:	d003      	beq.n	8009b98 <__mcmp+0x28>
 8009b90:	d305      	bcc.n	8009b9e <__mcmp+0x2e>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4618      	mov	r0, r3
 8009b96:	bd30      	pop	{r4, r5, pc}
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d3f3      	bcc.n	8009b84 <__mcmp+0x14>
 8009b9c:	e7fa      	b.n	8009b94 <__mcmp+0x24>
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	e7f7      	b.n	8009b94 <__mcmp+0x24>

08009ba4 <__mdiff>:
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	460d      	mov	r5, r1
 8009baa:	4607      	mov	r7, r0
 8009bac:	4611      	mov	r1, r2
 8009bae:	4628      	mov	r0, r5
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	f7ff ffdd 	bl	8009b70 <__mcmp>
 8009bb6:	1e06      	subs	r6, r0, #0
 8009bb8:	d108      	bne.n	8009bcc <__mdiff+0x28>
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff fdc2 	bl	8009746 <_Balloc>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bcc:	bfa4      	itt	ge
 8009bce:	4623      	movge	r3, r4
 8009bd0:	462c      	movge	r4, r5
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	6861      	ldr	r1, [r4, #4]
 8009bd6:	bfa6      	itte	ge
 8009bd8:	461d      	movge	r5, r3
 8009bda:	2600      	movge	r6, #0
 8009bdc:	2601      	movlt	r6, #1
 8009bde:	f7ff fdb2 	bl	8009746 <_Balloc>
 8009be2:	692b      	ldr	r3, [r5, #16]
 8009be4:	60c6      	str	r6, [r0, #12]
 8009be6:	6926      	ldr	r6, [r4, #16]
 8009be8:	f105 0914 	add.w	r9, r5, #20
 8009bec:	f104 0214 	add.w	r2, r4, #20
 8009bf0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009bf4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009bf8:	f100 0514 	add.w	r5, r0, #20
 8009bfc:	f04f 0e00 	mov.w	lr, #0
 8009c00:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c04:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c08:	fa1e f18a 	uxtah	r1, lr, sl
 8009c0c:	b2a3      	uxth	r3, r4
 8009c0e:	1ac9      	subs	r1, r1, r3
 8009c10:	0c23      	lsrs	r3, r4, #16
 8009c12:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009c16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009c1a:	b289      	uxth	r1, r1
 8009c1c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009c20:	45c8      	cmp	r8, r9
 8009c22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c26:	4694      	mov	ip, r2
 8009c28:	f845 3b04 	str.w	r3, [r5], #4
 8009c2c:	d8e8      	bhi.n	8009c00 <__mdiff+0x5c>
 8009c2e:	45bc      	cmp	ip, r7
 8009c30:	d304      	bcc.n	8009c3c <__mdiff+0x98>
 8009c32:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009c36:	b183      	cbz	r3, 8009c5a <__mdiff+0xb6>
 8009c38:	6106      	str	r6, [r0, #16]
 8009c3a:	e7c5      	b.n	8009bc8 <__mdiff+0x24>
 8009c3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c40:	fa1e f381 	uxtah	r3, lr, r1
 8009c44:	141a      	asrs	r2, r3, #16
 8009c46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009c54:	f845 3b04 	str.w	r3, [r5], #4
 8009c58:	e7e9      	b.n	8009c2e <__mdiff+0x8a>
 8009c5a:	3e01      	subs	r6, #1
 8009c5c:	e7e9      	b.n	8009c32 <__mdiff+0x8e>

08009c5e <__d2b>:
 8009c5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c62:	460e      	mov	r6, r1
 8009c64:	2101      	movs	r1, #1
 8009c66:	ec59 8b10 	vmov	r8, r9, d0
 8009c6a:	4615      	mov	r5, r2
 8009c6c:	f7ff fd6b 	bl	8009746 <_Balloc>
 8009c70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009c74:	4607      	mov	r7, r0
 8009c76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c7a:	bb34      	cbnz	r4, 8009cca <__d2b+0x6c>
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	f1b8 0300 	subs.w	r3, r8, #0
 8009c82:	d027      	beq.n	8009cd4 <__d2b+0x76>
 8009c84:	a802      	add	r0, sp, #8
 8009c86:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009c8a:	f7ff fe01 	bl	8009890 <__lo0bits>
 8009c8e:	9900      	ldr	r1, [sp, #0]
 8009c90:	b1f0      	cbz	r0, 8009cd0 <__d2b+0x72>
 8009c92:	9a01      	ldr	r2, [sp, #4]
 8009c94:	f1c0 0320 	rsb	r3, r0, #32
 8009c98:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	40c2      	lsrs	r2, r0
 8009ca0:	617b      	str	r3, [r7, #20]
 8009ca2:	9201      	str	r2, [sp, #4]
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	61bb      	str	r3, [r7, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bf14      	ite	ne
 8009cac:	2102      	movne	r1, #2
 8009cae:	2101      	moveq	r1, #1
 8009cb0:	6139      	str	r1, [r7, #16]
 8009cb2:	b1c4      	cbz	r4, 8009ce6 <__d2b+0x88>
 8009cb4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009cb8:	4404      	add	r4, r0
 8009cba:	6034      	str	r4, [r6, #0]
 8009cbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cc0:	6028      	str	r0, [r5, #0]
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	b003      	add	sp, #12
 8009cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cce:	e7d5      	b.n	8009c7c <__d2b+0x1e>
 8009cd0:	6179      	str	r1, [r7, #20]
 8009cd2:	e7e7      	b.n	8009ca4 <__d2b+0x46>
 8009cd4:	a801      	add	r0, sp, #4
 8009cd6:	f7ff fddb 	bl	8009890 <__lo0bits>
 8009cda:	9b01      	ldr	r3, [sp, #4]
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	2101      	movs	r1, #1
 8009ce0:	6139      	str	r1, [r7, #16]
 8009ce2:	3020      	adds	r0, #32
 8009ce4:	e7e5      	b.n	8009cb2 <__d2b+0x54>
 8009ce6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009cea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cee:	6030      	str	r0, [r6, #0]
 8009cf0:	6918      	ldr	r0, [r3, #16]
 8009cf2:	f7ff fdae 	bl	8009852 <__hi0bits>
 8009cf6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009cfa:	e7e1      	b.n	8009cc0 <__d2b+0x62>

08009cfc <_calloc_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	fb02 f401 	mul.w	r4, r2, r1
 8009d02:	4621      	mov	r1, r4
 8009d04:	f000 f856 	bl	8009db4 <_malloc_r>
 8009d08:	4605      	mov	r5, r0
 8009d0a:	b118      	cbz	r0, 8009d14 <_calloc_r+0x18>
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	2100      	movs	r1, #0
 8009d10:	f7fe f986 	bl	8008020 <memset>
 8009d14:	4628      	mov	r0, r5
 8009d16:	bd38      	pop	{r3, r4, r5, pc}

08009d18 <_free_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	d045      	beq.n	8009dac <_free_r+0x94>
 8009d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d24:	1f0c      	subs	r4, r1, #4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bfb8      	it	lt
 8009d2a:	18e4      	addlt	r4, r4, r3
 8009d2c:	f000 fa24 	bl	800a178 <__malloc_lock>
 8009d30:	4a1f      	ldr	r2, [pc, #124]	; (8009db0 <_free_r+0x98>)
 8009d32:	6813      	ldr	r3, [r2, #0]
 8009d34:	4610      	mov	r0, r2
 8009d36:	b933      	cbnz	r3, 8009d46 <_free_r+0x2e>
 8009d38:	6063      	str	r3, [r4, #4]
 8009d3a:	6014      	str	r4, [r2, #0]
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d42:	f000 ba1a 	b.w	800a17a <__malloc_unlock>
 8009d46:	42a3      	cmp	r3, r4
 8009d48:	d90c      	bls.n	8009d64 <_free_r+0x4c>
 8009d4a:	6821      	ldr	r1, [r4, #0]
 8009d4c:	1862      	adds	r2, r4, r1
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	bf04      	itt	eq
 8009d52:	681a      	ldreq	r2, [r3, #0]
 8009d54:	685b      	ldreq	r3, [r3, #4]
 8009d56:	6063      	str	r3, [r4, #4]
 8009d58:	bf04      	itt	eq
 8009d5a:	1852      	addeq	r2, r2, r1
 8009d5c:	6022      	streq	r2, [r4, #0]
 8009d5e:	6004      	str	r4, [r0, #0]
 8009d60:	e7ec      	b.n	8009d3c <_free_r+0x24>
 8009d62:	4613      	mov	r3, r2
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	b10a      	cbz	r2, 8009d6c <_free_r+0x54>
 8009d68:	42a2      	cmp	r2, r4
 8009d6a:	d9fa      	bls.n	8009d62 <_free_r+0x4a>
 8009d6c:	6819      	ldr	r1, [r3, #0]
 8009d6e:	1858      	adds	r0, r3, r1
 8009d70:	42a0      	cmp	r0, r4
 8009d72:	d10b      	bne.n	8009d8c <_free_r+0x74>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	4401      	add	r1, r0
 8009d78:	1858      	adds	r0, r3, r1
 8009d7a:	4282      	cmp	r2, r0
 8009d7c:	6019      	str	r1, [r3, #0]
 8009d7e:	d1dd      	bne.n	8009d3c <_free_r+0x24>
 8009d80:	6810      	ldr	r0, [r2, #0]
 8009d82:	6852      	ldr	r2, [r2, #4]
 8009d84:	605a      	str	r2, [r3, #4]
 8009d86:	4401      	add	r1, r0
 8009d88:	6019      	str	r1, [r3, #0]
 8009d8a:	e7d7      	b.n	8009d3c <_free_r+0x24>
 8009d8c:	d902      	bls.n	8009d94 <_free_r+0x7c>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	602b      	str	r3, [r5, #0]
 8009d92:	e7d3      	b.n	8009d3c <_free_r+0x24>
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	1821      	adds	r1, r4, r0
 8009d98:	428a      	cmp	r2, r1
 8009d9a:	bf04      	itt	eq
 8009d9c:	6811      	ldreq	r1, [r2, #0]
 8009d9e:	6852      	ldreq	r2, [r2, #4]
 8009da0:	6062      	str	r2, [r4, #4]
 8009da2:	bf04      	itt	eq
 8009da4:	1809      	addeq	r1, r1, r0
 8009da6:	6021      	streq	r1, [r4, #0]
 8009da8:	605c      	str	r4, [r3, #4]
 8009daa:	e7c7      	b.n	8009d3c <_free_r+0x24>
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
 8009dae:	bf00      	nop
 8009db0:	200002f8 	.word	0x200002f8

08009db4 <_malloc_r>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	1ccd      	adds	r5, r1, #3
 8009db8:	f025 0503 	bic.w	r5, r5, #3
 8009dbc:	3508      	adds	r5, #8
 8009dbe:	2d0c      	cmp	r5, #12
 8009dc0:	bf38      	it	cc
 8009dc2:	250c      	movcc	r5, #12
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	db01      	blt.n	8009dce <_malloc_r+0x1a>
 8009dca:	42a9      	cmp	r1, r5
 8009dcc:	d903      	bls.n	8009dd6 <_malloc_r+0x22>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	6033      	str	r3, [r6, #0]
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
 8009dd6:	f000 f9cf 	bl	800a178 <__malloc_lock>
 8009dda:	4a21      	ldr	r2, [pc, #132]	; (8009e60 <_malloc_r+0xac>)
 8009ddc:	6814      	ldr	r4, [r2, #0]
 8009dde:	4621      	mov	r1, r4
 8009de0:	b991      	cbnz	r1, 8009e08 <_malloc_r+0x54>
 8009de2:	4c20      	ldr	r4, [pc, #128]	; (8009e64 <_malloc_r+0xb0>)
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	b91b      	cbnz	r3, 8009df0 <_malloc_r+0x3c>
 8009de8:	4630      	mov	r0, r6
 8009dea:	f000 f98f 	bl	800a10c <_sbrk_r>
 8009dee:	6020      	str	r0, [r4, #0]
 8009df0:	4629      	mov	r1, r5
 8009df2:	4630      	mov	r0, r6
 8009df4:	f000 f98a 	bl	800a10c <_sbrk_r>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d124      	bne.n	8009e46 <_malloc_r+0x92>
 8009dfc:	230c      	movs	r3, #12
 8009dfe:	6033      	str	r3, [r6, #0]
 8009e00:	4630      	mov	r0, r6
 8009e02:	f000 f9ba 	bl	800a17a <__malloc_unlock>
 8009e06:	e7e4      	b.n	8009dd2 <_malloc_r+0x1e>
 8009e08:	680b      	ldr	r3, [r1, #0]
 8009e0a:	1b5b      	subs	r3, r3, r5
 8009e0c:	d418      	bmi.n	8009e40 <_malloc_r+0x8c>
 8009e0e:	2b0b      	cmp	r3, #11
 8009e10:	d90f      	bls.n	8009e32 <_malloc_r+0x7e>
 8009e12:	600b      	str	r3, [r1, #0]
 8009e14:	50cd      	str	r5, [r1, r3]
 8009e16:	18cc      	adds	r4, r1, r3
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f000 f9ae 	bl	800a17a <__malloc_unlock>
 8009e1e:	f104 000b 	add.w	r0, r4, #11
 8009e22:	1d23      	adds	r3, r4, #4
 8009e24:	f020 0007 	bic.w	r0, r0, #7
 8009e28:	1ac3      	subs	r3, r0, r3
 8009e2a:	d0d3      	beq.n	8009dd4 <_malloc_r+0x20>
 8009e2c:	425a      	negs	r2, r3
 8009e2e:	50e2      	str	r2, [r4, r3]
 8009e30:	e7d0      	b.n	8009dd4 <_malloc_r+0x20>
 8009e32:	428c      	cmp	r4, r1
 8009e34:	684b      	ldr	r3, [r1, #4]
 8009e36:	bf16      	itet	ne
 8009e38:	6063      	strne	r3, [r4, #4]
 8009e3a:	6013      	streq	r3, [r2, #0]
 8009e3c:	460c      	movne	r4, r1
 8009e3e:	e7eb      	b.n	8009e18 <_malloc_r+0x64>
 8009e40:	460c      	mov	r4, r1
 8009e42:	6849      	ldr	r1, [r1, #4]
 8009e44:	e7cc      	b.n	8009de0 <_malloc_r+0x2c>
 8009e46:	1cc4      	adds	r4, r0, #3
 8009e48:	f024 0403 	bic.w	r4, r4, #3
 8009e4c:	42a0      	cmp	r0, r4
 8009e4e:	d005      	beq.n	8009e5c <_malloc_r+0xa8>
 8009e50:	1a21      	subs	r1, r4, r0
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f95a 	bl	800a10c <_sbrk_r>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d0cf      	beq.n	8009dfc <_malloc_r+0x48>
 8009e5c:	6025      	str	r5, [r4, #0]
 8009e5e:	e7db      	b.n	8009e18 <_malloc_r+0x64>
 8009e60:	200002f8 	.word	0x200002f8
 8009e64:	200002fc 	.word	0x200002fc

08009e68 <__ssputs_r>:
 8009e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	688e      	ldr	r6, [r1, #8]
 8009e6e:	429e      	cmp	r6, r3
 8009e70:	4682      	mov	sl, r0
 8009e72:	460c      	mov	r4, r1
 8009e74:	4690      	mov	r8, r2
 8009e76:	4699      	mov	r9, r3
 8009e78:	d837      	bhi.n	8009eea <__ssputs_r+0x82>
 8009e7a:	898a      	ldrh	r2, [r1, #12]
 8009e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e80:	d031      	beq.n	8009ee6 <__ssputs_r+0x7e>
 8009e82:	6825      	ldr	r5, [r4, #0]
 8009e84:	6909      	ldr	r1, [r1, #16]
 8009e86:	1a6f      	subs	r7, r5, r1
 8009e88:	6965      	ldr	r5, [r4, #20]
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e90:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e94:	f109 0301 	add.w	r3, r9, #1
 8009e98:	443b      	add	r3, r7
 8009e9a:	429d      	cmp	r5, r3
 8009e9c:	bf38      	it	cc
 8009e9e:	461d      	movcc	r5, r3
 8009ea0:	0553      	lsls	r3, r2, #21
 8009ea2:	d530      	bpl.n	8009f06 <__ssputs_r+0x9e>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	f7ff ff85 	bl	8009db4 <_malloc_r>
 8009eaa:	4606      	mov	r6, r0
 8009eac:	b950      	cbnz	r0, 8009ec4 <__ssputs_r+0x5c>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	f8ca 3000 	str.w	r3, [sl]
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec4:	463a      	mov	r2, r7
 8009ec6:	6921      	ldr	r1, [r4, #16]
 8009ec8:	f7ff fc32 	bl	8009730 <memcpy>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	6126      	str	r6, [r4, #16]
 8009eda:	6165      	str	r5, [r4, #20]
 8009edc:	443e      	add	r6, r7
 8009ede:	1bed      	subs	r5, r5, r7
 8009ee0:	6026      	str	r6, [r4, #0]
 8009ee2:	60a5      	str	r5, [r4, #8]
 8009ee4:	464e      	mov	r6, r9
 8009ee6:	454e      	cmp	r6, r9
 8009ee8:	d900      	bls.n	8009eec <__ssputs_r+0x84>
 8009eea:	464e      	mov	r6, r9
 8009eec:	4632      	mov	r2, r6
 8009eee:	4641      	mov	r1, r8
 8009ef0:	6820      	ldr	r0, [r4, #0]
 8009ef2:	f000 f928 	bl	800a146 <memmove>
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	1b9b      	subs	r3, r3, r6
 8009efa:	60a3      	str	r3, [r4, #8]
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	441e      	add	r6, r3
 8009f00:	6026      	str	r6, [r4, #0]
 8009f02:	2000      	movs	r0, #0
 8009f04:	e7dc      	b.n	8009ec0 <__ssputs_r+0x58>
 8009f06:	462a      	mov	r2, r5
 8009f08:	f000 f938 	bl	800a17c <_realloc_r>
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d1e2      	bne.n	8009ed8 <__ssputs_r+0x70>
 8009f12:	6921      	ldr	r1, [r4, #16]
 8009f14:	4650      	mov	r0, sl
 8009f16:	f7ff feff 	bl	8009d18 <_free_r>
 8009f1a:	e7c8      	b.n	8009eae <__ssputs_r+0x46>

08009f1c <_svfiprintf_r>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	461d      	mov	r5, r3
 8009f22:	898b      	ldrh	r3, [r1, #12]
 8009f24:	061f      	lsls	r7, r3, #24
 8009f26:	b09d      	sub	sp, #116	; 0x74
 8009f28:	4680      	mov	r8, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	d50f      	bpl.n	8009f50 <_svfiprintf_r+0x34>
 8009f30:	690b      	ldr	r3, [r1, #16]
 8009f32:	b96b      	cbnz	r3, 8009f50 <_svfiprintf_r+0x34>
 8009f34:	2140      	movs	r1, #64	; 0x40
 8009f36:	f7ff ff3d 	bl	8009db4 <_malloc_r>
 8009f3a:	6020      	str	r0, [r4, #0]
 8009f3c:	6120      	str	r0, [r4, #16]
 8009f3e:	b928      	cbnz	r0, 8009f4c <_svfiprintf_r+0x30>
 8009f40:	230c      	movs	r3, #12
 8009f42:	f8c8 3000 	str.w	r3, [r8]
 8009f46:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4a:	e0c8      	b.n	800a0de <_svfiprintf_r+0x1c2>
 8009f4c:	2340      	movs	r3, #64	; 0x40
 8009f4e:	6163      	str	r3, [r4, #20]
 8009f50:	2300      	movs	r3, #0
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	2320      	movs	r3, #32
 8009f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5a:	2330      	movs	r3, #48	; 0x30
 8009f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f60:	9503      	str	r5, [sp, #12]
 8009f62:	f04f 0b01 	mov.w	fp, #1
 8009f66:	4637      	mov	r7, r6
 8009f68:	463d      	mov	r5, r7
 8009f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f6e:	b10b      	cbz	r3, 8009f74 <_svfiprintf_r+0x58>
 8009f70:	2b25      	cmp	r3, #37	; 0x25
 8009f72:	d13e      	bne.n	8009ff2 <_svfiprintf_r+0xd6>
 8009f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f78:	d00b      	beq.n	8009f92 <_svfiprintf_r+0x76>
 8009f7a:	4653      	mov	r3, sl
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4640      	mov	r0, r8
 8009f82:	f7ff ff71 	bl	8009e68 <__ssputs_r>
 8009f86:	3001      	adds	r0, #1
 8009f88:	f000 80a4 	beq.w	800a0d4 <_svfiprintf_r+0x1b8>
 8009f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8e:	4453      	add	r3, sl
 8009f90:	9309      	str	r3, [sp, #36]	; 0x24
 8009f92:	783b      	ldrb	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 809d 	beq.w	800a0d4 <_svfiprintf_r+0x1b8>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	9307      	str	r3, [sp, #28]
 8009fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fac:	931a      	str	r3, [sp, #104]	; 0x68
 8009fae:	462f      	mov	r7, r5
 8009fb0:	2205      	movs	r2, #5
 8009fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009fb6:	4850      	ldr	r0, [pc, #320]	; (800a0f8 <_svfiprintf_r+0x1dc>)
 8009fb8:	f7f6 f932 	bl	8000220 <memchr>
 8009fbc:	9b04      	ldr	r3, [sp, #16]
 8009fbe:	b9d0      	cbnz	r0, 8009ff6 <_svfiprintf_r+0xda>
 8009fc0:	06d9      	lsls	r1, r3, #27
 8009fc2:	bf44      	itt	mi
 8009fc4:	2220      	movmi	r2, #32
 8009fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fca:	071a      	lsls	r2, r3, #28
 8009fcc:	bf44      	itt	mi
 8009fce:	222b      	movmi	r2, #43	; 0x2b
 8009fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fd4:	782a      	ldrb	r2, [r5, #0]
 8009fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8009fd8:	d015      	beq.n	800a006 <_svfiprintf_r+0xea>
 8009fda:	9a07      	ldr	r2, [sp, #28]
 8009fdc:	462f      	mov	r7, r5
 8009fde:	2000      	movs	r0, #0
 8009fe0:	250a      	movs	r5, #10
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fe8:	3b30      	subs	r3, #48	; 0x30
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	d94d      	bls.n	800a08a <_svfiprintf_r+0x16e>
 8009fee:	b1b8      	cbz	r0, 800a020 <_svfiprintf_r+0x104>
 8009ff0:	e00f      	b.n	800a012 <_svfiprintf_r+0xf6>
 8009ff2:	462f      	mov	r7, r5
 8009ff4:	e7b8      	b.n	8009f68 <_svfiprintf_r+0x4c>
 8009ff6:	4a40      	ldr	r2, [pc, #256]	; (800a0f8 <_svfiprintf_r+0x1dc>)
 8009ff8:	1a80      	subs	r0, r0, r2
 8009ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8009ffe:	4318      	orrs	r0, r3
 800a000:	9004      	str	r0, [sp, #16]
 800a002:	463d      	mov	r5, r7
 800a004:	e7d3      	b.n	8009fae <_svfiprintf_r+0x92>
 800a006:	9a03      	ldr	r2, [sp, #12]
 800a008:	1d11      	adds	r1, r2, #4
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	9103      	str	r1, [sp, #12]
 800a00e:	2a00      	cmp	r2, #0
 800a010:	db01      	blt.n	800a016 <_svfiprintf_r+0xfa>
 800a012:	9207      	str	r2, [sp, #28]
 800a014:	e004      	b.n	800a020 <_svfiprintf_r+0x104>
 800a016:	4252      	negs	r2, r2
 800a018:	f043 0302 	orr.w	r3, r3, #2
 800a01c:	9207      	str	r2, [sp, #28]
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	783b      	ldrb	r3, [r7, #0]
 800a022:	2b2e      	cmp	r3, #46	; 0x2e
 800a024:	d10c      	bne.n	800a040 <_svfiprintf_r+0x124>
 800a026:	787b      	ldrb	r3, [r7, #1]
 800a028:	2b2a      	cmp	r3, #42	; 0x2a
 800a02a:	d133      	bne.n	800a094 <_svfiprintf_r+0x178>
 800a02c:	9b03      	ldr	r3, [sp, #12]
 800a02e:	1d1a      	adds	r2, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	9203      	str	r2, [sp, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	bfb8      	it	lt
 800a038:	f04f 33ff 	movlt.w	r3, #4294967295
 800a03c:	3702      	adds	r7, #2
 800a03e:	9305      	str	r3, [sp, #20]
 800a040:	4d2e      	ldr	r5, [pc, #184]	; (800a0fc <_svfiprintf_r+0x1e0>)
 800a042:	7839      	ldrb	r1, [r7, #0]
 800a044:	2203      	movs	r2, #3
 800a046:	4628      	mov	r0, r5
 800a048:	f7f6 f8ea 	bl	8000220 <memchr>
 800a04c:	b138      	cbz	r0, 800a05e <_svfiprintf_r+0x142>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	1b40      	subs	r0, r0, r5
 800a052:	fa03 f000 	lsl.w	r0, r3, r0
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	4303      	orrs	r3, r0
 800a05a:	3701      	adds	r7, #1
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	7839      	ldrb	r1, [r7, #0]
 800a060:	4827      	ldr	r0, [pc, #156]	; (800a100 <_svfiprintf_r+0x1e4>)
 800a062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a066:	2206      	movs	r2, #6
 800a068:	1c7e      	adds	r6, r7, #1
 800a06a:	f7f6 f8d9 	bl	8000220 <memchr>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d038      	beq.n	800a0e4 <_svfiprintf_r+0x1c8>
 800a072:	4b24      	ldr	r3, [pc, #144]	; (800a104 <_svfiprintf_r+0x1e8>)
 800a074:	bb13      	cbnz	r3, 800a0bc <_svfiprintf_r+0x1a0>
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	3307      	adds	r3, #7
 800a07a:	f023 0307 	bic.w	r3, r3, #7
 800a07e:	3308      	adds	r3, #8
 800a080:	9303      	str	r3, [sp, #12]
 800a082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a084:	444b      	add	r3, r9
 800a086:	9309      	str	r3, [sp, #36]	; 0x24
 800a088:	e76d      	b.n	8009f66 <_svfiprintf_r+0x4a>
 800a08a:	fb05 3202 	mla	r2, r5, r2, r3
 800a08e:	2001      	movs	r0, #1
 800a090:	460f      	mov	r7, r1
 800a092:	e7a6      	b.n	8009fe2 <_svfiprintf_r+0xc6>
 800a094:	2300      	movs	r3, #0
 800a096:	3701      	adds	r7, #1
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	4619      	mov	r1, r3
 800a09c:	250a      	movs	r5, #10
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a4:	3a30      	subs	r2, #48	; 0x30
 800a0a6:	2a09      	cmp	r2, #9
 800a0a8:	d903      	bls.n	800a0b2 <_svfiprintf_r+0x196>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0c8      	beq.n	800a040 <_svfiprintf_r+0x124>
 800a0ae:	9105      	str	r1, [sp, #20]
 800a0b0:	e7c6      	b.n	800a040 <_svfiprintf_r+0x124>
 800a0b2:	fb05 2101 	mla	r1, r5, r1, r2
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	e7f0      	b.n	800a09e <_svfiprintf_r+0x182>
 800a0bc:	ab03      	add	r3, sp, #12
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4b11      	ldr	r3, [pc, #68]	; (800a108 <_svfiprintf_r+0x1ec>)
 800a0c4:	a904      	add	r1, sp, #16
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7fe f846 	bl	8008158 <_printf_float>
 800a0cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0d0:	4681      	mov	r9, r0
 800a0d2:	d1d6      	bne.n	800a082 <_svfiprintf_r+0x166>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	065b      	lsls	r3, r3, #25
 800a0d8:	f53f af35 	bmi.w	8009f46 <_svfiprintf_r+0x2a>
 800a0dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0de:	b01d      	add	sp, #116	; 0x74
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <_svfiprintf_r+0x1ec>)
 800a0ec:	a904      	add	r1, sp, #16
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	f7fe fae8 	bl	80086c4 <_printf_i>
 800a0f4:	e7ea      	b.n	800a0cc <_svfiprintf_r+0x1b0>
 800a0f6:	bf00      	nop
 800a0f8:	0800a37c 	.word	0x0800a37c
 800a0fc:	0800a382 	.word	0x0800a382
 800a100:	0800a386 	.word	0x0800a386
 800a104:	08008159 	.word	0x08008159
 800a108:	08009e69 	.word	0x08009e69

0800a10c <_sbrk_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4c06      	ldr	r4, [pc, #24]	; (800a128 <_sbrk_r+0x1c>)
 800a110:	2300      	movs	r3, #0
 800a112:	4605      	mov	r5, r0
 800a114:	4608      	mov	r0, r1
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	f7f8 faf6 	bl	8002708 <_sbrk>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_sbrk_r+0x1a>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	b103      	cbz	r3, 800a126 <_sbrk_r+0x1a>
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	200004c4 	.word	0x200004c4

0800a12c <__ascii_wctomb>:
 800a12c:	b149      	cbz	r1, 800a142 <__ascii_wctomb+0x16>
 800a12e:	2aff      	cmp	r2, #255	; 0xff
 800a130:	bf85      	ittet	hi
 800a132:	238a      	movhi	r3, #138	; 0x8a
 800a134:	6003      	strhi	r3, [r0, #0]
 800a136:	700a      	strbls	r2, [r1, #0]
 800a138:	f04f 30ff 	movhi.w	r0, #4294967295
 800a13c:	bf98      	it	ls
 800a13e:	2001      	movls	r0, #1
 800a140:	4770      	bx	lr
 800a142:	4608      	mov	r0, r1
 800a144:	4770      	bx	lr

0800a146 <memmove>:
 800a146:	4288      	cmp	r0, r1
 800a148:	b510      	push	{r4, lr}
 800a14a:	eb01 0302 	add.w	r3, r1, r2
 800a14e:	d807      	bhi.n	800a160 <memmove+0x1a>
 800a150:	1e42      	subs	r2, r0, #1
 800a152:	4299      	cmp	r1, r3
 800a154:	d00a      	beq.n	800a16c <memmove+0x26>
 800a156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a15a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a15e:	e7f8      	b.n	800a152 <memmove+0xc>
 800a160:	4283      	cmp	r3, r0
 800a162:	d9f5      	bls.n	800a150 <memmove+0xa>
 800a164:	1881      	adds	r1, r0, r2
 800a166:	1ad2      	subs	r2, r2, r3
 800a168:	42d3      	cmn	r3, r2
 800a16a:	d100      	bne.n	800a16e <memmove+0x28>
 800a16c:	bd10      	pop	{r4, pc}
 800a16e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a172:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a176:	e7f7      	b.n	800a168 <memmove+0x22>

0800a178 <__malloc_lock>:
 800a178:	4770      	bx	lr

0800a17a <__malloc_unlock>:
 800a17a:	4770      	bx	lr

0800a17c <_realloc_r>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	4607      	mov	r7, r0
 800a180:	4614      	mov	r4, r2
 800a182:	460e      	mov	r6, r1
 800a184:	b921      	cbnz	r1, 800a190 <_realloc_r+0x14>
 800a186:	4611      	mov	r1, r2
 800a188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a18c:	f7ff be12 	b.w	8009db4 <_malloc_r>
 800a190:	b922      	cbnz	r2, 800a19c <_realloc_r+0x20>
 800a192:	f7ff fdc1 	bl	8009d18 <_free_r>
 800a196:	4625      	mov	r5, r4
 800a198:	4628      	mov	r0, r5
 800a19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a19c:	f000 f814 	bl	800a1c8 <_malloc_usable_size_r>
 800a1a0:	42a0      	cmp	r0, r4
 800a1a2:	d20f      	bcs.n	800a1c4 <_realloc_r+0x48>
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7ff fe04 	bl	8009db4 <_malloc_r>
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d0f2      	beq.n	800a198 <_realloc_r+0x1c>
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	f7ff fabb 	bl	8009730 <memcpy>
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f7ff fdab 	bl	8009d18 <_free_r>
 800a1c2:	e7e9      	b.n	800a198 <_realloc_r+0x1c>
 800a1c4:	4635      	mov	r5, r6
 800a1c6:	e7e7      	b.n	800a198 <_realloc_r+0x1c>

0800a1c8 <_malloc_usable_size_r>:
 800a1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1cc:	1f18      	subs	r0, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfbc      	itt	lt
 800a1d2:	580b      	ldrlt	r3, [r1, r0]
 800a1d4:	18c0      	addlt	r0, r0, r3
 800a1d6:	4770      	bx	lr

0800a1d8 <_init>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	bf00      	nop
 800a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	469e      	mov	lr, r3
 800a1e2:	4770      	bx	lr

0800a1e4 <_fini>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	bf00      	nop
 800a1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ea:	bc08      	pop	{r3}
 800a1ec:	469e      	mov	lr, r3
 800a1ee:	4770      	bx	lr
